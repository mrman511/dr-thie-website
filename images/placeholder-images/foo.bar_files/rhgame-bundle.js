var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.getGlobal = function(passedInThis) {
  var possibleGlobals = ["object" == typeof globalThis && globalThis, passedInThis, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof global && global];
  var i = 0;
  for (; i < possibleGlobals.length; ++i) {
    var maybeGlobal = possibleGlobals[i];
    if (maybeGlobal && maybeGlobal["Math"] == Math) {
      return maybeGlobal;
    }
  }
  return {valueOf:function() {
    throw new Error("Cannot find global object");
  }}.valueOf();
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.checkEs6ConformanceViaProxy = function() {
  try {
    var proxied = {};
    var proxy = Object.create(new $jscomp.global["Proxy"](proxied, {"get":function(target, key, receiver) {
      return target == proxied && key == "q" && receiver == proxy;
    }}));
    return proxy["q"] === true;
  } catch (err) {
    return false;
  }
};
$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = false;
$jscomp.ES6_CONFORMANCE = $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS && $jscomp.checkEs6ConformanceViaProxy();
$jscomp.arrayIteratorImpl = function(array) {
  var index = 0;
  return function() {
    if (index < array.length) {
      return {done:false, value:array[index++]};
    } else {
      return {done:true};
    }
  };
};
$jscomp.arrayIterator = function(array) {
  return {next:$jscomp.arrayIteratorImpl(array)};
};
$jscomp.ASSUME_ES5 = false;
$jscomp.ASSUME_NO_NATIVE_MAP = false;
$jscomp.ASSUME_NO_NATIVE_SET = false;
$jscomp.SIMPLE_FROUND_POLYFILL = false;
$jscomp.ISOLATE_POLYFILLS = false;
$jscomp.FORCE_POLYFILL_PROMISE = false;
$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;
$jscomp.defineProperty = $jscomp.ASSUME_ES5 || typeof Object.defineProperties == "function" ? Object.defineProperty : function(target, property, descriptor) {
  if (target == Array.prototype || target == Object.prototype) {
    return target;
  }
  target[property] = descriptor.value;
  return target;
};
$jscomp.IS_SYMBOL_NATIVE = typeof Symbol === "function" && typeof Symbol("x") === "symbol";
$jscomp.TRUST_ES6_POLYFILLS = !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;
$jscomp.polyfills = {};
$jscomp.propertyToPolyfillSymbol = {};
$jscomp.POLYFILL_PREFIX = "$jscp$";
var $jscomp$lookupPolyfilledValue = function(target, property, isOptionalAccess) {
  if (isOptionalAccess && target == null) {
    return undefined;
  }
  var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];
  if (obfuscatedName == null) {
    return target[property];
  }
  var polyfill = target[obfuscatedName];
  return polyfill !== undefined ? polyfill : target[property];
};
$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {
  if (!polyfill) {
    return;
  }
  if ($jscomp.ISOLATE_POLYFILLS) {
    $jscomp.polyfillIsolated(target, polyfill, fromLang, toLang);
  } else {
    $jscomp.polyfillUnisolated(target, polyfill, fromLang, toLang);
  }
};
$jscomp.polyfillUnisolated = function(target, polyfill, fromLang, toLang) {
  var obj = $jscomp.global;
  var split = target.split(".");
  var i = 0;
  for (; i < split.length - 1; i++) {
    var key = split[i];
    if (!(key in obj)) {
      return;
    }
    obj = obj[key];
  }
  var property = split[split.length - 1];
  var orig = obj[property];
  var impl = polyfill(orig);
  if (impl == orig || impl == null) {
    return;
  }
  $jscomp.defineProperty(obj, property, {configurable:true, writable:true, value:impl});
};
$jscomp.polyfillIsolated = function(target, polyfill, fromLang, toLang) {
  var split = target.split(".");
  var isSimpleName = split.length === 1;
  var root = split[0];
  var ownerObject;
  if (!isSimpleName && root in $jscomp.polyfills) {
    ownerObject = $jscomp.polyfills;
  } else {
    ownerObject = $jscomp.global;
  }
  var i = 0;
  for (; i < split.length - 1; i++) {
    var key = split[i];
    if (!(key in ownerObject)) {
      return;
    }
    ownerObject = ownerObject[key];
  }
  var property = split[split.length - 1];
  var nativeImpl = $jscomp.IS_SYMBOL_NATIVE && fromLang === "es6" ? ownerObject[property] : null;
  var impl = polyfill(nativeImpl);
  if (impl == null) {
    return;
  }
  if (isSimpleName) {
    $jscomp.defineProperty($jscomp.polyfills, property, {configurable:true, writable:true, value:impl});
  } else if (impl !== nativeImpl) {
    if ($jscomp.propertyToPolyfillSymbol[property] === undefined) {
      var BIN_ID = Math.random() * 1e9 >>> 0;
      $jscomp.propertyToPolyfillSymbol[property] = $jscomp.IS_SYMBOL_NATIVE ? $jscomp.global["Symbol"](property) : $jscomp.POLYFILL_PREFIX + BIN_ID + "$" + property;
    }
    var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];
    $jscomp.defineProperty(ownerObject, obfuscatedName, {configurable:true, writable:true, value:impl});
  }
};
$jscomp.initSymbol = function() {
};
$jscomp.polyfill("Symbol", function(orig) {
  if (orig) {
    return orig;
  }
  var SymbolClass = function(id, opt_description) {
    this.$jscomp$symbol$id_ = id;
    this.description;
    $jscomp.defineProperty(this, "description", {configurable:true, writable:true, value:opt_description});
  };
  SymbolClass.prototype.toString = function() {
    return this.$jscomp$symbol$id_;
  };
  var BIN_ID = Math.random() * 1e9 >>> 0;
  var SYMBOL_PREFIX = "jscomp_symbol_" + BIN_ID + "_";
  var counter = 0;
  var symbolPolyfill = function(opt_description) {
    if (this instanceof symbolPolyfill) {
      throw new TypeError("Symbol is not a constructor");
    }
    return new SymbolClass(SYMBOL_PREFIX + (opt_description || "") + "_" + counter++, opt_description);
  };
  return symbolPolyfill;
}, "es6", "es3");
$jscomp.polyfill("Symbol.iterator", function(orig) {
  if (orig) {
    return orig;
  }
  var symbolIterator = Symbol("Symbol.iterator");
  var arrayLikes = ["Array", "Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array"];
  var i = 0;
  for (; i < arrayLikes.length; i++) {
    var ArrayLikeCtor = $jscomp.global[arrayLikes[i]];
    if (typeof ArrayLikeCtor === "function" && typeof ArrayLikeCtor.prototype[symbolIterator] != "function") {
      $jscomp.defineProperty(ArrayLikeCtor.prototype, symbolIterator, {configurable:true, writable:true, value:function() {
        return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));
      }});
    }
  }
  return symbolIterator;
}, "es6", "es3");
$jscomp.polyfill("Symbol.asyncIterator", function(orig) {
  if (orig) {
    return orig;
  }
  return Symbol("Symbol.asyncIterator");
}, "es9", "es3");
$jscomp.iteratorPrototype = function(next) {
  var iterator = {next:next};
  iterator[Symbol.iterator] = function() {
    return this;
  };
  return iterator;
};
$jscomp.makeIterator = function(iterable) {
  var iteratorFunction = typeof Symbol != "undefined" && Symbol.iterator && iterable[Symbol.iterator];
  if (iteratorFunction) {
    return iteratorFunction.call(iterable);
  }
  if (typeof iterable["length"] == "number") {
    return $jscomp.arrayIterator(iterable);
  }
  throw new Error(String(iterable) + " is not an iterable or ArrayLike");
};
$jscomp.owns = function(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};
$jscomp.polyfill("WeakMap", function(NativeWeakMap) {
  function isConformant() {
    if (!NativeWeakMap || !Object.seal) {
      return false;
    }
    try {
      var x = Object.seal({});
      var y = Object.seal({});
      var map = new NativeWeakMap([[x, 2], [y, 3]]);
      if (map.get(x) != 2 || map.get(y) != 3) {
        return false;
      }
      map["delete"](x);
      map.set(y, 4);
      return !map.has(x) && map.get(y) == 4;
    } catch (err) {
      return false;
    }
  }
  function WeakMapMembership() {
  }
  function isValidKey(key) {
    var type = typeof key;
    return type === "object" && key !== null || type === "function";
  }
  function insert(target) {
    if (!$jscomp.owns(target, prop)) {
      var obj = new WeakMapMembership();
      $jscomp.defineProperty(target, prop, {value:obj});
    }
  }
  function patch(name) {
    if ($jscomp.ISOLATE_POLYFILLS) {
      return;
    }
    var prev = Object[name];
    if (prev) {
      Object[name] = function(target) {
        if (target instanceof WeakMapMembership) {
          return target;
        } else {
          if (Object.isExtensible(target)) {
            insert(target);
          }
          return prev(target);
        }
      };
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) {
      return NativeWeakMap;
    }
  } else {
    if (isConformant()) {
      return NativeWeakMap;
    }
  }
  var prop = "$jscomp_hidden_" + Math.random();
  patch("freeze");
  patch("preventExtensions");
  patch("seal");
  var index = 0;
  var PolyfillWeakMap = function(opt_iterable) {
    this.id_ = (index = index + (Math.random() + 1)).toString();
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      for (; !(entry = iter.next()).done;) {
        var item = entry.value;
        this.set(item[0], item[1]);
      }
    }
  };
  PolyfillWeakMap.prototype.set = function(key, value) {
    if (!isValidKey(key)) {
      throw new Error("Invalid WeakMap key");
    }
    insert(key);
    if (!$jscomp.owns(key, prop)) {
      throw new Error("WeakMap key fail: " + key);
    }
    key[prop][this.id_] = value;
    return this;
  };
  PolyfillWeakMap.prototype.get = function(key) {
    return isValidKey(key) && $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;
  };
  PolyfillWeakMap.prototype.has = function(key) {
    return isValidKey(key) && $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);
  };
  PolyfillWeakMap.prototype["delete"] = function(key) {
    if (!isValidKey(key) || !$jscomp.owns(key, prop) || !$jscomp.owns(key[prop], this.id_)) {
      return false;
    }
    return delete key[prop][this.id_];
  };
  return PolyfillWeakMap;
}, "es6", "es3");
$jscomp.MapEntry = function() {
  this.previous;
  this.next;
  this.head;
  this.key;
  this.value;
};
$jscomp.polyfill("Map", function(NativeMap) {
  function isConformant() {
    if ($jscomp.ASSUME_NO_NATIVE_MAP || !NativeMap || typeof NativeMap != "function" || !NativeMap.prototype.entries || typeof Object.seal != "function") {
      return false;
    }
    try {
      NativeMap = NativeMap;
      var key = Object.seal({x:4});
      var map = new NativeMap($jscomp.makeIterator([[key, "s"]]));
      if (map.get(key) != "s" || map.size != 1 || map.get({x:4}) || map.set({x:4}, "t") != map || map.size != 2) {
        return false;
      }
      var iter = map.entries();
      var item = iter.next();
      if (item.done || item.value[0] != key || item.value[1] != "s") {
        return false;
      }
      item = iter.next();
      if (item.done || item.value[0].x != 4 || item.value[1] != "t" || !iter.next().done) {
        return false;
      }
      return true;
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeMap && $jscomp.ES6_CONFORMANCE) {
      return NativeMap;
    }
  } else {
    if (isConformant()) {
      return NativeMap;
    }
  }
  var idMap = new WeakMap();
  var DATA = 0;
  var HEAD = 1;
  var PolyfillMap = function(opt_iterable) {
    this[DATA] = {};
    this[HEAD] = createHead();
    this.size = 0;
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      for (; !(entry = iter.next()).done;) {
        var item = entry.value;
        this.set(item[0], item[1]);
      }
    }
  };
  PolyfillMap.prototype.set = function(key, value) {
    key = key === 0 ? 0 : key;
    var r = maybeGetEntry(this, key);
    if (!r.list) {
      r.list = this[DATA][r.id] = [];
    }
    if (!r.entry) {
      r.entry = {next:this[HEAD], previous:this[HEAD].previous, head:this[HEAD], key:key, value:value};
      r.list.push(r.entry);
      this[HEAD].previous.next = r.entry;
      this[HEAD].previous = r.entry;
      this.size++;
    } else {
      r.entry.value = value;
    }
    return this;
  };
  PolyfillMap.prototype["delete"] = function(key) {
    var r = maybeGetEntry(this, key);
    if (r.entry && r.list) {
      r.list.splice(r.index, 1);
      if (!r.list.length) {
        delete this[DATA][r.id];
      }
      r.entry.previous.next = r.entry.next;
      r.entry.next.previous = r.entry.previous;
      r.entry.head = null;
      this.size--;
      return true;
    }
    return false;
  };
  PolyfillMap.prototype.clear = function() {
    this[DATA] = {};
    this[HEAD] = this[HEAD].previous = createHead();
    this.size = 0;
  };
  PolyfillMap.prototype.has = function(key) {
    return !!maybeGetEntry(this, key).entry;
  };
  PolyfillMap.prototype.get = function(key) {
    var entry = maybeGetEntry(this, key).entry;
    return entry && entry.value;
  };
  PolyfillMap.prototype.entries = function() {
    return makeIterator(this, function(entry) {
      return [entry.key, entry.value];
    });
  };
  PolyfillMap.prototype.keys = function() {
    return makeIterator(this, function(entry) {
      return entry.key;
    });
  };
  PolyfillMap.prototype.values = function() {
    return makeIterator(this, function(entry) {
      return entry.value;
    });
  };
  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {
    var iter = this.entries();
    var item;
    for (; !(item = iter.next()).done;) {
      var entry = item.value;
      callback.call(opt_thisArg, entry[1], entry[0], this);
    }
  };
  PolyfillMap.prototype[Symbol.iterator] = PolyfillMap.prototype.entries;
  var maybeGetEntry = function(map, key) {
    var id = getId(key);
    var list = map[DATA][id];
    if (list && $jscomp.owns(map[DATA], id)) {
      var index = 0;
      for (; index < list.length; index++) {
        var entry = list[index];
        if (key !== key && entry.key !== entry.key || key === entry.key) {
          return {id:id, list:list, index:index, entry:entry};
        }
      }
    }
    return {id:id, list:list, index:-1, entry:undefined};
  };
  var makeIterator = function(map, func) {
    var entry = map[HEAD];
    return $jscomp.iteratorPrototype(function() {
      if (entry) {
        for (; entry.head != map[HEAD];) {
          entry = entry.previous;
        }
        for (; entry.next != entry.head;) {
          entry = entry.next;
          return {done:false, value:func(entry)};
        }
        entry = null;
      }
      return {done:true, value:void 0};
    });
  };
  var createHead = function() {
    var head = {};
    head.previous = head.next = head.head = head;
    return head;
  };
  var mapIndex = 0;
  var getId = function(obj) {
    var type = obj && typeof obj;
    if (type == "object" || type == "function") {
      obj = obj;
      if (!idMap.has(obj)) {
        var id = "" + ++mapIndex;
        idMap.set(obj, id);
        return id;
      }
      return idMap.get(obj);
    }
    return "p_" + obj;
  };
  return PolyfillMap;
}, "es6", "es3");
$jscomp.polyfill("Set", function(NativeSet) {
  function isConformant() {
    if ($jscomp.ASSUME_NO_NATIVE_SET || !NativeSet || typeof NativeSet != "function" || !NativeSet.prototype.entries || typeof Object.seal != "function") {
      return false;
    }
    try {
      NativeSet = NativeSet;
      var value = Object.seal({x:4});
      var set = new NativeSet($jscomp.makeIterator([value]));
      if (!set.has(value) || set.size != 1 || set.add(value) != set || set.size != 1 || set.add({x:4}) != set || set.size != 2) {
        return false;
      }
      var iter = set.entries();
      var item = iter.next();
      if (item.done || item.value[0] != value || item.value[1] != value) {
        return false;
      }
      item = iter.next();
      if (item.done || item.value[0] == value || item.value[0].x != 4 || item.value[1] != item.value[0]) {
        return false;
      }
      return iter.next().done;
    } catch (err) {
      return false;
    }
  }
  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {
    if (NativeSet && $jscomp.ES6_CONFORMANCE) {
      return NativeSet;
    }
  } else {
    if (isConformant()) {
      return NativeSet;
    }
  }
  var PolyfillSet = function(opt_iterable) {
    this.map_ = new Map();
    if (opt_iterable) {
      var iter = $jscomp.makeIterator(opt_iterable);
      var entry;
      for (; !(entry = iter.next()).done;) {
        var item = entry.value;
        this.add(item);
      }
    }
    this.size = this.map_.size;
  };
  PolyfillSet.prototype.add = function(value) {
    value = value === 0 ? 0 : value;
    this.map_.set(value, value);
    this.size = this.map_.size;
    return this;
  };
  PolyfillSet.prototype["delete"] = function(value) {
    var result = this.map_["delete"](value);
    this.size = this.map_.size;
    return result;
  };
  PolyfillSet.prototype.clear = function() {
    this.map_.clear();
    this.size = 0;
  };
  PolyfillSet.prototype.has = function(value) {
    return this.map_.has(value);
  };
  PolyfillSet.prototype.entries = function() {
    return this.map_.entries();
  };
  PolyfillSet.prototype.values = function() {
    return this.map_.values();
  };
  PolyfillSet.prototype.keys = PolyfillSet.prototype.values;
  PolyfillSet.prototype[Symbol.iterator] = PolyfillSet.prototype.values;
  PolyfillSet.prototype.forEach = function(callback, opt_thisArg) {
    var set = this;
    this.map_.forEach(function(value) {
      return callback.call(opt_thisArg, value, value, set);
    });
  };
  return PolyfillSet;
}, "es6", "es3");
(function() {
  function callRequireCallback(callback, opt_module) {
    var oldPath = currentModulePath;
    try {
      if (opt_module) {
        currentModulePath = opt_module.id;
        callback.call(opt_module, createRequire(opt_module), opt_module.exports, opt_module);
      } else {
        callback($jscomp.require);
      }
    } finally {
      currentModulePath = oldPath;
    }
  }
  function normalizePath(path) {
    var components = path.split("/");
    var i = 0;
    for (; i < components.length;) {
      if (components[i] == ".") {
        components.splice(i, 1);
      } else if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
    return components.join("/");
  }
  function getCacheEntry(id) {
    var cacheEntry = moduleCache.get(id);
    if (cacheEntry === undefined) {
      throw new Error("Module " + id + " does not exist.");
    }
    return cacheEntry;
  }
  function maybeNormalizePath(root, absOrRelativePath) {
    if (absOrRelativePath.startsWith("./") || absOrRelativePath.startsWith("../")) {
      return normalizePath(root + "/../" + absOrRelativePath);
    } else {
      return absOrRelativePath;
    }
  }
  function createRequire(opt_module) {
    function require(absOrRelativePath) {
      var absPath = absOrRelativePath;
      if (opt_module) {
        absPath = maybeNormalizePath(opt_module.id, absPath);
      }
      return getCacheEntry(absPath).load();
    }
    function requireEnsure(requires, callback) {
      if (currentModulePath) {
        var i = 0;
        for (; i < requires.length; i++) {
          requires[i] = maybeNormalizePath(currentModulePath, requires[i]);
        }
      }
      var blockingRequires = [];
      i = 0;
      for (; i < requires.length; i++) {
        var required = moduleCache.get(requires[i]);
        if (!required || required.blockingDeps.size) {
          blockingRequires.push(requires[i]);
        }
      }
      if (blockingRequires.length) {
        var requireSet = new Set(blockingRequires);
        var callbackEntry = new CallbackEntry(requireSet, callback);
        requireSet.forEach(function(require) {
          var arr = ensureMap.get(require);
          if (!arr) {
            arr = [];
            ensureMap.set(require, arr);
          }
          arr.push(callbackEntry);
        });
      } else {
        callback(require);
      }
    }
    require.ensure = requireEnsure;
    return require;
  }
  function markAvailable(absModulePath) {
    var ensures = ensureMap.get(absModulePath);
    if (ensures) {
      var i = 0;
      for (; i < ensures.length; i++) {
        var entry = ensures[i];
        entry.requireSet["delete"](absModulePath);
        if (!entry.requireSet.size) {
          ensures.splice(i--, 1);
          callRequireCallback(entry.callback);
        }
      }
      if (!ensures.length) {
        ensureMap["delete"](absModulePath);
      }
    }
  }
  function getTransitiveBlockingDepsOf(moduleId) {
    var cacheEntry = moduleCache.get(moduleId);
    var blocking = new Set();
    if (cacheEntry) {
      cacheEntry.blockingDeps.forEach(function(dep) {
        getTransitiveBlockingDepsOf(dep).forEach(function(transitive) {
          blocking.add(transitive);
        });
      });
    } else {
      blocking.add(moduleId);
    }
    return blocking;
  }
  function addAsBlocking(blocked, blocker) {
    if (blocked.module.id != blocker) {
      var blockedModules = blockingModulePathToBlockedModules.get(blocker);
      if (!blockedModules) {
        blockedModules = new Set();
        blockingModulePathToBlockedModules.set(blocker, blockedModules);
      }
      blockedModules.add(blocked);
      blocked.blockingDeps.add(blocker);
    }
  }
  function removeAsBlocking(cacheEntry) {
    var blocked = blockingModulePathToBlockedModules.get(cacheEntry.module.id);
    if (blocked) {
      blockingModulePathToBlockedModules["delete"](cacheEntry.module.id);
      blocked.forEach(function(blockedCacheEntry) {
        blockedCacheEntry.blockingDeps["delete"](cacheEntry.module.id);
        cacheEntry.blockingDeps.forEach(function(blocker) {
          addAsBlocking(blockedCacheEntry, blocker);
        });
        if (!blockedCacheEntry.blockingDeps.size) {
          removeAsBlocking(blockedCacheEntry);
          markAvailable(blockedCacheEntry.module.id);
        }
      });
    }
  }
  var Module = function(id, opt_exports) {
    this.id = id;
    this.exports = opt_exports || {};
  };
  Module.prototype.exportAllFrom = function(other) {
    var module = this;
    var define = {};
    var key;
    for (key in other) {
      if (key == "default" || key in module.exports || key in define) {
        continue;
      }
      define[key] = {enumerable:true, get:function(key) {
        return function() {
          return other[key];
        };
      }(key)};
    }
    $jscomp.global.Object.defineProperties(module.exports, define);
  };
  var CacheEntry = function(def, module, path) {
    this.def = def;
    this.module = module;
    this.path = path;
    this.blockingDeps = new Set();
  };
  CacheEntry.prototype.load = function() {
    if (this.def) {
      var def = this.def;
      this.def = null;
      callRequireCallback(def, this.module);
    }
    return this.module.exports;
  };
  var moduleCache = new Map();
  var currentModulePath = "";
  $jscomp.getCurrentModulePath = function() {
    return currentModulePath;
  };
  var ensureMap = new Map();
  var CallbackEntry = function(requireSet, callback) {
    this.requireSet = requireSet;
    this.callback = callback;
  };
  $jscomp.require = createRequire();
  $jscomp.hasModule = function(id) {
    return moduleCache.has(id);
  };
  $jscomp.registerModule = function(moduleDef, absModulePath, opt_shallowDeps) {
    if (moduleCache.has(absModulePath)) {
      throw new Error("Module " + absModulePath + " has already been registered.");
    }
    if (currentModulePath) {
      throw new Error("Cannot nest modules.");
    }
    var shallowDeps = opt_shallowDeps || [];
    var i = 0;
    for (; i < shallowDeps.length; i++) {
      shallowDeps[i] = maybeNormalizePath(absModulePath, shallowDeps[i]);
    }
    var blockingDeps = new Set();
    i = 0;
    for (; i < shallowDeps.length; i++) {
      getTransitiveBlockingDepsOf(shallowDeps[i]).forEach(function(transitive) {
        blockingDeps.add(transitive);
      });
    }
    blockingDeps["delete"](absModulePath);
    var cacheEntry = new CacheEntry(moduleDef, new Module(absModulePath), absModulePath);
    moduleCache.set(absModulePath, cacheEntry);
    blockingDeps.forEach(function(blocker) {
      addAsBlocking(cacheEntry, blocker);
    });
    if (!blockingDeps.size) {
      markAvailable(cacheEntry.module.id);
    }
    removeAsBlocking(cacheEntry);
  };
  var blockingModulePathToBlockedModules = new Map();
  $jscomp.registerAndLoadModule = function(moduleDef, absModulePath, shallowDeps) {
    $jscomp.require.ensure([absModulePath], function(require) {
      require(absModulePath);
    });
    $jscomp.registerModule(moduleDef, absModulePath, shallowDeps);
  };
  $jscomp.registerEs6ModuleExports = function(absModulePath, exports) {
    if (moduleCache.has(absModulePath)) {
      throw new Error("Module at path " + absModulePath + " is already registered.");
    }
    var entry = new CacheEntry(null, new Module(absModulePath, exports), absModulePath);
    moduleCache.set(absModulePath, entry);
    markAvailable(absModulePath);
  };
  $jscomp.clearModules = function() {
    moduleCache.clear();
  };
})();
this.CLOSURE_EVAL_PREFILTER = function(s) { return s; };(function(thisValue){var isChrome87 = false; try {isChrome87 =  eval(trustedTypes.emptyScript) !== trustedTypes.emptyScript } catch (e) {} if (typeof trustedTypes !== 'undefined' && trustedTypes.createPolicy &&isChrome87 ) {  var policy = trustedTypes.createPolicy('goog#devserver',{ createScript: function(s){ return s; }});  thisValue.CLOSURE_EVAL_PREFILTER = policy.createScript.bind(policy);}})(this);//javascript/closure/base.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Bootstrap for the Google JS Library (Closure).
 *
 * In uncompiled mode base.js will attempt to load Closure's deps file, unless
 * the global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects
 * to include their own deps file(s) from different locations.
 *
 * Avoid including base.js more than once. This is strictly discouraged and not
 * supported. goog.require(...) won't work properly in that case.
 *
 * @suppress {deprecated} Users cannot remove deprecated uses here.
 * @provideGoog
 */


/**
 * @define {boolean} Overridden to true by the compiler.
 */
var COMPILED = false;


/**
 * Base namespace for the Closure library.  Checks to see goog is already
 * defined in the current scope before assigning to prevent clobbering if
 * base.js is loaded more than once.
 *
 * @const
 */
var goog = goog || {};

/**
 * Reference to the global object.
 * https://www.ecma-international.org/ecma-262/9.0/index.html#sec-global-object
 *
 * More info on this implementation here:
 * https://docs.google.com/document/d/1NAeW4Wk7I7FV0Y2tcUFvQdGMc89k2vdgSXInw8_nvCI/edit
 *
 * @const
 * @suppress {undefinedVars} self won't be referenced unless `this` is falsy.
 * @type {!Global}
 */
goog.global =
    // Check `this` first for backwards compatibility.
    // Valid unless running as an ES module or in a function wrapper called
    //   without setting `this` properly.
    // Note that base.js can't usefully be imported as an ES module, but it may
    // be compiled into bundles that are loadable as ES modules.
    this ||
    // https://developer.mozilla.org/en-US/docs/Web/API/Window/self
    // For in-page browser environments and workers.
    self;


/**
 * A hook for overriding the define values in uncompiled mode.
 *
 * In uncompiled mode, `CLOSURE_UNCOMPILED_DEFINES` may be defined before
 * loading base.js.  If a key is defined in `CLOSURE_UNCOMPILED_DEFINES`,
 * `goog.define` will use the value instead of the default value.  This
 * allows flags to be overwritten without compilation (this is normally
 * accomplished with the compiler's "define" flag).
 *
 * Example:
 * <pre>
 *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};
 * </pre>
 *
 * @type {Object<string, (string|number|boolean)>|undefined}
 */
goog.global.CLOSURE_UNCOMPILED_DEFINES;


/**
 * A hook for overriding the define values in uncompiled or compiled mode,
 * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In
 * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.
 *
 * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or
 * string literals or the compiler will emit an error.
 *
 * While any @define value may be set, only those set with goog.define will be
 * effective for uncompiled code.
 *
 * Example:
 * <pre>
 *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;
 * </pre>
 *
 * Currently the Closure Compiler will only recognize very simple definitions of
 * this value when looking for values to apply to compiled code and ignore all
 * other references.  Specifically, it looks the value defined at the variable
 * declaration, as with the example above.
 *
 * TODO(b/202066289): Improve the recognized definitions.
 *
 * @type {!Object<string, (string|number|boolean)>|null|undefined}
 */
goog.global.CLOSURE_DEFINES;


/**
 * Builds an object structure for the provided namespace path, ensuring that
 * names that already exist are not overwritten. For example:
 * "a.b.c" -> a = {};a.b={};a.b.c={};
 * Used by goog.provide and goog.exportSymbol.
 * @param {string} name The name of the object that this file defines.
 * @param {*=} object The object to expose at the end of the path.
 * @param {boolean=} overwriteImplicit If object is set and a previous call
 *     implicitly constructed the namespace given by name, this parameter
 *     controls whether object should overwrite the implicitly constructed
 *     namespace or be merged into it. Defaults to false.
 * @param {?Object=} objectToExportTo The object to add the path to; if this
 *     field is not specified, its value defaults to `goog.global`.
 * @private
 */
goog.exportPath_ = function(name, object, overwriteImplicit, objectToExportTo) {
  var parts = name.split('.');
  var cur = objectToExportTo || goog.global;

  // Internet Explorer exhibits strange behavior when throwing errors from
  // methods externed in this manner.  See the testExportSymbolExceptions in
  // base_test.html for an example.
  if (!(parts[0] in cur) && typeof cur.execScript != 'undefined') {
    cur.execScript('var ' + parts[0]);
  }

  for (var part; parts.length && (part = parts.shift());) {
    if (!parts.length && object !== undefined) {
      if (!overwriteImplicit && goog.isObject(object) &&
          goog.isObject(cur[part])) {
        // Merge properties on object (the input parameter) with the existing
        // implicitly defined namespace, so as to not clobber previously
        // defined child namespaces.
        for (var prop in object) {
          if (object.hasOwnProperty(prop)) {
            cur[part][prop] = object[prop];
          }
        }
      } else {
        // Either there is no existing implicit namespace, or overwriteImplicit
        // is set to true, so directly assign object (the input parameter) to
        // the namespace.
        cur[part] = object;
      }
    } else if (cur[part] && cur[part] !== Object.prototype[part]) {
      cur = cur[part];
    } else {
      cur = cur[part] = {};
    }
  }
};


/**
 * Defines a named value. In uncompiled mode, the value is retrieved from
 * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
 * has the property specified, and otherwise used the defined defaultValue.
 * When compiled the default can be overridden using the compiler options or the
 * value set in the CLOSURE_DEFINES object. Returns the defined value so that it
 * can be used safely in modules. Note that the value type MUST be either
 * boolean, number, or string.
 *
 * @param {string} name The distinguished name to provide.
 * @param {T} defaultValue
 * @return {T} The defined value.
 * @template T
 */
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    var uncompiledDefines = goog.global.CLOSURE_UNCOMPILED_DEFINES;
    var defines = goog.global.CLOSURE_DEFINES;
    if (uncompiledDefines &&
        // Anti DOM-clobbering runtime check (b/37736576).
        /** @type {?} */ (uncompiledDefines).nodeType === undefined &&
        Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {
      value = uncompiledDefines[name];
    } else if (
        defines &&
        // Anti DOM-clobbering runtime check (b/37736576).
        /** @type {?} */ (defines).nodeType === undefined &&
        Object.prototype.hasOwnProperty.call(defines, name)) {
      value = defines[name];
    }
  }
  return value;
};


/**
 * @define {number} Integer year indicating the set of browser features that are
 * guaranteed to be present.  This is defined to include exactly features that
 * work correctly on all "modern" browsers that are stable on January 1 of the
 * specified year.  For example,
 * ```js
 * if (goog.FEATURESET_YEAR >= 2019) {
 *   // use APIs known to be available on all major stable browsers Jan 1, 2019
 * } else {
 *   // polyfill for older browsers
 * }
 * ```
 * This is intended to be the primary define for removing
 * unnecessary browser compatibility code (such as ponyfills and workarounds),
 * and should inform the default value for most other defines:
 * ```js
 * const ASSUME_NATIVE_PROMISE =
 *     goog.define('ASSUME_NATIVE_PROMISE', goog.FEATURESET_YEAR >= 2016);
 * ```
 *
 * The default assumption is that IE9 is the lowest supported browser, which was
 * first available Jan 1, 2012.
 *
 * TODO(mathiasb): Reference more thorough documentation when it's available.
 */
goog.FEATURESET_YEAR = goog.define('goog.FEATURESET_YEAR', 2012);


/**
 * @define {boolean} DEBUG is provided as a convenience so that debugging code
 * that should not be included in a production. It can be easily stripped
 * by specifying --define goog.DEBUG=false to the Closure Compiler aka
 * JSCompiler. For example, most toString() methods should be declared inside an
 * "if (goog.DEBUG)" conditional because they are generally used for debugging
 * purposes and it is difficult for the JSCompiler to statically determine
 * whether they are used.
 */
goog.DEBUG = goog.define('goog.DEBUG', true);


/**
 * @define {string} LOCALE defines the locale being used for compilation. It is
 * used to select locale specific data to be compiled in js binary. BUILD rule
 * can specify this value by "--define goog.LOCALE=<locale_name>" as a compiler
 * option.
 *
 * Take into account that the locale code format is important. You should use
 * the canonical Unicode format with hyphen as a delimiter. Language must be
 * lowercase, Language Script - Capitalized, Region - UPPERCASE.
 * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.
 *
 * See more info about locale codes here:
 * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
 *
 * For language codes you should use values defined by ISO 693-1. See it here
 * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from
 * this rule: the Hebrew language. For legacy reasons the old code (iw) should
 * be used instead of the new code (he).
 *
 * MOE:begin_intracomment_strip
 * See http://g3doc/i18n/identifiers/g3doc/synonyms.
 * MOE:end_intracomment_strip
 */
goog.LOCALE = goog.define('goog.LOCALE', 'en');  // default to en


/**
 * @define {boolean} Whether this code is running on trusted sites.
 *
 * On untrusted sites, several native functions can be defined or overridden by
 * external libraries like Prototype, Datejs, and JQuery and setting this flag
 * to false forces closure to use its own implementations when possible.
 *
 * If your JavaScript can be loaded by a third party site and you are wary about
 * relying on non-standard implementations, specify
 * "--define goog.TRUSTED_SITE=false" to the compiler.
 */
goog.TRUSTED_SITE = goog.define('goog.TRUSTED_SITE', true);


/**
 * @define {boolean} Whether code that calls {@link goog.setTestOnly} should
 *     be disallowed in the compilation unit.
 */
goog.DISALLOW_TEST_ONLY_CODE =
    goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);


/**
 * @define {boolean} Whether to use a Chrome app CSP-compliant method for
 *     loading scripts via goog.require. @see appendScriptSrcNode_.
 */
goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING =
    goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);


// MOE:begin_strip
/**
 * Read a flag from the runtime flags object.
 * @param {number} googFlagId Enum ordinal
 * @param {boolean} defaultValue Value to return if the flag is not given
 * @return {boolean}
 */
goog.readFlagInternalDoNotUseOrElse = function(googFlagId, defaultValue) {
  var obj = goog.getObjectByName(goog.FLAGS_OBJECT_);
  var val = obj && obj[googFlagId];
  return val != null ? val : defaultValue;
};


/**
 * Name of the object to look for when looking up runtime flag values.  May be a
 * fully qualified object name (e.g. 'foo.bar').
 * @define {string}
 * @private
 */
goog.FLAGS_OBJECT_ = goog.define('goog.FLAGS_OBJECT', 'CLOSURE_FLAGS');


/**
 * Default value for the STAGING flag.  Defaults to `true`, indicating that
 * flags are enabled by default once they reach the STAGING lifecycle stage.
 * Risk-averse products should set this to `false` in their production builds.
 * This is only necessary for non-Boq products because Boq Web configures this
 * via the goog.flag system by default.
 *
 * @define {boolean}
 */
goog.FLAGS_STAGING_DEFAULT = goog.define('goog.FLAGS_STAGING_DEFAULT', true);


/**
 * Read a toggle's value.  This should not be called directly.  Use the
 * `toggle_provider` build rule instead.  See go/toggle-provider.
 * @param {string} name
 * @return {boolean}
 */
goog.readToggleInternalDoNotCallDirectly = function(name) {
  var ordinals =
      typeof _F_toggleOrdinals === 'object' ? _F_toggleOrdinals : undefined;
  var ordinal = ordinals && ordinals[name];
  if (typeof ordinal !== 'number') return Boolean(ordinal);
  return Boolean(
      goog.TOGGLES_[Math.floor(ordinal / 30)] & (1 << (ordinal % 30)));
};


/**
 * Bootstrap variable mapping toggle names to ordinals.  This is intended to be
 * read by JSCompiler to replace goog.readToggle...() calls with direct lookups,
 * but is also used by the debug-mode version of the toggle reader.
 * @const {!Object<string, number|boolean>|undefined}
 */
goog.global._F_toggleOrdinals;


/**
 * @define {string} Global variable to check for toggles.
 * @private
 */
goog.TOGGLE_VAR_ = goog.define('goog.TOGGLE_VAR', '_F_toggles');


/** @private @const {!Array<number>} */
goog.TOGGLES_ = goog.global[goog.TOGGLE_VAR_] || [];
// MOE:end_strip


/**
 * Defines a namespace in Closure.
 *
 * A namespace may only be defined once in a codebase. It may be defined using
 * goog.provide() or goog.module().
 *
 * The presence of one or more goog.provide() calls in a file indicates
 * that the file defines the given objects/namespaces.
 * Provided symbols must not be null or undefined.
 *
 * In addition, goog.provide() creates the object stubs for a namespace
 * (for example, goog.provide("goog.foo.bar") will create the object
 * goog.foo.bar if it does not already exist).
 *
 * Build tools also scan for provide/require/module statements
 * to discern dependencies, build dependency files (see deps.js), etc.
 *
 * @see goog.require
 * @see goog.module
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 * deprecated Use goog.module (see b/159289405)
 */
goog.provide = function(name) {
  if (goog.isInModuleLoader_()) {
    throw new Error('goog.provide cannot be used within a module.');
  }
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw new Error('Namespace "' + name + '" already declared.');
    }
  }

  goog.constructNamespace_(name);
};


/**
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part".
 * @param {?Object=} object The object to embed in the namespace.
 * @param {boolean=} overwriteImplicit If object is set and a previous call
 *     implicitly constructed the namespace given by name, this parameter
 *     controls whether opt_obj should overwrite the implicitly constructed
 *     namespace or be merged into it. Defaults to false.
 * @private
 */
goog.constructNamespace_ = function(name, object, overwriteImplicit) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];

    var namespace = name;
    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }

  goog.exportPath_(name, object, overwriteImplicit);
};


/**
 * According to the CSP3 spec a nonce must be a valid base64 string.
 * @see https://www.w3.org/TR/CSP3/#grammardef-base64-value
 * @private @const
 */
goog.NONCE_PATTERN_ = /^[\w+/_-]+[=]{0,2}$/;


/**
 * Returns CSP nonce, if set for any script tag.
 * @param {?Window=} opt_window The window context used to retrieve the nonce.
 *     Defaults to global context.
 * @return {string} CSP nonce or empty string if no nonce is present.
 * @private
 */
goog.getScriptNonce_ = function(opt_window) {
  var doc = (opt_window || goog.global).document;
  var script = doc.querySelector && doc.querySelector('script[nonce]');
  if (script) {
    // Try to get the nonce from the IDL property first, because browsers that
    // implement additional nonce protection features (currently only Chrome) to
    // prevent nonce stealing via CSS do not expose the nonce via attributes.
    // See https://github.com/whatwg/html/issues/2369
    var nonce = script['nonce'] || script.getAttribute('nonce');
    if (nonce && goog.NONCE_PATTERN_.test(nonce)) {
      return nonce;
    }
  }
  return '';
};


/**
 * Module identifier validation regexp.
 * Note: This is a conservative check, it is very possible to be more lenient,
 *   the primary exclusion here is "/" and "\" and a leading ".", these
 *   restrictions are intended to leave the door open for using goog.require
 *   with relative file paths rather than module identifiers.
 * @private
 */
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;


/**
 * Defines a module in Closure.
 *
 * Marks that this file must be loaded as a module and claims the namespace.
 *
 * A namespace may only be defined once in a codebase. It may be defined using
 * goog.provide() or goog.module().
 *
 * goog.module() has three requirements:
 * - goog.module may not be used in the same file as goog.provide.
 * - goog.module must be the first statement in the file.
 * - only one goog.module is allowed per file.
 *
 * When a goog.module annotated file is loaded, it is enclosed in
 * a strict function closure. This means that:
 * - any variables declared in a goog.module file are private to the file
 * (not global), though the compiler is expected to inline the module.
 * - The code must obey all the rules of "strict" JavaScript.
 * - the file will be marked as "use strict"
 *
 * NOTE: unlike goog.provide, goog.module does not declare any symbols by
 * itself. If declared symbols are desired, use
 * goog.module.declareLegacyNamespace().
 *
 * MOE:begin_intracomment_strip
 * See the goog.module announcement at http://go/goog.module-announce
 * MOE:end_intracomment_strip
 *
 * See the public goog.module proposal: http://goo.gl/Va1hin
 *
 * @param {string} name Namespace provided by this file in the form
 *     "goog.package.part", is expected but not required.
 * @return {void}
 */
goog.module = function(name) {
  if (typeof name !== 'string' || !name ||
      name.search(goog.VALID_MODULE_RE_) == -1) {
    throw new Error('Invalid module identifier');
  }
  if (!goog.isInGoogModuleLoader_()) {
    throw new Error(
        'Module ' + name + ' has been loaded incorrectly. Note, ' +
        'modules cannot be loaded as normal scripts. They require some kind of ' +
        'pre-processing step. You\'re likely trying to load a module via a ' +
        'script tag or as a part of a concatenated bundle without rewriting the ' +
        'module. For more info see: ' +
        'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw new Error('goog.module may only be called once per module.');
  }

  // Store the module name for the loader.
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    // Ensure that the same namespace isn't provided twice.
    // A goog.module/goog.provide maps a goog.require to a specific file
    if (goog.isProvided_(name)) {
      throw new Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 *
 * Note: This is not an alternative to goog.require, it does not
 * indicate a hard dependency, instead it is used to indicate
 * an optional dependency or to access the exports of a module
 * that has already been loaded.
 * @suppress {missingProvide}
 */
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};


/**
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 * @private
 */
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (name in goog.loadedModules_) {
      return goog.loadedModules_[name].exports;
    } else if (!goog.implicitNamespaces_[name]) {
      var ns = goog.getObjectByName(name);
      return ns != null ? ns : null;
    }
  }
  return null;
};

// MOE:begin_strip
/**
 * Defines dynamic import execution path for uncompiled mode.
 *
 * @param {string} name The module identifier.
 * @return {?} The module exports for an already loaded module or null.
 *
 * NOTE: In compiled code, JsCompiler will transpile this function call.
 * DO NOT OPENSOURCE
 */
goog.requireDynamic = function(name) {
  if (!COMPILED) {
    if (!goog.importHandler_ || !goog.uncompiledChunkIdHandler_) {
      throw new Error('Need to setup import handler and chunk id handler.');
    }
    return goog.importHandler_(goog.uncompiledChunkIdHandler_(name))
        .then(function() {
          return goog.module.getInternal_(name);
        });
  }
  return null;
};


/**
 * Handler for dynamic import.
 * DO NOT OPENSOURCE
 */
goog.importHandler_ = null;


/**
 * Chunk ID calculator.
 * @private {?function(string)}
 * DO NOT OPENSOURCE
 */
goog.uncompiledChunkIdHandler_ = null;


/**
 * Sets import handler.
 * @param {function(string)} fn
 * DO NOT OPENSOURCE
 */
goog.setImportHandlerInternalDoNotCallOrElse = function(fn) {
  goog.importHandler_ = fn;
};


/**
 * Sets chunk ID calculator.
 * @param {function(string)} fn
 * NOTE: The chunk ID calculator is only used in uncompiled mode.
 * DO NOT OPENSOURCE
 */
goog.setUncompiledChunkIdHandlerInternalDoNotCallOrElse = function(fn) {
  goog.uncompiledChunkIdHandler_ = fn;
};
// MOE:end_strip

/**
 * Types of modules the debug loader can load.
 * @enum {string}
 */
goog.ModuleType = {
  ES6: 'es6',
  GOOG: 'goog'
};


/**
 * @private {?{
 *   moduleName: (string|undefined),
 *   declareLegacyNamespace:boolean,
 *   type: ?goog.ModuleType
 * }}
 */
goog.moduleLoaderState_ = null;


/**
 * @private
 * @return {boolean} Whether a goog.module or an es6 module is currently being
 *     initialized.
 */
goog.isInModuleLoader_ = function() {
  return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
};


/**
 * @private
 * @return {boolean} Whether a goog.module is currently being initialized.
 */
goog.isInGoogModuleLoader_ = function() {
  return !!goog.moduleLoaderState_ &&
      goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
};


/**
 * @private
 * @return {boolean} Whether an es6 module is currently being initialized.
 */
goog.isInEs6ModuleLoader_ = function() {
  var inLoader = !!goog.moduleLoaderState_ &&
      goog.moduleLoaderState_.type == goog.ModuleType.ES6;

  if (inLoader) {
    return true;
  }

  var jscomp = goog.global['$jscomp'];

  if (jscomp) {
    // jscomp may not have getCurrentModulePath if this is a compiled bundle
    // that has some of the runtime, but not all of it. This can happen if
    // optimizations are turned on so the unused runtime is removed but renaming
    // and Closure pass are off (so $jscomp is still named $jscomp and the
    // goog.provide/require calls still exist).
    if (typeof jscomp.getCurrentModulePath != 'function') {
      return false;
    }

    // Bundled ES6 module.
    return !!jscomp.getCurrentModulePath();
  }

  return false;
};


/**
 * Provide the module's exports as a globally accessible object under the
 * module's declared name.  This is intended to ease migration to goog.module
 * for files that have existing usages.
 * @suppress {missingProvide}
 */
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInGoogModuleLoader_()) {
    throw new Error(
        'goog.module.declareLegacyNamespace must be called from ' +
        'within a goog.module');
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw new Error(
        'goog.module must be called prior to ' +
        'goog.module.declareLegacyNamespace.');
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};


/**
 * Associates an ES6 module with a Closure module ID so that is available via
 * goog.require. The associated ID  acts like a goog.module ID - it does not
 * create any global names, it is merely available via goog.require /
 * goog.module.get / goog.forwardDeclare / goog.requireType. goog.require and
 * goog.module.get will return the entire module as if it was import *'d. This
 * allows Closure files to reference ES6 modules for the sake of migration.
 *
 * @param {string} namespace
 * @suppress {missingProvide}
 */
goog.declareModuleId = function(namespace) {
  if (!COMPILED) {
    if (!goog.isInEs6ModuleLoader_()) {
      throw new Error(
          'goog.declareModuleId may only be called from ' +
          'within an ES6 module');
    }
    if (goog.moduleLoaderState_ && goog.moduleLoaderState_.moduleName) {
      throw new Error(
          'goog.declareModuleId may only be called once per module.');
    }
    if (namespace in goog.loadedModules_) {
      throw new Error(
          'Module with namespace "' + namespace + '" already exists.');
    }
  }
  if (goog.moduleLoaderState_) {
    // Not bundled - debug loading.
    goog.moduleLoaderState_.moduleName = namespace;
  } else {
    // Bundled - not debug loading, no module loader state.
    var jscomp = goog.global['$jscomp'];
    if (!jscomp || typeof jscomp.getCurrentModulePath != 'function') {
      throw new Error(
          'Module with namespace "' + namespace +
          '" has been loaded incorrectly.');
    }
    var exports = jscomp.require(jscomp.getCurrentModulePath());
    goog.loadedModules_[namespace] = {
      exports: exports,
      type: goog.ModuleType.ES6,
      moduleId: namespace
    };
  }
};


/**
 * Marks that the current file should only be used for testing, and never for
 * live code in production.
 *
 * In the case of unit tests, the message may optionally be an exact namespace
 * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
 * provide (if not explicitly defined in the code).
 *
 * @param {string=} opt_message Optional message to add to the error that's
 *     raised when used in production code.
 */
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || '';
    throw new Error(
        'Importing test-only code into non-debug environment' +
        (opt_message ? ': ' + opt_message : '.'));
  }
};


/**
 * Forward declares a symbol. This is an indication to the compiler that the
 * symbol may be used in the source yet is not required and may not be provided
 * in compilation.
 *
 * The most common usage of forward declaration is code that takes a type as a
 * function parameter but does not need to require it. By forward declaring
 * instead of requiring, no hard dependency is made, and (if not required
 * elsewhere) the namespace may never be required and thus, not be pulled
 * into the JavaScript binary. If it is required elsewhere, it will be type
 * checked as normal.
 *
 * Before using goog.forwardDeclare, please read the documentation at
 * https://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to
 * understand the options and tradeoffs when working with forward declarations.
 *
 * @param {string} name The namespace to forward declare in the form of
 *     "goog.package.part".
 * @deprecated See go/noforwarddeclaration, Use `goog.requireType` instead.
 */
goog.forwardDeclare = function(name) {};


/**
 * Forward declare type information. Used to assign types to goog.global
 * referenced object that would otherwise result in unknown type references
 * and thus block property disambiguation.
 */
goog.forwardDeclare('Document');
goog.forwardDeclare('HTMLScriptElement');
goog.forwardDeclare('XMLHttpRequest');


if (!COMPILED) {
  /**
   * Check if the given name has been goog.provided. This will return false for
   * names that are available only as implicit namespaces.
   * @param {string} name name of the object to look for.
   * @return {boolean} Whether the name has been provided.
   * @private
   */
  goog.isProvided_ = function(name) {
    return (name in goog.loadedModules_) ||
        (!goog.implicitNamespaces_[name] && goog.getObjectByName(name) != null);
  };

  /**
   * Namespaces implicitly defined by goog.provide. For example,
   * goog.provide('goog.events.Event') implicitly declares that 'goog' and
   * 'goog.events' must be namespaces.
   *
   * @type {!Object<string, (boolean|undefined)>}
   * @private
   */
  goog.implicitNamespaces_ = {'goog.module': true};

  // NOTE: We add goog.module as an implicit namespace as goog.module is defined
  // here and because the existing module package has not been moved yet out of
  // the goog.module namespace. This satisifies both the debug loader and
  // ahead-of-time dependency management.
}


/**
 * Returns an object based on its fully qualified external name.  The object
 * is not found if null or undefined.  If you are using a compilation pass that
 * renames property names beware that using this function will not find renamed
 * properties.
 *
 * @param {string} name The fully qualified name.
 * @param {Object=} opt_obj The object within which to look; default is
 *     |goog.global|.
 * @return {?} The value (object or primitive) or, if not found, null.
 */
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split('.');
  var cur = opt_obj || goog.global;
  for (var i = 0; i < parts.length; i++) {
    cur = cur[parts[i]];
    if (cur == null) {
      return null;
    }
  }
  return cur;
};


/**
 * Adds a dependency from a file to the files it requires.
 * @param {string} relPath The path to the js file.
 * @param {!Array<string>} provides An array of strings with
 *     the names of the objects this file provides.
 * @param {!Array<string>} requires An array of strings with
 *     the names of the objects this file requires.
 * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating
 *     how the file must be loaded.  The boolean 'true' is equivalent
 *     to {'module': 'goog'} for backwards-compatibility.  Valid properties
 *     and values include {'module': 'goog'} and {'lang': 'es6'}.
 */
goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
  if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
    goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);
  }
};


// NOTE(nnaze): The debug DOM loader was included in base.js as an original way
// to do "debug-mode" development.  The dependency system can sometimes be
// confusing, as can the debug DOM loader's asynchronous nature.
//
// With the DOM loader, a call to goog.require() is not blocking -- the script
// will not load until some point after the current script.  If a namespace is
// needed at runtime, it needs to be defined in a previous script, or loaded via
// require() with its registered dependencies.
//
// User-defined namespaces may need their own deps file. For a reference on
// creating a deps file, see:
// MOE:begin_strip
// Internally: http://go/deps-files and http://go/be#js_deps
// MOE:end_strip
// Externally: https://developers.google.com/closure/library/docs/depswriter
//
// Because of legacy clients, the DOM loader can't be easily removed from
// base.js.  Work was done to make it disableable or replaceable for
// different environments (DOM-less JavaScript interpreters like Rhino or V8,
// for example). See bootstrap/ for more information.


/**
 * @define {boolean} Whether to enable the debug loader.
 *
 * If enabled, a call to goog.require() will attempt to load the namespace by
 * appending a script tag to the DOM (if the namespace has been registered).
 *
 * If disabled, goog.require() will simply assert that the namespace has been
 * provided (and depend on the fact that some outside tool correctly ordered
 * the script).
 */
goog.ENABLE_DEBUG_LOADER = goog.define('goog.ENABLE_DEBUG_LOADER', false);


/**
 * @param {string} msg
 * @private
 */
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console['error'](msg);
  }
};


/**
 * Implements a system for the dynamic resolution of dependencies that works in
 * parallel with the BUILD system.
 *
 * Note that all calls to goog.require will be stripped by the compiler.
 *
 * @see goog.provide
 * @param {string} namespace Namespace (as was given in goog.provide,
 *     goog.module, or goog.declareModuleId) in the form
 *     "goog.package.part".
 * @return {?} If called within a goog.module or ES6 module file, the associated
 *     namespace or module otherwise null.
 */
goog.require = function(namespace) {
  if (!COMPILED) {
    // Might need to lazy load on old IE.
    if (goog.ENABLE_DEBUG_LOADER) {
      goog.debugLoader_.requested(namespace);
    }

    // If the object already exists we do not need to do anything.
    if (goog.isProvided_(namespace)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(namespace);
      }
    } else if (goog.ENABLE_DEBUG_LOADER) {
      var moduleLoaderState = goog.moduleLoaderState_;
      goog.moduleLoaderState_ = null;
      try {
        goog.debugLoader_.load_(namespace);
      } finally {
        goog.moduleLoaderState_ = moduleLoaderState;
      }
    }

    return null;
  }
};


/**
 * Requires a symbol for its type information. This is an indication to the
 * compiler that the symbol may appear in type annotations, yet it is not
 * referenced at runtime.
 *
 * When called within a goog.module or ES6 module file, the return value may be
 * assigned to or destructured into a variable, but it may not be otherwise used
 * in code outside of a type annotation.
 *
 * Note that all calls to goog.requireType will be stripped by the compiler.
 *
 * @param {string} namespace Namespace (as was given in goog.provide,
 *     goog.module, or goog.declareModuleId) in the form
 *     "goog.package.part".
 * @return {?}
 */
goog.requireType = function(namespace) {
  // Return an empty object so that single-level destructuring of the return
  // value doesn't crash at runtime when using the debug loader. Multi-level
  // destructuring isn't supported.
  return {};
};


/**
 * Path for included scripts.
 * @type {string}
 */
goog.basePath = '';


/**
 * A hook for overriding the base path.
 * @type {string|undefined}
 */
goog.global.CLOSURE_BASE_PATH;


/**
 * Whether to attempt to load Closure's deps file. By default, when uncompiled,
 * deps files will attempt to be loaded.
 * @type {boolean|undefined}
 */
goog.global.CLOSURE_NO_DEPS;


/**
 * A function to import a single script. This is meant to be overridden when
 * Closure is being run in non-HTML contexts, such as web workers. It's defined
 * in the global scope so that it can be set before base.js is loaded, which
 * allows deps.js to be imported properly.
 *
 * The first parameter the script source, which is a relative URI. The second,
 * optional parameter is the script contents, in the event the script needed
 * transformation. It should return true if the script was imported, false
 * otherwise.
 * @type {(function(string, string=): boolean)|undefined}
 */
goog.global.CLOSURE_IMPORT_SCRIPT;


/**
 * When defining a class Foo with an abstract method bar(), you can do:
 * Foo.prototype.bar = goog.abstractMethod
 *
 * Now if a subclass of Foo fails to override bar(), an error will be thrown
 * when bar() is invoked.
 *
 * @type {!Function}
 * @throws {Error} when invoked to indicate the method should be overridden.
 * @deprecated Use "@abstract" annotation instead of goog.abstractMethod in new
 *     code. See
 *     https://github.com/google/closure-compiler/wiki/@abstract-classes-and-methods
 */
goog.abstractMethod = function() {
  throw new Error('unimplemented abstract method');
};


/**
 * Adds a `getInstance` static method that always returns the same
 * instance object.
 * @param {!Function} ctor The constructor for the class to add the static
 *     method to.
 * @suppress {missingProperties} 'instance_' isn't a property on 'Function'
 *     but we don't have a better type to use here.
 */
goog.addSingletonGetter = function(ctor) {
  // instance_ is immediately set to prevent issues with sealed constructors
  // such as are encountered when a constructor is returned as the export object
  // of a goog.module in unoptimized code.
  // Delcare type to avoid conformance violations that ctor.instance_ is unknown
  /** @type {undefined|!Object} @suppress {underscore} */
  ctor.instance_ = undefined;
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      // NOTE: JSCompiler can't optimize away Array#push.
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    // Cast to avoid conformance violations that ctor.instance_ is unknown
    return /** @type {!Object|undefined} */ (ctor.instance_) = new ctor;
  };
};


/**
 * All singleton classes that have been instantiated, for testing. Don't read
 * it directly, use the `goog.testing.singleton` module. The compiler
 * removes this variable if unused.
 * @type {!Array<!Function>}
 * @private
 */
goog.instantiatedSingletons_ = [];


/**
 * @define {boolean} Whether to load goog.modules using `eval` when using
 * the debug loader.  This provides a better debugging experience as the
 * source is unmodified and can be edited using Chrome Workspaces or similar.
 * However in some environments the use of `eval` is banned
 * so we provide an alternative.
 */
goog.LOAD_MODULE_USING_EVAL = goog.define('goog.LOAD_MODULE_USING_EVAL', true);


/**
 * @define {boolean} Whether the exports of goog.modules should be sealed when
 * possible.
 */
goog.SEAL_MODULE_EXPORTS = goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);


/**
 * The registry of initialized modules:
 * The module identifier or path to module exports map.
 * @private @const {!Object<string, {exports:?,type:string,moduleId:string}>}
 */
goog.loadedModules_ = {};


/**
 * True if the debug loader enabled and used.
 * @const {boolean}
 */
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;


/**
 * @define {string} How to decide whether to transpile.  Valid values
 * are 'always', 'never', and 'detect'.  The default ('detect') is to
 * use feature detection to determine which language levels need
 * transpilation.
 */
// NOTE(sdh): we could expand this to accept a language level to bypass
// detection: e.g. goog.TRANSPILE == 'es5' would transpile ES6 files but
// would leave ES3 and ES5 files alone.
goog.TRANSPILE = goog.define('goog.TRANSPILE', 'detect');

/**
 * @define {boolean} If true assume that ES modules have already been
 * transpiled by the jscompiler (in the same way that transpile.js would
 * transpile them - to jscomp modules). Useful only for servers that wish to use
 * the debug loader and transpile server side. Thus this is only respected if
 * goog.TRANSPILE is "never".
 */
goog.ASSUME_ES_MODULES_TRANSPILED =
    goog.define('goog.ASSUME_ES_MODULES_TRANSPILED', false);


/**
 * @define {string} Trusted Types policy name. If non-empty then Closure will
 * use Trusted Types.
 */
goog.TRUSTED_TYPES_POLICY_NAME =
    goog.define('goog.TRUSTED_TYPES_POLICY_NAME', 'goog');


/**
 * @package {?boolean}
 * Visible for testing.
 */
goog.hasBadLetScoping = null;


/**
 * @param {function(?):?|string} moduleDef The module definition.
 */
goog.loadModule = function(moduleDef) {
  // NOTE: we allow function definitions to be either in the from
  // of a string to eval (which keeps the original source intact) or
  // in a eval forbidden environment (CSP) we allow a function definition
  // which in its body must call `goog.module`, and return the exports
  // of the module.
  var previousState = goog.moduleLoaderState_;
  try {
    goog.moduleLoaderState_ = {
      moduleName: '',
      declareLegacyNamespace: false,
      type: goog.ModuleType.GOOG
    };
    var origExports = {};
    var exports = origExports;
    if (typeof moduleDef === 'function') {
      exports = moduleDef.call(undefined, exports);
    } else if (typeof moduleDef === 'string') {
      exports = goog.loadModuleFromSource_.call(undefined, exports, moduleDef);
    } else {
      throw new Error('Invalid module definition');
    }

    var moduleName = goog.moduleLoaderState_.moduleName;
    if (typeof moduleName === 'string' && moduleName) {
      // Don't seal legacy namespaces as they may be used as a parent of
      // another namespace
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        // Whether exports was overwritten via default export assignment.
        // This is important for legacy namespaces as it dictates whether
        // previously a previously loaded implicit namespace should be clobbered
        // or not.
        var isDefaultExport = origExports !== exports;
        goog.constructNamespace_(moduleName, exports, isDefaultExport);
      } else if (
          goog.SEAL_MODULE_EXPORTS && Object.seal &&
          typeof exports == 'object' && exports != null) {
        Object.seal(exports);
      }

      var data = {
        exports: exports,
        type: goog.ModuleType.GOOG,
        moduleId: goog.moduleLoaderState_.moduleName
      };
      goog.loadedModules_[moduleName] = data;
    } else {
      throw new Error('Invalid module name \"' + moduleName + '\"');
    }
  } finally {
    goog.moduleLoaderState_ = previousState;
  }
};


/**
 * @private @const
 */
goog.loadModuleFromSource_ =
    /** @type {function(!Object, string):?} */ (function(exports) {
      // NOTE: we avoid declaring parameters or local variables here to avoid
      // masking globals or leaking values into the module definition.
      'use strict';
      eval(goog.CLOSURE_EVAL_PREFILTER_.createScript(arguments[1]));
      return exports;
    });


/**
 * Normalize a file path by removing redundant ".." and extraneous "." file
 * path components.
 * @param {string} path
 * @return {string}
 * @private
 */
goog.normalizePath_ = function(path) {
  var components = path.split('/');
  var i = 0;
  while (i < components.length) {
    if (components[i] == '.') {
      components.splice(i, 1);
    } else if (
        i && components[i] == '..' && components[i - 1] &&
        components[i - 1] != '..') {
      components.splice(--i, 2);
    } else {
      i++;
    }
  }
  return components.join('/');
};


/**
 * Provides a hook for loading a file when using Closure's goog.require() API
 * with goog.modules.  In particular this hook is provided to support Node.js.
 *
 * @type {(function(string):string)|undefined}
 */
goog.global.CLOSURE_LOAD_FILE_SYNC;


/**
 * Loads file by synchronous XHR. Should not be used in production environments.
 * @param {string} src Source URL.
 * @return {?string} File contents, or null if load failed.
 * @private
 */
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    try {
      /** @type {XMLHttpRequest} */
      var xhr = new goog.global['XMLHttpRequest']();
      xhr.open('get', src, false);
      xhr.send();
      // NOTE: Successful http: requests have a status of 200, but successful
      // file: requests may have a status of zero.  Any other status, or a
      // thrown exception (particularly in case of file: requests) indicates
      // some sort of error, which we treat as a missing or unavailable file.
      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
    } catch (err) {
      // No need to rethrow or log, since errors should show up on their own.
      return null;
    }
  }
};

//==============================================================================
// Language Enhancements
//==============================================================================


/**
 * This is a "fixed" version of the typeof operator.  It differs from the typeof
 * operator in such a way that null returns 'null' and arrays return 'array'.
 * @param {?} value The value to get the type of.
 * @return {string} The name of the type.
 */
goog.typeOf = function(value) {
  var s = typeof value;

  if (s != 'object') {
    return s;
  }

  if (!value) {
    return 'null';
  }

  if (Array.isArray(value)) {
    return 'array';
  }
  return s;
};


/**
 * Returns true if the object looks like an array. To qualify as array like
 * the value needs to be either a NodeList or an object with a Number length
 * property. Note that for this function neither strings nor functions are
 * considered "array-like".
 *
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an array.
 */
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  // We do not use goog.isObject here in order to exclude function values.
  return type == 'array' || type == 'object' && typeof val.length == 'number';
};


/**
 * Returns true if the object looks like a Date. To qualify as Date-like the
 * value needs to be an object and have a getFullYear() function.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is a like a Date.
 */
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == 'function';
};


/**
 * Returns true if the specified value is an object.  This includes arrays and
 * functions.
 * @param {?} val Variable to test.
 * @return {boolean} Whether variable is an object.
 */
goog.isObject = function(val) {
  var type = typeof val;
  return type == 'object' && val != null || type == 'function';
  // return Object(val) === val also works, but is slower, especially if val is
  // not an object.
};


/**
 * Gets a unique ID for an object. This mutates the object so that further calls
 * with the same object as a parameter returns the same value. The unique ID is
 * guaranteed to be unique across the current session amongst objects that are
 * passed into `getUid`. There is no guarantee that the ID is unique or
 * consistent across sessions. It is unsafe to generate unique ID for function
 * prototypes.
 *
 * @param {Object} obj The object to get the unique ID for.
 * @return {number} The unique ID for the object.
 */
goog.getUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.
  return Object.prototype.hasOwnProperty.call(obj, goog.UID_PROPERTY_) &&
      obj[goog.UID_PROPERTY_] ||
      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};


/**
 * Whether the given object is already assigned a unique ID.
 *
 * This does not modify the object.
 *
 * @param {!Object} obj The object to check.
 * @return {boolean} Whether there is an assigned unique id for the object.
 */
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};


/**
 * Removes the unique ID from an object. This is useful if the object was
 * previously mutated using `goog.getUid` in which case the mutation is
 * undone.
 * @param {Object} obj The object to remove the unique ID field from.
 */
goog.removeUid = function(obj) {
  // TODO(arv): Make the type stricter, do not accept null.

  // In IE, DOM nodes are not instances of Object and throw an exception if we
  // try to delete.  Instead we try to use removeAttribute.
  if (obj !== null && 'removeAttribute' in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }

  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};


/**
 * Name for unique ID property. Initialized in a way to help avoid collisions
 * with other closure JavaScript on the same page.
 * @type {string}
 * @private
 */
goog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);


/**
 * Counter for UID.
 * @type {number}
 * @private
 */
goog.uidCounter_ = 0;


/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 *
 * WARNINGS:
 * <code>goog.cloneObject</code> does not detect reference loops. Objects that
 * refer to themselves will cause infinite recursion.
 *
 * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
 * UIDs created by <code>getUid</code> into cloned results.
 *
 * @param {*} obj The value to clone.
 * @return {*} A clone of the input value.
 * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.
 */
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == 'object' || type == 'array') {
    if (typeof obj.clone === 'function') {
      return obj.clone();
    }
    if (typeof Map !== 'undefined' && obj instanceof Map) {
      return new Map(obj);
    } else if (typeof Set !== 'undefined' && obj instanceof Set) {
      return new Set(obj);
    }
    var clone = type == 'array' ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }

  return obj;
};


/**
 * A native implementation of goog.bind.
 * @param {?function(this:T, ...)} fn A function to partially apply.
 * @param {T} selfObj Specifies the object which this should point to when the
 *     function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function goog.bind() was
 *     invoked as a method of.
 * @template T
 * @private
 */
goog.bindNative_ = function(fn, selfObj, var_args) {
  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));
};


/**
 * A pure-JS implementation of goog.bind.
 * @param {?function(this:T, ...)} fn A function to partially apply.
 * @param {T} selfObj Specifies the object which this should point to when the
 *     function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function goog.bind() was
 *     invoked as a method of.
 * @template T
 * @private
 */
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error();
  }

  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      // Prepend the bound arguments to the current arguments.
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };

  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};


/**
 * Partially applies this function to a particular 'this object' and zero or
 * more arguments. The result is a new function with some arguments of the first
 * function pre-filled and the value of this 'pre-specified'.
 *
 * Remaining arguments specified at call-time are appended to the pre-specified
 * ones.
 *
 * Also see: {@link #partial}.
 *
 * Usage:
 * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
 * barMethBound('arg3', 'arg4');</pre>
 *
 * @param {?function(this:T, ...)} fn A function to partially apply.
 * @param {T} selfObj Specifies the object which this should point to when the
 *     function is run.
 * @param {...*} var_args Additional arguments that are partially applied to the
 *     function.
 * @return {!Function} A partially-applied form of the function goog.bind() was
 *     invoked as a method of.
 * @template T
 * @suppress {deprecated} See above.
 * @deprecated use `=> {}` or Function.prototype.bind instead.
 */
goog.bind = function(fn, selfObj, var_args) {
  // TODO(nicksantos): narrow the type signature.
  if (Function.prototype.bind &&
      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome
      // extension environment. This means that for Chrome extensions, they get
      // the implementation of Function.prototype.bind that calls goog.bind
      // instead of the native one. Even worse, we don't want to introduce a
      // circular dependency between goog.bind and Function.prototype.bind, so
      // we have to hack this to make sure it works correctly.
      Function.prototype.bind.toString().indexOf('native code') != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};


/**
 * Like goog.bind(), except that a 'this object' is not required. Useful when
 * the target function is already bound.
 *
 * Usage:
 * var g = goog.partial(f, arg1, arg2);
 * g(arg3, arg4);
 *
 * @param {Function} fn A function to partially apply.
 * @param {...*} var_args Additional arguments that are partially applied to fn.
 * @return {!Function} A partially-applied form of the function goog.partial()
 *     was invoked as a method of.
 */
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    // Clone the array (with slice()) and append additional arguments
    // to the existing arguments.
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(/** @type {?} */ (this), newArgs);
  };
};


/**
 * @return {number} An integer value representing the number of milliseconds
 *     between midnight, January 1, 1970 and the current time.
 * @deprecated Use Date.now
 */
goog.now = function() {
  return Date.now();
};


/**
 * Evals JavaScript in the global scope.
 *
 * Throws an exception if neither execScript or eval is defined.
 * @param {string|!TrustedScript} script JavaScript string.
 */
goog.globalEval = function(script) {
  (0, eval)(script);
};


/**
 * Optional map of CSS class names to obfuscated names used with
 * goog.getCssName().
 * @private {!Object<string, string>|undefined}
 * @see goog.setCssNameMapping
 */
goog.cssNameMapping_;


/**
 * Optional obfuscation style for CSS class names. Should be set to either
 * 'BY_WHOLE' or 'BY_PART' if defined.
 * @type {string|undefined}
 * @private
 * @see goog.setCssNameMapping
 */
goog.cssNameMappingStyle_;



/**
 * A hook for modifying the default behavior goog.getCssName. The function
 * if present, will receive the standard output of the goog.getCssName as
 * its input.
 *
 * @type {(function(string):string)|undefined}
 */
goog.global.CLOSURE_CSS_NAME_MAP_FN;


/**
 * Handles strings that are intended to be used as CSS class names.
 *
 * This function works in tandem with @see goog.setCssNameMapping.
 *
 * Without any mapping set, the arguments are simple joined with a hyphen and
 * passed through unaltered.
 *
 * When there is a mapping, there are two possible styles in which these
 * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
 * of the passed in css name is rewritten according to the map. In the BY_WHOLE
 * style, the full css name is looked up in the map directly. If a rewrite is
 * not specified by the map, the compiler will output a warning.
 *
 * When the mapping is passed to the compiler, it will replace calls to
 * goog.getCssName with the strings from the mapping, e.g.
 *     var x = goog.getCssName('foo');
 *     var y = goog.getCssName(this.baseClass, 'active');
 *  becomes:
 *     var x = 'foo';
 *     var y = this.baseClass + '-active';
 *
 * If one argument is passed it will be processed, if two are passed only the
 * modifier will be processed, as it is assumed the first argument was generated
 * as a result of calling goog.getCssName.
 *
 * @param {string} className The class name.
 * @param {string=} opt_modifier A modifier to be appended to the class name.
 * @return {string} The class name or the concatenation of the class name and
 *     the modifier.
 */
goog.getCssName = function(className, opt_modifier) {
  // String() is used for compatibility with compiled soy where the passed
  // className can be non-string objects.
  if (String(className).charAt(0) == '.') {
    throw new Error(
        'className passed in goog.getCssName must not start with ".".' +
        ' You passed: ' + className);
  }

  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };

  var renameByParts = function(cssName) {
    // Remap all the parts individually.
    var parts = cssName.split('-');
    var mapped = [];
    for (var i = 0; i < parts.length; i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join('-');
  };

  var rename;
  if (goog.cssNameMapping_) {
    rename =
        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }

  var result =
      opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);

  // The special CLOSURE_CSS_NAME_MAP_FN allows users to specify further
  // processing of the class name.
  if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {
    return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);
  }

  return result;
};


/**
 * Sets the map to check when returning a value from goog.getCssName(). Example:
 * <pre>
 * goog.setCssNameMapping({
 *   "goog": "a",
 *   "disabled": "b",
 * });
 *
 * var x = goog.getCssName('goog');
 * // The following evaluates to: "a a-b".
 * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
 * </pre>
 * When declared as a map of string literals to string literals, the JSCompiler
 * will replace all calls to goog.getCssName() using the supplied map if the
 * --process_closure_primitives flag is set.
 *
 * @param {!Object} mapping A map of strings to strings where keys are possible
 *     arguments to goog.getCssName() and values are the corresponding values
 *     that should be returned.
 * @param {string=} opt_style The style of css name mapping. There are two valid
 *     options: 'BY_PART', and 'BY_WHOLE'.
 * @see goog.getCssName for a description.
 */
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};


/**
 * To use CSS renaming in compiled mode, one of the input files should have a
 * call to goog.setCssNameMapping() with an object literal that the JSCompiler
 * can extract and use to replace all calls to goog.getCssName(). In uncompiled
 * mode, JavaScript code should be loaded before this base.js file that declares
 * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is
 * to ensure that the mapping is loaded before any calls to goog.getCssName()
 * are made in uncompiled mode.
 *
 * A hook for overriding the CSS name mapping.
 * @type {!Object<string, string>|undefined}
 */
goog.global.CLOSURE_CSS_NAME_MAPPING;


if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  // This does not call goog.setCssNameMapping() because the JSCompiler
  // requires that goog.setCssNameMapping() be called with an object literal.
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}

/**
 * Options bag type for `goog.getMsg()` third argument.
 *
 * It is important to note that these options need to be known at compile time,
 * so they must always be provided to `goog.getMsg()` as an actual object
 * literal in the function call. Otherwise, closure-compiler will report an
 * error.
 * @record
 */
goog.GetMsgOptions = function() {};

/**
 * If `true`, escape '<' in the message string to '&lt;'.
 *
 * Used by Closure Templates where the generated code size and performance is
 * critical which is why {@link goog.html.SafeHtmlFormatter} is not used.
 * The value must be literal `true` or `false`.
 * @type {boolean|undefined}
 */
goog.GetMsgOptions.prototype.html;

/**
 * If `true`, unescape common html entities: &gt;, &lt;, &apos;, &quot; and
 * &amp;.
 *
 * Used for messages not in HTML context, such as with the `textContent`
 * property.
 * The value must be literal `true` or `false`.
 * @type {boolean|undefined}
 */
goog.GetMsgOptions.prototype.unescapeHtmlEntities;

/**
 * Associates placeholder names with strings showing how their values are
 * obtained.
 *
 * This field is intended for use in automatically generated JS code.
 * Human-written code should use meaningful placeholder names instead.
 *
 * closure-compiler uses this as the contents of the `<ph>` tag in the
 * XMB file it generates or defaults to `-` for historical reasons.
 *
 * Must be an object literal.
 * Ignored at runtime.
 * Keys are placeholder names.
 * Values are string literals indicating how the value is obtained.
 * Typically this is a snippet of source code.
 * @type {!Object<string, string>|undefined}
 */
goog.GetMsgOptions.prototype.original_code;

/**
 * Associates placeholder names with example values.
 *
 * closure-compiler uses this as the contents of the `<ex>` tag in the
 * XMB file it generates or defaults to `-` for historical reasons.
 *
 * Must be an object literal.
 * Ignored at runtime.
 * Keys are placeholder names.
 * Values are string literals containing example placeholder values.
 * (e.g. "George McFly" for a name placeholder)
 * @type {!Object<string, string>|undefined}
 */
goog.GetMsgOptions.prototype.example;

/**
 * Gets a localized message.
 *
 * This function is a compiler primitive. If you give the compiler a localized
 * message bundle, it will replace the string at compile-time with a localized
 * version, and expand goog.getMsg call to a concatenated string.
 *
 * Messages must be initialized in the form:
 * <code>
 * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
 * </code>
 *
 * This function produces a string which should be treated as plain text. Use
 * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
 * produce SafeHtml.
 *
 * @param {string} str Translatable string, places holders in the form {$foo}.
 * @param {!Object<string, string>=} opt_values Maps place holder name to value.
 * @param {!goog.GetMsgOptions=} opt_options see `goog.GetMsgOptions`
 * @return {string} message with placeholders filled.
 */
goog.getMsg = function(str, opt_values, opt_options) {
  if (opt_options && opt_options.html) {
    // Note that '&' is not replaced because the translation can contain HTML
    // entities.
    str = str.replace(/</g, '&lt;');
  }
  if (opt_options && opt_options.unescapeHtmlEntities) {
    // Note that "&amp;" must be the last to avoid "creating" new entities.
    str = str.replace(/&lt;/g, '<')
              .replace(/&gt;/g, '>')
              .replace(/&apos;/g, '\'')
              .replace(/&quot;/g, '"')
              .replace(/&amp;/g, '&');
  }
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return (opt_values != null && key in opt_values) ? opt_values[key] :
                                                         match;
    });
  }
  return str;
};


/**
 * Gets a localized message. If the message does not have a translation, gives a
 * fallback message.
 *
 * This is useful when introducing a new message that has not yet been
 * translated into all languages.
 *
 * This function is a compiler primitive. Must be used in the form:
 * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
 * where MSG_A and MSG_B were initialized with goog.getMsg.
 *
 * @param {string} a The preferred message.
 * @param {string} b The fallback message.
 * @return {string} The best translated message.
 */
goog.getMsgWithFallback = function(a, b) {
  return a;
};


/**
 * Exposes an unobfuscated global namespace path for the given object.
 * Note that fields of the exported object *will* be obfuscated, unless they are
 * exported in turn via this function or goog.exportProperty.
 *
 * Also handy for making public items that are defined in anonymous closures.
 *
 * ex. goog.exportSymbol('public.path.Foo', Foo);
 *
 * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
 *     public.path.Foo.staticFunction();
 *
 * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
 *                       Foo.prototype.myMethod);
 *     new public.path.Foo().myMethod();
 *
 * @param {string} publicPath Unobfuscated name to export.
 * @param {*} object Object the name should point to.
 * @param {?Object=} objectToExportTo The object to add the path to; default
 *     is goog.global.
 */
goog.exportSymbol = function(publicPath, object, objectToExportTo) {
  goog.exportPath_(
      publicPath, object, /* overwriteImplicit= */ true, objectToExportTo);
};


/**
 * Exports a property unobfuscated into the object's namespace.
 * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
 * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
 * @param {Object} object Object whose static property is being exported.
 * @param {string} publicName Unobfuscated name to export.
 * @param {*} symbol Object the name should point to.
 */
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * Usage:
 * <pre>
 * function ParentClass(a, b) { }
 * ParentClass.prototype.foo = function(a) { };
 *
 * function ChildClass(a, b, c) {
 *   ChildClass.base(this, 'constructor', a, b);
 * }
 * goog.inherits(ChildClass, ParentClass);
 *
 * var child = new ChildClass('a', 'b', 'see');
 * child.foo(); // This works.
 * </pre>
 *
 * @param {!Function} childCtor Child class.
 * @param {!Function} parentCtor Parent class.
 * @suppress {strictMissingProperties} superClass_ and base is not defined on
 *    Function.
 * @deprecated Use ECMAScript class syntax instead.
 */
goog.inherits = function(childCtor, parentCtor) {
  /** @constructor */
  function tempCtor() {}
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor();
  /** @override */
  childCtor.prototype.constructor = childCtor;

  /**
   * Calls superclass constructor/method.
   *
   * This function is only available if you use goog.inherits to
   * express inheritance relationships between classes.
   *
   * NOTE: This is a replacement for goog.base and for superClass_
   * property defined in childCtor.
   *
   * @param {!Object} me Should always be "this".
   * @param {string} methodName The method name to call. Calling
   *     superclass constructor can be done with the special string
   *     'constructor'.
   * @param {...*} var_args The arguments to pass to superclass
   *     method/constructor.
   * @return {*} The return value of the superclass method/constructor.
   */
  childCtor.base = function(me, methodName, var_args) {
    // Copying using loop to avoid deop due to passing arguments object to
    // function. This is faster in many JS engines as of late 2014.
    var args = new Array(arguments.length - 2);
    for (var i = 2; i < arguments.length; i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};


/**
 * Allow for aliasing within scope functions.  This function exists for
 * uncompiled code - in compiled code the calls will be inlined and the aliases
 * applied.  In uncompiled code the function is simply run since the aliases as
 * written are valid JavaScript.
 *
 * MOE:begin_intracomment_strip
 * See the goog.scope document at http://go/goog.scope
 *
 * For more on goog.scope deprecation, see the style guide entry:
 * http://go/jsstyle#appendices-legacy-exceptions-goog-scope
 * MOE:end_intracomment_strip
 *
 * @param {function()} fn Function to call.  This function can contain aliases
 *     to namespaces (e.g. "var dom = goog.dom") or classes
 *     (e.g. "var Timer = goog.Timer").
 * @deprecated Use goog.module instead.
 */
goog.scope = function(fn) {
  if (goog.isInModuleLoader_()) {
    throw new Error('goog.scope is not supported within a module.');
  }
  fn.call(goog.global);
};


/*
 * To support uncompiled, strict mode bundles that use eval to divide source
 * like so:
 *    eval('someSource;//# sourceUrl sourcefile.js');
 * We need to export the globally defined symbols "goog" and "COMPILED".
 * Exporting "goog" breaks the compiler optimizations, so we required that
 * be defined externally.
 * NOTE: We don't use goog.exportSymbol here because we don't want to trigger
 * extern generation when that compiler option is enabled.
 */
if (!COMPILED) {
  goog.global['COMPILED'] = COMPILED;
}


//==============================================================================
// goog.defineClass implementation
//==============================================================================


/**
 * Creates a restricted form of a Closure "class":
 *   - from the compiler's perspective, the instance returned from the
 *     constructor is sealed (no new properties may be added).  This enables
 *     better checks.
 *   - the compiler will rewrite this definition to a form that is optimal
 *     for type checking and optimization (initially this will be a more
 *     traditional form).
 *
 * @param {Function} superClass The superclass, Object or null.
 * @param {goog.defineClass.ClassDescriptor} def
 *     An object literal describing
 *     the class.  It may have the following properties:
 *     "constructor": the constructor function
 *     "statics": an object literal containing methods to add to the constructor
 *        as "static" methods or a function that will receive the constructor
 *        function as its only parameter to which static properties can
 *        be added.
 *     all other properties are added to the prototype.
 * @return {!Function} The class constructor.
 * @deprecated Use ECMAScript class syntax instead.
 */
goog.defineClass = function(superClass, def) {
  // TODO(johnlenz): consider making the superClass an optional parameter.
  var constructor = def.constructor;
  var statics = def.statics;
  // Wrap the constructor prior to setting up the prototype and static methods.
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw new Error(
          'cannot instantiate an interface (no constructor defined).');
    };
  }

  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }

  // Remove all the properties that should not be copied to the prototype.
  delete def.constructor;
  delete def.statics;

  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }

  return cls;
};


/**
 * @typedef {{
 *   constructor: (!Function|undefined),
 *   statics: (Object|undefined|function(Function):void)
 * }}
 */
goog.defineClass.ClassDescriptor;


/**
 * @define {boolean} Whether the instances returned by goog.defineClass should
 *     be sealed when possible.
 *
 * When sealing is disabled the constructor function will not be wrapped by
 * goog.defineClass, making it incompatible with ES6 class methods.
 */
goog.defineClass.SEAL_CLASS_INSTANCES =
    goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);


/**
 * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is
 * defined, this function will wrap the constructor in a function that seals the
 * results of the provided constructor function.
 *
 * @param {!Function} ctr The constructor whose results maybe be sealed.
 * @param {Function} superClass The superclass constructor.
 * @return {!Function} The replacement constructor.
 * @private
 */
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
    // Do now wrap the constructor when sealing is disabled. Angular code
    // depends on this for injection to work properly.
    return ctr;
  }

  // NOTE: The sealing behavior has been removed

  /**
   * @this {Object}
   * @return {?}
   */
  var wrappedCtr = function() {
    // Don't seal an instance of a subclass when it calls the constructor of
    // its super class as there is most likely still setup to do.
    var instance = ctr.apply(this, arguments) || this;
    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];

    return instance;
  };

  return wrappedCtr;
};



// TODO(johnlenz): share these values with the goog.object
/**
 * The names of the fields that are defined on Object.prototype.
 * @type {!Array<string>}
 * @private
 * @const
 */
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [
  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
  'toLocaleString', 'toString', 'valueOf'
];


// TODO(johnlenz): share this function with the goog.object
/**
 * @param {!Object} target The object to add properties to.
 * @param {!Object} source The object to copy properties from.
 * @private
 */
goog.defineClass.applyProperties_ = function(target, source) {
  // TODO(johnlenz): update this to support ES5 getters/setters

  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }

  // For IE the for-in-loop does not contain any properties that are not
  // enumerable on the prototype object (for example isPrototypeOf from
  // Object.prototype) and it will also not include 'replace' on objects that
  // extend String and change 'replace' (not that it is common for anyone to
  // extend anything except Object).
  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};

/**
 * Returns the parameter.
 * @param {string} s
 * @return {string}
 * @private
 */
goog.identity_ = function(s) {
  return s;
};


/**
 * Creates Trusted Types policy if Trusted Types are supported by the browser.
 * The policy just blesses any string as a Trusted Type. It is not visibility
 * restricted because anyone can also call trustedTypes.createPolicy directly.
 * However, the allowed names should be restricted by a HTTP header and the
 * reference to the created policy should be visibility restricted.
 * @param {string} name
 * @return {?TrustedTypePolicy}
 */
goog.createTrustedTypesPolicy = function(name) {
  var policy = null;
  var policyFactory = goog.global.trustedTypes;
  if (!policyFactory || !policyFactory.createPolicy) {
    return policy;
  }
  // trustedTypes.createPolicy throws if called with a name that is already
  // registered, even in report-only mode. Until the API changes, catch the
  // error not to break the applications functionally. In such case, the code
  // will fall back to using regular Safe Types.
  // TODO(koto): Remove catching once createPolicy API stops throwing.
  try {
    policy = policyFactory.createPolicy(name, {
      createHTML: goog.identity_,
      createScript: goog.identity_,
      createScriptURL: goog.identity_
    });
  } catch (e) {
    goog.logToConsole_(e.message);
  }
  return policy;
};

// There's a bug in the compiler where without collapse properties the
// Closure namespace defines do not guard code correctly. To help reduce code
// size also check for !COMPILED even though it redundant until this is fixed.
if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
  // MOE:begin_strip
  // TODO(b/67050526) This object is obsolete but some people are relying on
  // it internally. Keep it around until we migrate them.
  /**
   * @private
   * @type {{
   *   loadFlags: !Object<string, !Object<string, string>>,
   *   nameToPath: !Object<string, string>,
   *   requires: !Object<string, !Object<string, boolean>>,
   *   visited: !Object<string, boolean>,
   *   written: !Object<string, boolean>,
   *   deferred: !Object<string, string>
   * }}
   */
  goog.dependencies_ = {
    loadFlags: {},  // 1 to 1

    nameToPath: {},  // 1 to 1

    requires: {},  // 1 to many

    // Used when resolving dependencies to prevent us from visiting file
    // twice.
    visited: {},

    written: {},  // Used to keep track of script files we have written.

    deferred: {}  // Used to track deferred module evaluations in old IEs
  };

  /**
   * @return {!Object}
   * @private
   */
  goog.getLoader_ = function() {
    return {
      dependencies_: goog.dependencies_,
      writeScriptTag_: goog.writeScriptTag_
    };
  };


  /**
   * @param {string} src The script url.
   * @param {string=} opt_sourceText The optionally source text to evaluate
   * @return {boolean} True if the script was imported, false otherwise.
   * @private
   */
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      /** @type {!HTMLDocument} */
      var doc = goog.global.document;

      // If the user tries to require a new symbol after document load,
      // something has gone terribly wrong. Doing a document.write would
      // wipe out the page. This does not apply to the CSP-compliant method
      // of writing script tags.
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&
          doc.readyState == 'complete') {
        // Certain test frameworks load base.js multiple times, which tries
        // to write deps.js each time. If that happens, just fail silently.
        // These frameworks wipe the page between each load of base.js, so this
        // is OK.
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }

      var nonceAttr = '';
      var nonce = goog.getScriptNonce_();
      if (nonce) {
        nonceAttr = ' nonce="' + nonce + '"';
      }

      if (opt_sourceText === undefined) {
        var script = '<script src="' + src + '"' + nonceAttr + '></' +
            'script>';
        doc.write(
            goog.TRUSTED_TYPES_POLICY_ ?
                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
                script);
      } else {
        var script = '<script' + nonceAttr + '>' +
            goog.protectScriptTag_(opt_sourceText) + '</' +
            'script>';
        doc.write(
            goog.TRUSTED_TYPES_POLICY_ ?
                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
                script);
      }
      return true;
    } else {
      return false;
    }
  };
  // MOE:end_strip


  /**
   * Tries to detect whether the current browser is Edge, based on the user
   * agent. This matches only pre-Chromium Edge.
   * @see https://docs.microsoft.com/en-us/microsoft-edge/web-platform/user-agent-string
   * @return {boolean} True if the current browser is Edge.
   * @private
   */
  goog.isEdge_ = function() {
    var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?
        goog.global.navigator.userAgent :
        '';
    var edgeRe = /Edge\/(\d+)(\.\d)*/i;
    return !!userAgent.match(edgeRe);
  };


  /**
   * Tries to detect whether is in the context of an HTML document.
   * @return {boolean} True if it looks like HTML document.
   * @private
   */
  goog.inHtmlDocument_ = function() {
    /** @type {!Document} */
    var doc = goog.global.document;
    return doc != null && 'write' in doc;  // XULDocument misses write.
  };


  /**
   * We'd like to check for if the document readyState is 'loading'; however
   * there are bugs on IE 10 and below where the readyState being anything other
   * than 'complete' is not reliable.
   * @return {boolean}
   * @private
   */
  goog.isDocumentLoading_ = function() {
    // attachEvent is available on IE 6 thru 10 only, and thus can be used to
    // detect those browsers.
    /** @type {!HTMLDocument} */
    var doc = goog.global.document;
    return doc.attachEvent ? doc.readyState != 'complete' :
                             doc.readyState == 'loading';
  };


  /**
   * Tries to detect the base path of base.js script that bootstraps Closure.
   * @private
   */
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH != undefined &&
        // Anti DOM-clobbering runtime check (b/37736576).
        typeof goog.global.CLOSURE_BASE_PATH === 'string') {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else if (!goog.inHtmlDocument_()) {
      return;
    }
    /** @type {!Document} */
    var doc = goog.global.document;
    // If we have a currentScript available, use it exclusively.
    var currentScript = doc.currentScript;
    if (currentScript) {
      var scripts = [currentScript];
    } else {
      var scripts = doc.getElementsByTagName('SCRIPT');
    }
    // Search backwards since the current script is in almost all cases the one
    // that has base.js.
    for (var i = scripts.length - 1; i >= 0; --i) {
      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf('?');
      var l = qmark == -1 ? src.length : qmark;
      if (src.slice(l - 7, l) == 'base.js') {
        goog.basePath = src.slice(0, l - 7);
        return;
      }
    }
  };

  goog.findBasePath_();

  /**
   * Rewrites closing script tags in input to avoid ending an enclosing script
   * tag.
   *
   * @param {string} str
   * @return {string}
   * @private
   */
  goog.protectScriptTag_ = function(str) {
    return str.replace(/<\/(SCRIPT)/ig, '\\x3c/$1');
  };


  /**
   * A debug loader is responsible for downloading and executing javascript
   * files in an unbundled, uncompiled environment.
   *
   * This can be custimized via the setDependencyFactory method, or by
   * CLOSURE_IMPORT_SCRIPT/CLOSURE_LOAD_FILE_SYNC.
   *
   * @struct @constructor @final @private
   */
  goog.DebugLoader_ = function() {
    /** @private @const {!Object<string, !goog.Dependency>} */
    this.dependencies_ = {};
    /** @private @const {!Object<string, string>} */
    this.idToPath_ = {};
    /** @private @const {!Object<string, boolean>} */
    this.written_ = {};
    /** @private @const {!Array<!goog.Dependency>} */
    this.loadingDeps_ = [];
    /** @private {!Array<!goog.Dependency>} */
    this.depsToLoad_ = [];
    /** @private {boolean} */
    this.paused_ = false;
    /** @private {!goog.DependencyFactory} */
    this.factory_ = new goog.DependencyFactory();
    /** @private @const {!Object<string, !Function>} */
    this.deferredCallbacks_ = {};
    /** @private @const {!Array<string>} */
    this.deferredQueue_ = [];
  };

  /**
   * @param {!Array<string>} namespaces
   * @param {function(): undefined} callback Function to call once all the
   *     namespaces have loaded.
   */
  goog.DebugLoader_.prototype.bootstrap = function(namespaces, callback) {
    var cb = callback;
    function resolve() {
      if (cb) {
        goog.global.setTimeout(cb, 0);
        cb = null;
      }
    }

    if (!namespaces.length) {
      resolve();
      return;
    }

    var deps = [];
    for (var i = 0; i < namespaces.length; i++) {
      var path = this.getPathFromDeps_(namespaces[i]);
      if (!path) {
        throw new Error('Unregonized namespace: ' + namespaces[i]);
      }
      deps.push(this.dependencies_[path]);
    }

    var require = goog.require;
    var loaded = 0;
    for (var i = 0; i < namespaces.length; i++) {
      require(namespaces[i]);
      deps[i].onLoad(function() {
        if (++loaded == namespaces.length) {
          resolve();
        }
      });
    }
  };


  /**
   * Loads the Closure Dependency file.
   *
   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base
   * loaded, setDependencyFactory called, and then this called. i.e. allows
   * custom loading of the deps file.
   */
  goog.DebugLoader_.prototype.loadClosureDeps = function() {
    // Circumvent addDependency, which would try to transpile deps.js if
    // transpile is set to always.
    var relPath = 'deps.js';
    this.depsToLoad_.push(this.factory_.createDependency(
        goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {}));
    this.loadDeps_();
  };


  /**
   * Notifies the debug loader when a dependency has been requested.
   *
   * @param {string} absPathOrId Path of the dependency or goog id.
   * @param {boolean=} opt_force
   */
  goog.DebugLoader_.prototype.requested = function(absPathOrId, opt_force) {
    var path = this.getPathFromDeps_(absPathOrId);
    if (path &&
        (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {
      var callback = this.deferredCallbacks_[path];
      if (callback) {
        delete this.deferredCallbacks_[path];
        callback();
      }
    }
  };


  /**
   * Sets the dependency factory, which can be used to create custom
   * goog.Dependency implementations to control how dependencies are loaded.
   *
   * @param {!goog.DependencyFactory} factory
   */
  goog.DebugLoader_.prototype.setDependencyFactory = function(factory) {
    this.factory_ = factory;
  };


  /**
   * Travserses the dependency graph and queues the given dependency, and all of
   * its transitive dependencies, for loading and then starts loading if not
   * paused.
   *
   * @param {string} namespace
   * @private
   */
  goog.DebugLoader_.prototype.load_ = function(namespace) {
    if (!this.getPathFromDeps_(namespace)) {
      var errorMessage = 'goog.require could not find: ' + namespace;
      goog.logToConsole_(errorMessage);
    } else {
      var loader = this;

      var deps = [];

      /** @param {string} namespace */
      var visit = function(namespace) {
        var path = loader.getPathFromDeps_(namespace);

        if (!path) {
          throw new Error('Bad dependency path or symbol: ' + namespace);
        }

        if (loader.written_[path]) {
          return;
        }

        loader.written_[path] = true;

        var dep = loader.dependencies_[path];
        // MOE:begin_strip
        if (goog.dependencies_.written[dep.relativePath]) {
          return;
        }
        // MOE:end_strip
        for (var i = 0; i < dep.requires.length; i++) {
          if (!goog.isProvided_(dep.requires[i])) {
            visit(dep.requires[i]);
          }
        }

        deps.push(dep);
      };

      visit(namespace);

      var wasLoading = !!this.depsToLoad_.length;
      this.depsToLoad_ = this.depsToLoad_.concat(deps);

      if (!this.paused_ && !wasLoading) {
        this.loadDeps_();
      }
    }
  };


  /**
   * Loads any queued dependencies until they are all loaded or paused.
   *
   * @private
   */
  goog.DebugLoader_.prototype.loadDeps_ = function() {
    var loader = this;
    var paused = this.paused_;

    while (this.depsToLoad_.length && !paused) {
      (function() {
        var loadCallDone = false;
        var dep = loader.depsToLoad_.shift();

        var loaded = false;
        loader.loading_(dep);

        var controller = {
          pause: function() {
            if (loadCallDone) {
              throw new Error('Cannot call pause after the call to load.');
            } else {
              paused = true;
            }
          },
          resume: function() {
            if (loadCallDone) {
              loader.resume_();
            } else {
              // Some dep called pause and then resume in the same load call.
              // Just keep running this same loop.
              paused = false;
            }
          },
          loaded: function() {
            if (loaded) {
              throw new Error('Double call to loaded.');
            }

            loaded = true;
            loader.loaded_(dep);
          },
          pending: function() {
            // Defensive copy.
            var pending = [];
            for (var i = 0; i < loader.loadingDeps_.length; i++) {
              pending.push(loader.loadingDeps_[i]);
            }
            return pending;
          },
          /**
           * @param {goog.ModuleType} type
           */
          setModuleState: function(type) {
            goog.moduleLoaderState_ = {
              type: type,
              moduleName: '',
              declareLegacyNamespace: false
            };
          },
          /** @type {function(string, string, string=)} */
          registerEs6ModuleExports: function(
              path, exports, opt_closureNamespace) {
            if (opt_closureNamespace) {
              goog.loadedModules_[opt_closureNamespace] = {
                exports: exports,
                type: goog.ModuleType.ES6,
                moduleId: opt_closureNamespace || ''
              };
            }
          },
          /** @type {function(string, ?)} */
          registerGoogModuleExports: function(moduleId, exports) {
            goog.loadedModules_[moduleId] = {
              exports: exports,
              type: goog.ModuleType.GOOG,
              moduleId: moduleId
            };
          },
          clearModuleState: function() {
            goog.moduleLoaderState_ = null;
          },
          defer: function(callback) {
            if (loadCallDone) {
              throw new Error(
                  'Cannot register with defer after the call to load.');
            }
            loader.defer_(dep, callback);
          },
          areDepsLoaded: function() {
            return loader.areDepsLoaded_(dep.requires);
          }
        };

        try {
          dep.load(controller);
        } finally {
          loadCallDone = true;
        }
      })();
    }

    if (paused) {
      this.pause_();
    }
  };


  /** @private */
  goog.DebugLoader_.prototype.pause_ = function() {
    this.paused_ = true;
  };


  /** @private */
  goog.DebugLoader_.prototype.resume_ = function() {
    if (this.paused_) {
      this.paused_ = false;
      this.loadDeps_();
    }
  };


  /**
   * Marks the given dependency as loading (load has been called but it has not
   * yet marked itself as finished). Useful for dependencies that want to know
   * what else is loading. Example: goog.modules cannot eval if there are
   * loading dependencies.
   *
   * @param {!goog.Dependency} dep
   * @private
   */
  goog.DebugLoader_.prototype.loading_ = function(dep) {
    this.loadingDeps_.push(dep);
  };


  /**
   * Marks the given dependency as having finished loading and being available
   * for require.
   *
   * @param {!goog.Dependency} dep
   * @private
   */
  goog.DebugLoader_.prototype.loaded_ = function(dep) {
    for (var i = 0; i < this.loadingDeps_.length; i++) {
      if (this.loadingDeps_[i] == dep) {
        this.loadingDeps_.splice(i, 1);
        break;
      }
    }

    for (var i = 0; i < this.deferredQueue_.length; i++) {
      if (this.deferredQueue_[i] == dep.path) {
        this.deferredQueue_.splice(i, 1);
        break;
      }
    }

    if (this.loadingDeps_.length == this.deferredQueue_.length &&
        !this.depsToLoad_.length) {
      // Something has asked to load these, but they may not be directly
      // required again later, so load them now that we know we're done loading
      // everything else. e.g. a goog module entry point.
      while (this.deferredQueue_.length) {
        this.requested(this.deferredQueue_.shift(), true);
      }
    }

    dep.loaded();
  };


  /**
   * @param {!Array<string>} pathsOrIds
   * @return {boolean}
   * @private
   */
  goog.DebugLoader_.prototype.areDepsLoaded_ = function(pathsOrIds) {
    for (var i = 0; i < pathsOrIds.length; i++) {
      var path = this.getPathFromDeps_(pathsOrIds[i]);
      if (!path ||
          (!(path in this.deferredCallbacks_) &&
           !goog.isProvided_(pathsOrIds[i]))) {
        return false;
      }
    }

    return true;
  };


  /**
   * @param {string} absPathOrId
   * @return {?string}
   * @private
   */
  goog.DebugLoader_.prototype.getPathFromDeps_ = function(absPathOrId) {
    if (absPathOrId in this.idToPath_) {
      return this.idToPath_[absPathOrId];
    } else if (absPathOrId in this.dependencies_) {
      return absPathOrId;
    } else {
      return null;
    }
  };


  /**
   * @param {!goog.Dependency} dependency
   * @param {!Function} callback
   * @private
   */
  goog.DebugLoader_.prototype.defer_ = function(dependency, callback) {
    this.deferredCallbacks_[dependency.path] = callback;
    this.deferredQueue_.push(dependency.path);
  };


  /**
   * Interface for goog.Dependency implementations to have some control over
   * loading of dependencies.
   *
   * @record
   */
  goog.LoadController = function() {};


  /**
   * Tells the controller to halt loading of more dependencies.
   */
  goog.LoadController.prototype.pause = function() {};


  /**
   * Tells the controller to resume loading of more dependencies if paused.
   */
  goog.LoadController.prototype.resume = function() {};


  /**
   * Tells the controller that this dependency has finished loading.
   *
   * This causes this to be removed from pending() and any load callbacks to
   * fire.
   */
  goog.LoadController.prototype.loaded = function() {};


  /**
   * List of dependencies on which load has been called but which have not
   * called loaded on their controller. This includes the current dependency.
   *
   * @return {!Array<!goog.Dependency>}
   */
  goog.LoadController.prototype.pending = function() {};


  /**
   * Registers an object as an ES6 module's exports so that goog.modules may
   * require it by path.
   *
   * @param {string} path Full path of the module.
   * @param {?} exports
   * @param {string=} opt_closureNamespace Closure namespace to associate with
   *     this module.
   */
  goog.LoadController.prototype.registerEs6ModuleExports = function(
      path, exports, opt_closureNamespace) {};


  /**
   * Sets the current module state.
   *
   * @param {goog.ModuleType} type Type of module.
   */
  goog.LoadController.prototype.setModuleState = function(type) {};


  /**
   * Clears the current module state.
   */
  goog.LoadController.prototype.clearModuleState = function() {};


  /**
   * Registers a callback to call once the dependency is actually requested
   * via goog.require + all of the immediate dependencies have been loaded or
   * all other files have been loaded. Allows for lazy loading until
   * require'd without pausing dependency loading, which is needed on old IE.
   *
   * @param {!Function} callback
   */
  goog.LoadController.prototype.defer = function(callback) {};


  /**
   * @return {boolean}
   */
  goog.LoadController.prototype.areDepsLoaded = function() {};


  /**
   * Basic super class for all dependencies Closure Library can load.
   *
   * This default implementation is designed to load untranspiled, non-module
   * scripts in a web broswer.
   *
   * For goog.modules see {@see goog.GoogModuleDependency}.
   * For untranspiled ES6 modules {@see goog.Es6ModuleDependency}.
   *
   * @param {string} path Absolute path of this script.
   * @param {string} relativePath Path of this script relative to goog.basePath.
   * @param {!Array<string>} provides goog.provided or goog.module symbols
   *     in this file.
   * @param {!Array<string>} requires goog symbols or relative paths to Closure
   *     this depends on.
   * @param {!Object<string, string>} loadFlags
   * @struct @constructor
   */
  goog.Dependency = function(
      path, relativePath, provides, requires, loadFlags) {
    /** @const */
    this.path = path;
    /** @const */
    this.relativePath = relativePath;
    /** @const */
    this.provides = provides;
    /** @const */
    this.requires = requires;
    /** @const */
    this.loadFlags = loadFlags;
    /** @private {boolean} */
    this.loaded_ = false;
    /** @private {!Array<function()>} */
    this.loadCallbacks_ = [];
  };


  /**
   * @return {string} The pathname part of this dependency's path if it is a
   *     URI.
   */
  goog.Dependency.prototype.getPathName = function() {
    var pathName = this.path;
    var protocolIndex = pathName.indexOf('://');
    if (protocolIndex >= 0) {
      pathName = pathName.substring(protocolIndex + 3);
      var slashIndex = pathName.indexOf('/');
      if (slashIndex >= 0) {
        pathName = pathName.substring(slashIndex + 1);
      }
    }
    return pathName;
  };


  /**
   * @param {function()} callback Callback to fire as soon as this has loaded.
   * @final
   */
  goog.Dependency.prototype.onLoad = function(callback) {
    if (this.loaded_) {
      callback();
    } else {
      this.loadCallbacks_.push(callback);
    }
  };


  /**
   * Marks this dependency as loaded and fires any callbacks registered with
   * onLoad.
   * @final
   */
  goog.Dependency.prototype.loaded = function() {
    this.loaded_ = true;
    var callbacks = this.loadCallbacks_;
    this.loadCallbacks_ = [];
    for (var i = 0; i < callbacks.length; i++) {
      callbacks[i]();
    }
  };


  /**
   * Whether or not document.written / appended script tags should be deferred.
   *
   * @private {boolean}
   */
  goog.Dependency.defer_ = false;


  /**
   * Map of script ready / state change callbacks. Old IE cannot handle putting
   * these properties on goog.global.
   *
   * @private @const {!Object<string, function(?):undefined>}
   */
  goog.Dependency.callbackMap_ = {};


  /**
   * @param {function(...?):?} callback
   * @return {string}
   * @private
   */
  goog.Dependency.registerCallback_ = function(callback) {
    var key = Math.random().toString(32);
    goog.Dependency.callbackMap_[key] = callback;
    return key;
  };


  /**
   * @param {string} key
   * @private
   */
  goog.Dependency.unregisterCallback_ = function(key) {
    delete goog.Dependency.callbackMap_[key];
  };


  /**
   * @param {string} key
   * @param {...?} var_args
   * @private
   * @suppress {unusedPrivateMembers}
   */
  goog.Dependency.callback_ = function(key, var_args) {
    if (key in goog.Dependency.callbackMap_) {
      var callback = goog.Dependency.callbackMap_[key];
      var args = [];
      for (var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      callback.apply(undefined, args);
    } else {
      var errorMessage = 'Callback key ' + key +
          ' does not exist (was base.js loaded more than once?).';
      // MOE:begin_strip
      // TODO(johnplaisted): Some people internally are mistakenly loading
      // base.js twice, and this can happen while a dependency is loading,
      // wiping out state.
      goog.logToConsole_(errorMessage);
      // MOE:end_strip
      // MOE:insert throw Error(errorMessage);
    }
  };


  /**
   * Starts loading this dependency. This dependency can pause loading if it
   * needs to and resume it later via the controller interface.
   *
   * When this is loaded it should call controller.loaded(). Note that this will
   * end up calling the loaded method of this dependency; there is no need to
   * call it explicitly.
   *
   * @param {!goog.LoadController} controller
   */
  goog.Dependency.prototype.load = function(controller) {
    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }

    if (!goog.inHtmlDocument_()) {
      goog.logToConsole_(
          'Cannot use default debug loader outside of HTML documents.');
      if (this.relativePath == 'deps.js') {
        // Some old code is relying on base.js auto loading deps.js failing with
        // no error before later setting CLOSURE_IMPORT_SCRIPT.
        // CLOSURE_IMPORT_SCRIPT should be set *before* base.js is loaded, or
        // CLOSURE_NO_DEPS set to true.
        goog.logToConsole_(
            'Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, ' +
            'or setting CLOSURE_NO_DEPS to true.');
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }

    /** @type {!HTMLDocument} */
    var doc = goog.global.document;

    // If the user tries to require a new symbol after document load,
    // something has gone terribly wrong. Doing a document.write would
    // wipe out the page. This does not apply to the CSP-compliant method
    // of writing script tags.
    if (doc.readyState == 'complete' &&
        !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
      // Certain test frameworks load base.js multiple times, which tries
      // to write deps.js each time. If that happens, just fail silently.
      // These frameworks wipe the page between each load of base.js, so this
      // is OK.
      var isDeps = /\bdeps.js$/.test(this.path);
      if (isDeps) {
        controller.loaded();
        return;
      } else {
        throw Error('Cannot write "' + this.path + '" after document load');
      }
    }

    var nonce = goog.getScriptNonce_();
    if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&
        goog.isDocumentLoading_()) {
      var key;
      var callback = function(script) {
        if (script.readyState && script.readyState != 'complete') {
          script.onload = callback;
          return;
        }
        goog.Dependency.unregisterCallback_(key);
        controller.loaded();
      };
      key = goog.Dependency.registerCallback_(callback);

      var defer = goog.Dependency.defer_ ? ' defer' : '';
      var nonceAttr = nonce ? ' nonce="' + nonce + '"' : '';
      var script = '<script src="' + this.path + '"' + nonceAttr + defer +
          ' id="script-' + key + '"><\/script>';

      script += '<script' + nonceAttr + '>';

      if (goog.Dependency.defer_) {
        script += 'document.getElementById(\'script-' + key +
            '\').onload = function() {\n' +
            '  goog.Dependency.callback_(\'' + key + '\', this);\n' +
            '};\n';
      } else {
        script += 'goog.Dependency.callback_(\'' + key +
            '\', document.getElementById(\'script-' + key + '\'));';
      }

      script += '<\/script>';

      doc.write(
          goog.TRUSTED_TYPES_POLICY_ ?
              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
              script);
    } else {
      var scriptEl =
          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));
      scriptEl.defer = goog.Dependency.defer_;
      scriptEl.async = false;

      // If CSP nonces are used, propagate them to dynamically created scripts.
      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.
      if (nonce) {
        scriptEl.nonce = nonce;
      }

      scriptEl.onload = function() {
        scriptEl.onload = null;
        controller.loaded();
      };

      scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?
          goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path) :
          this.path;
      doc.head.appendChild(scriptEl);
    }
  };


  /**
   * @param {string} path Absolute path of this script.
   * @param {string} relativePath Path of this script relative to goog.basePath.
   * @param {!Array<string>} provides Should be an empty array.
   *     TODO(johnplaisted) add support for adding closure namespaces to ES6
   *     modules for interop purposes.
   * @param {!Array<string>} requires goog symbols or relative paths to Closure
   *     this depends on.
   * @param {!Object<string, string>} loadFlags
   * @struct @constructor
   * @extends {goog.Dependency}
   */
  goog.Es6ModuleDependency = function(
      path, relativePath, provides, requires, loadFlags) {
    goog.Es6ModuleDependency.base(
        this, 'constructor', path, relativePath, provides, requires, loadFlags);
  };
  goog.inherits(goog.Es6ModuleDependency, goog.Dependency);


  /**
   * @override
   * @param {!goog.LoadController} controller
   */
  goog.Es6ModuleDependency.prototype.load = function(controller) {
    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }

    if (!goog.inHtmlDocument_()) {
      goog.logToConsole_(
          'Cannot use default debug loader outside of HTML documents.');
      controller.pause();
      return;
    }

    /** @type {!HTMLDocument} */
    var doc = goog.global.document;

    var dep = this;

    // TODO(johnplaisted): Does document.writing really speed up anything? Any
    // difference between this and just waiting for interactive mode and then
    // appending?
    function write(src, contents) {
      var nonceAttr = '';
      var nonce = goog.getScriptNonce_();
      if (nonce) {
        nonceAttr = ' nonce="' + nonce + '"';
      }

      if (contents) {
        var script = '<script type="module" crossorigin' + nonceAttr + '>' +
            contents + '</' +
            'script>';
        doc.write(
            goog.TRUSTED_TYPES_POLICY_ ?
                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
                script);
      } else {
        var script = '<script type="module" crossorigin src="' + src + '"' +
            nonceAttr + '></' +
            'script>';
        doc.write(
            goog.TRUSTED_TYPES_POLICY_ ?
                goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
                script);
      }
    }

    function append(src, contents) {
      var scriptEl =
          /** @type {!HTMLScriptElement} */ (doc.createElement('script'));
      scriptEl.defer = true;
      scriptEl.async = false;
      scriptEl.type = 'module';
      scriptEl.setAttribute('crossorigin', true);

      // If CSP nonces are used, propagate them to dynamically created scripts.
      // This is necessary to allow nonce-based CSPs without 'strict-dynamic'.
      var nonce = goog.getScriptNonce_();
      if (nonce) {
        scriptEl.nonce = nonce;
      }

      if (contents) {
        scriptEl.text = goog.TRUSTED_TYPES_POLICY_ ?
            goog.TRUSTED_TYPES_POLICY_.createScript(contents) :
            contents;
      } else {
        scriptEl.src = goog.TRUSTED_TYPES_POLICY_ ?
            goog.TRUSTED_TYPES_POLICY_.createScriptURL(src) :
            src;
      }

      doc.head.appendChild(scriptEl);
    }

    var create;

    if (goog.isDocumentLoading_()) {
      create = write;
      // We can ONLY call document.write if we are guaranteed that any
      // non-module script tags document.written after this are deferred.
      // Small optimization, in theory document.writing is faster.
      goog.Dependency.defer_ = true;
    } else {
      create = append;
    }

    // Write 4 separate tags here:
    // 1) Sets the module state at the correct time (just before execution).
    // 2) A src node for this, which just hopefully lets the browser load it a
    //    little early (no need to parse #3).
    // 3) Import the module and register it.
    // 4) Clear the module state at the correct time. Guaranteed to run even
    //    if there is an error in the module (#3 will not run if there is an
    //    error in the module).
    var beforeKey = goog.Dependency.registerCallback_(function() {
      goog.Dependency.unregisterCallback_(beforeKey);
      controller.setModuleState(goog.ModuleType.ES6);
    });
    create(undefined, 'goog.Dependency.callback_("' + beforeKey + '")');

    // TODO(johnplaisted): Does this really speed up anything?
    create(this.path, undefined);

    var registerKey = goog.Dependency.registerCallback_(function(exports) {
      goog.Dependency.unregisterCallback_(registerKey);
      controller.registerEs6ModuleExports(
          dep.path, exports, goog.moduleLoaderState_.moduleName);
    });
    create(
        undefined,
        'import * as m from "' + this.path + '"; goog.Dependency.callback_("' +
            registerKey + '", m)');

    var afterKey = goog.Dependency.registerCallback_(function() {
      goog.Dependency.unregisterCallback_(afterKey);
      controller.clearModuleState();
      controller.loaded();
    });
    create(undefined, 'goog.Dependency.callback_("' + afterKey + '")');
  };


  /**
   * Superclass of any dependency that needs to be loaded into memory,
   * transformed, and then eval'd (goog.modules and transpiled files).
   *
   * @param {string} path Absolute path of this script.
   * @param {string} relativePath Path of this script relative to goog.basePath.
   * @param {!Array<string>} provides goog.provided or goog.module symbols
   *     in this file.
   * @param {!Array<string>} requires goog symbols or relative paths to Closure
   *     this depends on.
   * @param {!Object<string, string>} loadFlags
   * @struct @constructor @abstract
   * @extends {goog.Dependency}
   */
  goog.TransformedDependency = function(
      path, relativePath, provides, requires, loadFlags) {
    goog.TransformedDependency.base(
        this, 'constructor', path, relativePath, provides, requires, loadFlags);
    /** @private {?string} */
    this.contents_ = null;

    /**
     * Whether to lazily make the synchronous XHR (when goog.require'd) or make
     * the synchronous XHR when initially loading. On FireFox 61 there is a bug
     * where an ES6 module cannot make a synchronous XHR (rather, it can, but if
     * it does then no other ES6 modules will load after).
     *
     * tl;dr we lazy load due to bugs on older browsers and eager load due to
     * bugs on newer ones.
     *
     * https://bugzilla.mozilla.org/show_bug.cgi?id=1477090
     *
     * @private @const {boolean}
     */
    this.lazyFetch_ = !goog.inHtmlDocument_() ||
        !('noModule' in goog.global.document.createElement('script'));
  };
  goog.inherits(goog.TransformedDependency, goog.Dependency);


  /**
   * @override
   * @param {!goog.LoadController} controller
   */
  goog.TransformedDependency.prototype.load = function(controller) {
    var dep = this;

    function fetch() {
      dep.contents_ = goog.loadFileSync_(dep.path);

      if (dep.contents_) {
        dep.contents_ = dep.transform(dep.contents_);
        if (dep.contents_) {
          dep.contents_ += '\n//# sourceURL=' + dep.path;
        }
      }
    }

    if (goog.global.CLOSURE_IMPORT_SCRIPT) {
      fetch();
      if (this.contents_ &&
          goog.global.CLOSURE_IMPORT_SCRIPT('', this.contents_)) {
        this.contents_ = null;
        controller.loaded();
      } else {
        controller.pause();
      }
      return;
    }


    var isEs6 = this.loadFlags['module'] == goog.ModuleType.ES6;

    if (!this.lazyFetch_) {
      fetch();
    }

    function load() {
      if (dep.lazyFetch_) {
        fetch();
      }

      if (!dep.contents_) {
        // loadFileSync_ or transform are responsible. Assume they logged an
        // error.
        return;
      }

      if (isEs6) {
        controller.setModuleState(goog.ModuleType.ES6);
      }

      var namespace;

      try {
        var contents = dep.contents_;
        dep.contents_ = null;
        goog.globalEval(goog.CLOSURE_EVAL_PREFILTER_.createScript(contents));
        if (isEs6) {
          namespace = goog.moduleLoaderState_.moduleName;
        }
      } finally {
        if (isEs6) {
          controller.clearModuleState();
        }
      }

      if (isEs6) {
        // Due to circular dependencies this may not be available for require
        // right now.
        goog.global['$jscomp']['require']['ensure'](
            [dep.getPathName()], function() {
              controller.registerEs6ModuleExports(
                  dep.path,
                  goog.global['$jscomp']['require'](dep.getPathName()),
                  namespace);
            });
      }

      controller.loaded();
    }

    // Do not fetch now; in FireFox 47 the synchronous XHR doesn't block all
    // events. If we fetched now and then document.write'd the contents the
    // document.write would be an eval and would execute too soon! Instead write
    // a script tag to fetch and eval synchronously at the correct time.
    function fetchInOwnScriptThenLoad() {
      /** @type {!HTMLDocument} */
      var doc = goog.global.document;

      var key = goog.Dependency.registerCallback_(function() {
        goog.Dependency.unregisterCallback_(key);
        load();
      });

      var nonce = goog.getScriptNonce_();
      var nonceAttr = nonce ? ' nonce="' + nonce + '"' : '';
      var script = '<script' + nonceAttr + '>' +
          goog.protectScriptTag_('goog.Dependency.callback_("' + key + '");') +
          '</' +
          'script>';
      doc.write(
          goog.TRUSTED_TYPES_POLICY_ ?
              goog.TRUSTED_TYPES_POLICY_.createHTML(script) :
              script);
    }

    // If one thing is pending it is this.
    var anythingElsePending = controller.pending().length > 1;

    // Additionally if we are meant to defer scripts but the page is still
    // loading (e.g. an ES6 module is loading) then also defer. Or if we are
    // meant to defer and anything else is pending then defer (those may be
    // scripts that did not need transformation and are just script tags with
    // defer set to true, and we need to evaluate after that deferred script).
    var needsAsyncLoading = goog.Dependency.defer_ &&
        (anythingElsePending || goog.isDocumentLoading_());

    if (needsAsyncLoading) {
      // Note that we only defer when we have to rather than 100% of the time.
      // Always defering would work, but then in theory the order of
      // goog.require calls would then matter. We want to enforce that most of
      // the time the order of the require calls does not matter.
      controller.defer(function() {
        load();
      });
      return;
    }
    // TODO(johnplaisted): Externs are missing onreadystatechange for
    // HTMLDocument.
    /** @type {?} */
    var doc = goog.global.document;

    var isInternetExplorerOrEdge = goog.inHtmlDocument_() &&
        ('ActiveXObject' in goog.global || goog.isEdge_());

    // Don't delay in any version of IE or pre-Chromium Edge. There's a bug
    // around this that will cause out of order script execution. This means
    // that on older IE ES6 modules will load too early (while the document is
    // still loading + the dom is not available). The other option is to load
    // too late (when the document is complete and the onload even will never
    // fire). This seems to be the lesser of two evils as scripts already act
    // like the former.
    if (isEs6 && goog.inHtmlDocument_() && goog.isDocumentLoading_() &&
        !isInternetExplorerOrEdge) {
      goog.Dependency.defer_ = true;
      // Transpiled ES6 modules still need to load like regular ES6 modules,
      // aka only after the document is interactive.
      controller.pause();
      var oldCallback = doc.onreadystatechange;
      doc.onreadystatechange = function() {
        if (doc.readyState == 'interactive') {
          doc.onreadystatechange = oldCallback;
          load();
          controller.resume();
        }
        if (typeof oldCallback === 'function') {
          oldCallback.apply(undefined, arguments);
        }
      };
    } else {
      // Always eval on old IE.
      if (!goog.inHtmlDocument_() || !goog.isDocumentLoading_()) {
        load();
      } else {
        fetchInOwnScriptThenLoad();
      }
    }
  };


  /**
   * @param {string} contents
   * @return {string}
   * @abstract
   */
  goog.TransformedDependency.prototype.transform = function(contents) {};


  /**
   * An ES6 module dependency that was transpiled to a jscomp module outside
   * of the debug loader, e.g. server side.
   *
   * @param {string} path Absolute path of this script.
   * @param {string} relativePath Path of this script relative to goog.basePath.
   * @param {!Array<string>} provides goog.provided or goog.module symbols
   *     in this file.
   * @param {!Array<string>} requires goog symbols or relative paths to Closure
   *     this depends on.
   * @param {!Object<string, string>} loadFlags
   * @struct @constructor
   * @extends {goog.TransformedDependency}
   */
  goog.PreTranspiledEs6ModuleDependency = function(
      path, relativePath, provides, requires, loadFlags) {
    goog.PreTranspiledEs6ModuleDependency.base(
        this, 'constructor', path, relativePath, provides, requires, loadFlags);
  };
  goog.inherits(
      goog.PreTranspiledEs6ModuleDependency, goog.TransformedDependency);


  /**
   * @override
   * @param {string} contents
   * @return {string}
   */
  goog.PreTranspiledEs6ModuleDependency.prototype.transform = function(
      contents) {
    return contents;
  };


  /**
   * A goog.module, transpiled or not. Will always perform some minimal
   * transformation even when not transpiled to wrap in a goog.loadModule
   * statement.
   *
   * @param {string} path Absolute path of this script.
   * @param {string} relativePath Path of this script relative to goog.basePath.
   * @param {!Array<string>} provides goog.provided or goog.module symbols
   *     in this file.
   * @param {!Array<string>} requires goog symbols or relative paths to Closure
   *     this depends on.
   * @param {!Object<string, string>} loadFlags
   * @struct @constructor
   * @extends {goog.TransformedDependency}
   */
  goog.GoogModuleDependency = function(
      path, relativePath, provides, requires, loadFlags) {
    goog.GoogModuleDependency.base(
        this, 'constructor', path, relativePath, provides, requires, loadFlags);
  };
  goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);


  /**
   * @override
   * @param {string} contents
   * @return {string}
   */
  goog.GoogModuleDependency.prototype.transform = function(contents) {
    if (!goog.LOAD_MODULE_USING_EVAL || goog.global.JSON === undefined) {
      return '' +
          'goog.loadModule(function(exports) {' +
          '"use strict";' + contents +
          '\n' +  // terminate any trailing single line comment.
          ';return exports' +
          '});' +
          '\n//# sourceURL=' + this.path + '\n';
    } else {
      return '' +
          'goog.loadModule(' +
          goog.global.JSON.stringify(
              contents + '\n//# sourceURL=' + this.path + '\n') +
          ');';
    }
  };


  /**
   * @param {string} relPath
   * @param {!Array<string>|undefined} provides
   * @param {!Array<string>} requires
   * @param {boolean|!Object<string>=} opt_loadFlags
   * @see goog.addDependency
   */
  goog.DebugLoader_.prototype.addDependency = function(
      relPath, provides, requires, opt_loadFlags) {
    provides = provides || [];
    relPath = relPath.replace(/\\/g, '/');
    var path = goog.normalizePath_(goog.basePath + relPath);
    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {
      opt_loadFlags = opt_loadFlags ? {'module': goog.ModuleType.GOOG} : {};
    }
    var dep = this.factory_.createDependency(
        path, relPath, provides, requires, opt_loadFlags);
    this.dependencies_[path] = dep;
    for (var i = 0; i < provides.length; i++) {
      this.idToPath_[provides[i]] = path;
    }
    this.idToPath_[relPath] = path;
  };


  /**
   * Creates goog.Dependency instances for the debug loader to load.
   *
   * Should be overridden to have the debug loader use custom subclasses of
   * goog.Dependency.
   *
   * @struct @constructor
   */
  goog.DependencyFactory = function() {};


  /**
   * @param {string} path Absolute path of the file.
   * @param {string} relativePath Path relative to closure’s base.js.
   * @param {!Array<string>} provides Array of provided goog.provide/module ids.
   * @param {!Array<string>} requires Array of required goog.provide/module /
   *     relative ES6 module paths.
   * @param {!Object<string, string>} loadFlags
   * @return {!goog.Dependency}
   */
  goog.DependencyFactory.prototype.createDependency = function(
      path, relativePath, provides, requires, loadFlags) {
    // MOE:begin_strip
    var provide, require;
    for (var i = 0; provide = provides[i]; i++) {
      goog.dependencies_.nameToPath[provide] = relativePath;
      goog.dependencies_.loadFlags[relativePath] = loadFlags;
    }
    for (var j = 0; require = requires[j]; j++) {
      if (!(relativePath in goog.dependencies_.requires)) {
        goog.dependencies_.requires[relativePath] = {};
      }
      goog.dependencies_.requires[relativePath][require] = true;
    }
    // MOE:end_strip

    if (loadFlags['module'] == goog.ModuleType.GOOG) {
      return new goog.GoogModuleDependency(
          path, relativePath, provides, requires, loadFlags);
    } else {
      if (loadFlags['module'] == goog.ModuleType.ES6) {
        if (goog.ASSUME_ES_MODULES_TRANSPILED) {
          return new goog.PreTranspiledEs6ModuleDependency(
              path, relativePath, provides, requires, loadFlags);
        } else {
          return new goog.Es6ModuleDependency(
              path, relativePath, provides, requires, loadFlags);
        }
      } else {
        return new goog.Dependency(
            path, relativePath, provides, requires, loadFlags);
      }
    }
  };


  /** @private @const */
  goog.debugLoader_ = new goog.DebugLoader_();


  /**
   * Loads the Closure Dependency file.
   *
   * Exposed a public function so CLOSURE_NO_DEPS can be set to false, base
   * loaded, setDependencyFactory called, and then this called. i.e. allows
   * custom loading of the deps file.
   */
  goog.loadClosureDeps = function() {
    goog.debugLoader_.loadClosureDeps();
  };


  /**
   * Sets the dependency factory, which can be used to create custom
   * goog.Dependency implementations to control how dependencies are loaded.
   *
   * Note: if you wish to call this function and provide your own implemnetation
   * it is a wise idea to set CLOSURE_NO_DEPS to true, otherwise the dependency
   * file and all of its goog.addDependency calls will use the default factory.
   * You can call goog.loadClosureDeps to load the Closure dependency file
   * later, after your factory is injected.
   *
   * @param {!goog.DependencyFactory} factory
   */
  goog.setDependencyFactory = function(factory) {
    goog.debugLoader_.setDependencyFactory(factory);
  };


  /**
   * Trusted Types policy for the debug loader.
   * @private @const {?TrustedTypePolicy}
   */
  goog.TRUSTED_TYPES_POLICY_ = goog.TRUSTED_TYPES_POLICY_NAME ?
      goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME + '#base') :
      null;

  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.debugLoader_.loadClosureDeps();
  }


  /**
   * Bootstraps the given namespaces and calls the callback once they are
   * available either via goog.require. This is a replacement for using
   * `goog.require` to bootstrap Closure JavaScript. Previously a `goog.require`
   * in an HTML file would guarantee that the require'd namespace was available
   * in the next immediate script tag. With ES6 modules this no longer a
   * guarantee.
   *
   * @param {!Array<string>} namespaces
   * @param {function(): ?} callback Function to call once all the namespaces
   *     have loaded. Always called asynchronously.
   */
  goog.bootstrap = function(namespaces, callback) {
    goog.debugLoader_.bootstrap(namespaces, callback);
  };
}


if (!COMPILED) {
  var isChrome87 = false;
  // Cannot run check for Chrome <87 bug in case of strict CSP environments.
  // TODO(aaronshim): Remove once Chrome <87 bug is no longer a problem.
  try {
    isChrome87 = eval(goog.global.trustedTypes.emptyScript) !==
        goog.global.trustedTypes.emptyScript;
  } catch (err) {
  }

  /**
   * Trusted Types for running dev servers.
   *
   * @private @const
   */
  goog.CLOSURE_EVAL_PREFILTER_ =
      // Detect Chrome <87 bug with TT and eval.
      goog.global.trustedTypes && isChrome87 &&
          goog.createTrustedTypesPolicy('goog#base#devonly#eval') ||
      {createScript: goog.identity_};
}

//javascript/closure/goog.js
$jscomp.registerAndLoadModule(function($$require, $$exports, $$module) {
  Object.defineProperties($$exports, {DEBUG:{enumerable:true, get:function() {
    return DEBUG;
  }}, DISALLOW_TEST_ONLY_CODE:{enumerable:true, get:function() {
    return DISALLOW_TEST_ONLY_CODE;
  }}, LOCALE:{enumerable:true, get:function() {
    return LOCALE;
  }}, TRUSTED_SITE:{enumerable:true, get:function() {
    return TRUSTED_SITE;
  }}, abstractMethod:{enumerable:true, get:function() {
    return abstractMethod;
  }}, addSingletonGetter:{enumerable:true, get:function() {
    return addSingletonGetter;
  }}, basePath:{enumerable:true, get:function() {
    return basePath;
  }}, bind:{enumerable:true, get:function() {
    return bind;
  }}, cloneObject:{enumerable:true, get:function() {
    return cloneObject;
  }}, declareModuleId:{enumerable:true, get:function() {
    return declareModuleId;
  }}, define:{enumerable:true, get:function() {
    return define;
  }}, defineClass:{enumerable:true, get:function() {
    return defineClass;
  }}, exportProperty:{enumerable:true, get:function() {
    return exportProperty;
  }}, exportSymbol:{enumerable:true, get:function() {
    return exportSymbol;
  }}, forwardDeclare:{enumerable:true, get:function() {
    return forwardDeclare;
  }}, getCssName:{enumerable:true, get:function() {
    return getCssName;
  }}, getGoogModule:{enumerable:true, get:function() {
    return getGoogModule;
  }}, getMsg:{enumerable:true, get:function() {
    return getMsg;
  }}, getMsgWithFallback:{enumerable:true, get:function() {
    return getMsgWithFallback;
  }}, getObjectByName:{enumerable:true, get:function() {
    return getObjectByName;
  }}, getUid:{enumerable:true, get:function() {
    return getUid;
  }}, global:{enumerable:true, get:function() {
    return global;
  }}, globalEval:{enumerable:true, get:function() {
    return globalEval;
  }}, hasUid:{enumerable:true, get:function() {
    return hasUid;
  }}, inherits:{enumerable:true, get:function() {
    return inherits;
  }}, isArrayLike:{enumerable:true, get:function() {
    return isArrayLike;
  }}, isDateLike:{enumerable:true, get:function() {
    return isDateLike;
  }}, isObject:{enumerable:true, get:function() {
    return isObject;
  }}, module:{enumerable:true, get:function() {
    return module;
  }}, now:{enumerable:true, get:function() {
    return now;
  }}, partial:{enumerable:true, get:function() {
    return partial;
  }}, removeUid:{enumerable:true, get:function() {
    return removeUid;
  }}, require:{enumerable:true, get:function() {
    return require;
  }}, scope:{enumerable:true, get:function() {
    return scope;
  }}, setCssNameMapping:{enumerable:true, get:function() {
    return setCssNameMapping;
  }}, setTestOnly:{enumerable:true, get:function() {
    return setTestOnly;
  }}, typeOf:{enumerable:true, get:function() {
    return typeOf;
  }}});
  const global = goog.global;
  const require = goog.require;
  const define = goog.define;
  const DEBUG = goog.DEBUG;
  const LOCALE = goog.LOCALE;
  const TRUSTED_SITE = goog.TRUSTED_SITE;
  const DISALLOW_TEST_ONLY_CODE = goog.DISALLOW_TEST_ONLY_CODE;
  const getGoogModule = goog.module.get;
  const setTestOnly = goog.setTestOnly;
  const forwardDeclare = goog.forwardDeclare;
  const getObjectByName = goog.getObjectByName;
  const basePath = goog.basePath;
  const addSingletonGetter = goog.addSingletonGetter;
  const typeOf = goog.typeOf;
  const isArrayLike = goog.isArrayLike;
  const isDateLike = goog.isDateLike;
  const isObject = goog.isObject;
  const getUid = goog.getUid;
  const hasUid = goog.hasUid;
  const removeUid = goog.removeUid;
  const now = Date.now;
  const globalEval = goog.globalEval;
  const getCssName = goog.getCssName;
  const setCssNameMapping = goog.setCssNameMapping;
  const getMsg = goog.getMsg;
  const getMsgWithFallback = goog.getMsgWithFallback;
  const exportSymbol = goog.exportSymbol;
  const exportProperty = goog.exportProperty;
  const abstractMethod = goog.abstractMethod;
  const cloneObject = goog.cloneObject;
  const bind = goog.bind;
  const partial = goog.partial;
  const inherits = goog.inherits;
  const scope = goog.scope;
  const defineClass = goog.defineClass;
  const declareModuleId = goog.declareModuleId;
  const module = {get:goog.module.get};
}, "javascript/closure/goog.js", []);

//third_party/javascript/closure/debug/error.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Provides a base class for custom Error objects such that the
 * stack is correctly maintained.
 *
 * You should never need to throw DebugError(msg) directly, Error(msg) is
 * sufficient.
 */

goog.module('goog.debug.Error');
goog.module.declareLegacyNamespace();



/**
 * Base class for custom error objects.
 * @param {*=} msg The message associated with the error.
 * @param {{
 *    message: (?|undefined),
 *    name: (?|undefined),
 *    lineNumber: (?|undefined),
 *    fileName: (?|undefined),
 *    stack: (?|undefined),
 *    cause: (?|undefined),
 * }=} cause The original error object to chain with.
 * @constructor
 * @extends {Error}
 */
function DebugError(msg = undefined, cause = undefined) {
  // Attempt to ensure there is a stack trace.
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, DebugError);
  } else {
    const stack = new Error().stack;
    if (stack) {
      /** @override @type {string} */
      this.stack = stack;
    }
  }

  if (msg) {
    /** @override @type {string} */
    this.message = String(msg);
  }

  if (cause !== undefined) {
    /** @type {?} */
    this.cause = cause;
  }

  /**
   * Whether to report this error to the server. Setting this to false will
   * cause the error reporter to not report the error back to the server,
   * which can be useful if the client knows that the error has already been
   * logged on the server.
   * @type {boolean}
   */
  this.reportErrorToServer = true;
}
goog.inherits(DebugError, Error);


/** @override @type {string} */
DebugError.prototype.name = 'CustomError';


exports = DebugError;

;return exports;});

//third_party/javascript/closure/dom/nodetype.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Definition of goog.dom.NodeType.
 */

goog.provide('goog.dom.NodeType');


/**
 * Constants for the nodeType attribute in the Node interface.
 *
 * These constants match those specified in the Node interface. These are
 * usually present on the Node object in recent browsers, but not in older
 * browsers (specifically, early IEs) and thus are given here.
 *
 * In some browsers (early IEs), these are not defined on the Node object,
 * so they are provided here.
 *
 * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
 * @enum {number}
 */
goog.dom.NodeType = {
  ELEMENT: 1,
  ATTRIBUTE: 2,
  TEXT: 3,
  CDATA_SECTION: 4,
  ENTITY_REFERENCE: 5,
  ENTITY: 6,
  PROCESSING_INSTRUCTION: 7,
  COMMENT: 8,
  DOCUMENT: 9,
  DOCUMENT_TYPE: 10,
  DOCUMENT_FRAGMENT: 11,
  NOTATION: 12
};

//third_party/javascript/closure/asserts/asserts.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Utilities to check the preconditions, postconditions and
 * invariants runtime.
 *
 * Methods in this package are given special treatment by the compiler
 * for type-inference. For example, <code>goog.asserts.assert(foo)</code>
 * will make the compiler treat <code>foo</code> as non-nullable. Similarly,
 * <code>goog.asserts.assertNumber(foo)</code> informs the compiler about the
 * type of <code>foo</code>. Where applicable, such assertions are preferable to
 * casts by jsdoc with <code>@type</code>.
 *
 * The compiler has an option to disable asserts. So code like:
 * <code>
 * var x = goog.asserts.assert(foo());
 * goog.asserts.assert(bar());
 * </code>
 * will be transformed into:
 * <code>
 * var x = foo();
 * </code>
 * The compiler will leave in foo() (because its return value is used),
 * but it will remove bar() because it assumes it does not have side-effects.
 *
 * Additionally, note the compiler will consider the type to be "tightened" for
 * all statements <em>after</em> the assertion. For example:
 * <code>
 * const /** ?Object &#ast;/ value = foo();
 * goog.asserts.assert(value);
 * // "value" is of type {!Object} at this point.
 * </code>
 */

goog.module('goog.asserts');
goog.module.declareLegacyNamespace();

const DebugError = goog.require('goog.debug.Error');
const NodeType = goog.require('goog.dom.NodeType');


// NOTE: this needs to be exported directly and referenced via the exports
// object because unit tests stub it out.
/**
 * @define {boolean} Whether to strip out asserts or to leave them in.
 */
exports.ENABLE_ASSERTS = goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);



/**
 * Error object for failed assertions.
 * @param {string} messagePattern The pattern that was used to form message.
 * @param {!Array<*>} messageArgs The items to substitute into the pattern.
 * @constructor
 * @extends {DebugError}
 * @final
 */
function AssertionError(messagePattern, messageArgs) {
  DebugError.call(this, subs(messagePattern, messageArgs));

  /**
   * The message pattern used to format the error message. Error handlers can
   * use this to uniquely identify the assertion.
   * @type {string}
   */
  this.messagePattern = messagePattern;
}
goog.inherits(AssertionError, DebugError);
exports.AssertionError = AssertionError;

/** @override @type {string} */
AssertionError.prototype.name = 'AssertionError';


/**
 * The default error handler.
 * @param {!AssertionError} e The exception to be handled.
 * @return {void}
 */
exports.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};


/**
 * The handler responsible for throwing or logging assertion errors.
 * @type {function(!AssertionError)}
 */
let errorHandler_ = exports.DEFAULT_ERROR_HANDLER;


/**
 * Does simple python-style string substitution.
 * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
 * @param {string} pattern The string containing the pattern.
 * @param {!Array<*>} subs The items to substitute into the pattern.
 * @return {string} A copy of `str` in which each occurrence of
 *     `%s` has been replaced an argument from `var_args`.
 */
function subs(pattern, subs) {
  const splitParts = pattern.split('%s');
  let returnString = '';

  // Replace up to the last split part. We are inserting in the
  // positions between split parts.
  const subLast = splitParts.length - 1;
  for (let i = 0; i < subLast; i++) {
    // keep unsupplied as '%s'
    const sub = (i < subs.length) ? subs[i] : '%s';
    returnString += splitParts[i] + sub;
  }
  return returnString + splitParts[subLast];
}


/**
 * Throws an exception with the given message and "Assertion failed" prefixed
 * onto it.
 * @param {string} defaultMessage The message to use if givenMessage is empty.
 * @param {?Array<*>} defaultArgs The substitution arguments for defaultMessage.
 * @param {string|undefined} givenMessage Message supplied by the caller.
 * @param {!Array<*>} givenArgs The substitution arguments for givenMessage.
 * @throws {AssertionError} When the value is not a number.
 */
function doAssertFailure(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  let message = 'Assertion failed';
  let args;
  if (givenMessage) {
    message += ': ' + givenMessage;
    args = givenArgs;
  } else if (defaultMessage) {
    message += ': ' + defaultMessage;
    args = defaultArgs;
  }
  // The '' + works around an Opera 10 bug in the unit tests. Without it,
  // a stack trace is added to var message above. With this, a stack trace is
  // not added until this line (it causes the extra garbage to be added after
  // the assertion message instead of in the middle of it).
  const e = new AssertionError('' + message, args || []);
  errorHandler_(e);
}


/**
 * Sets a custom error handler that can be used to customize the behavior of
 * assertion failures, for example by turning all assertion failures into log
 * messages.
 * @param {function(!AssertionError)} errorHandler
 * @return {void}
 */
exports.setErrorHandler = function(errorHandler) {
  if (exports.ENABLE_ASSERTS) {
    errorHandler_ = errorHandler;
  }
};


/**
 * Checks if the condition evaluates to true if ENABLE_ASSERTS is
 * true.
 * @template T
 * @param {T} condition The condition to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {T} The value of the condition.
 * @throws {AssertionError} When the condition evaluates to false.
 * @closurePrimitive {asserts.truthy}
 */
exports.assert = function(condition, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && !condition) {
    doAssertFailure(
        '', null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};


/**
 * Checks if `value` is `null` or `undefined` if goog.asserts.ENABLE_ASSERTS is
 * true.
 *
 * @param {T} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {R} `value` with its type narrowed to exclude `null` and `undefined`.
 *
 * @template T
 * @template R :=
 *     mapunion(T, (V) =>
 *         cond(eq(V, 'null'),
 *             none(),
 *             cond(eq(V, 'undefined'),
 *                 none(),
 *                 V)))
 *  =:
 *
 * @throws {!AssertionError} When `value` is `null` or `undefined`.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertExists = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && value == null) {
    doAssertFailure(
        'Expected to exist: %s.', [value], opt_message,
        Array.prototype.slice.call(arguments, 2));
  }
  return value;
};


/**
 * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case
 * when we want to add a check in the unreachable area like switch-case
 * statement:
 *
 * <pre>
 *  switch(type) {
 *    case FOO: doSomething(); break;
 *    case BAR: doSomethingElse(); break;
 *    default: goog.asserts.fail('Unrecognized type: ' + type);
 *      // We have only 2 types - "default:" section is unreachable code.
 *  }
 * </pre>
 *
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {void}
 * @throws {AssertionError} Failure.
 * @closurePrimitive {asserts.fail}
 */
exports.fail = function(opt_message, var_args) {
  if (exports.ENABLE_ASSERTS) {
    errorHandler_(new AssertionError(
        'Failure' + (opt_message ? ': ' + opt_message : ''),
        Array.prototype.slice.call(arguments, 1)));
  }
};


/**
 * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {number} The value, guaranteed to be a number when asserts enabled.
 * @throws {AssertionError} When the value is not a number.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertNumber = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && typeof value !== 'number') {
    doAssertFailure(
        'Expected number but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {number} */ (value);
};


/**
 * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {string} The value, guaranteed to be a string when asserts enabled.
 * @throws {AssertionError} When the value is not a string.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertString = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && typeof value !== 'string') {
    doAssertFailure(
        'Expected string but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {string} */ (value);
};


/**
 * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Function} The value, guaranteed to be a function when asserts
 *     enabled.
 * @throws {AssertionError} When the value is not a function.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertFunction = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && typeof value !== 'function') {
    doAssertFailure(
        'Expected function but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Function} */ (value);
};


/**
 * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Object} The value, guaranteed to be a non-null object.
 * @throws {AssertionError} When the value is not an object.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertObject = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && !goog.isObject(value)) {
    doAssertFailure(
        'Expected object but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Object} */ (value);
};


/**
 * Checks if the value is an Array if ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Array<?>} The value, guaranteed to be a non-null array.
 * @throws {AssertionError} When the value is not an array.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertArray = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && !Array.isArray(value)) {
    doAssertFailure(
        'Expected array but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Array<?>} */ (value);
};


/**
 * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {boolean} The value, guaranteed to be a boolean when asserts are
 *     enabled.
 * @throws {AssertionError} When the value is not a boolean.
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertBoolean = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && typeof value !== 'boolean') {
    doAssertFailure(
        'Expected boolean but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {boolean} */ (value);
};


/**
 * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @return {!Element} The value, likely to be a DOM Element when asserts are
 *     enabled.
 * @throws {AssertionError} When the value is not an Element.
 * @closurePrimitive {asserts.matchesReturn}
 * @deprecated Use goog.asserts.dom.assertIsElement instead.
 */
exports.assertElement = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS &&
      (!goog.isObject(value) ||
       /** @type {!Node} */ (value).nodeType != NodeType.ELEMENT)) {
    doAssertFailure(
        'Expected Element but got %s: %s.', [goog.typeOf(value), value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {!Element} */ (value);
};


/**
 * Checks if the value is an instance of the user-defined type if
 * goog.asserts.ENABLE_ASSERTS is true.
 *
 * The compiler may tighten the type returned by this function.
 *
 * Do not use this to ensure a value is an HTMLElement or a subclass! Cross-
 * document DOM inherits from separate - though identical - browser classes, and
 * such a check will unexpectedly fail. Please use the methods in
 * goog.asserts.dom for these purposes.
 *
 * @param {?} value The value to check.
 * @param {function(new: T, ...)} type A user-defined constructor.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {AssertionError} When the value is not an instance of
 *     type.
 * @return {T}
 * @template T
 * @closurePrimitive {asserts.matchesReturn}
 */
exports.assertInstanceof = function(value, type, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS && !(value instanceof type)) {
    doAssertFailure(
        'Expected instanceof %s but got %s.', [getType(type), getType(value)],
        opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};


/**
 * Checks whether the value is a finite number, if ENABLE_ASSERTS
 * is true.
 *
 * @param {*} value The value to check.
 * @param {string=} opt_message Error message in case of failure.
 * @param {...*} var_args The items to substitute into the failure message.
 * @throws {AssertionError} When the value is not a number, or is
 *     a non-finite number such as NaN, Infinity or -Infinity.
 * @return {number} The value initially passed in.
 */
exports.assertFinite = function(value, opt_message, var_args) {
  if (exports.ENABLE_ASSERTS &&
      (typeof value != 'number' || !isFinite(value))) {
    doAssertFailure(
        'Expected %s to be a finite number but it is not.', [value],
        opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return /** @type {number} */ (value);
};

/**
 * Returns the type of a value. If a constructor is passed, and a suitable
 * string cannot be found, 'unknown type name' will be returned.
 * @param {*} value A constructor, object, or primitive.
 * @return {string} The best display name for the value, or 'unknown type name'.
 */
function getType(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || 'unknown type name';
  } else if (value instanceof Object) {
    return /** @type {string} */ (value.constructor.displayName) ||
        value.constructor.name || Object.prototype.toString.call(value);
  } else {
    return value === null ? 'null' : typeof value;
  }
}

;return exports;});

//third_party/javascript/closure/array/array.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Utilities for manipulating arrays.
 */


goog.module('goog.array');
goog.module.declareLegacyNamespace();

const asserts = goog.require('goog.asserts');


/**
 * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should
 * rely on Array.prototype functions, if available.
 *
 * The Array.prototype functions can be defined by external libraries like
 * Prototype and setting this flag to false forces closure to use its own
 * goog.array implementation.
 *
 * If your javascript can be loaded by a third party site and you are wary about
 * relying on the prototype functions, specify
 * "--define goog.NATIVE_ARRAY_PROTOTYPES=false" to the JSCompiler.
 *
 * Setting goog.TRUSTED_SITE to false will automatically set
 * NATIVE_ARRAY_PROTOTYPES to false.
 */
goog.NATIVE_ARRAY_PROTOTYPES =
    goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);


/**
 * @define {boolean} If true, JSCompiler will use the native implementation of
 * array functions where appropriate (e.g., `Array#filter`) and remove the
 * unused pure JS implementation.
 */
const ASSUME_NATIVE_FUNCTIONS = goog.define(
    'goog.array.ASSUME_NATIVE_FUNCTIONS', goog.FEATURESET_YEAR > 2012);
exports.ASSUME_NATIVE_FUNCTIONS = ASSUME_NATIVE_FUNCTIONS;


/**
 * Returns the last element in an array without removing it.
 * Same as {@link goog.array.last}.
 * @param {IArrayLike<T>|string} array The array.
 * @return {T} Last item in array.
 * @template T
 */
function peek(array) {
  return array[array.length - 1];
}
exports.peek = peek;


/**
 * Returns the last element in an array without removing it.
 * Same as {@link goog.array.peek}.
 * @param {IArrayLike<T>|string} array The array.
 * @return {T} Last item in array.
 * @template T
 */
exports.last = peek;

// NOTE(arv): Since most of the array functions are generic it allows you to
// pass an array-like object. Strings have a length and are considered array-
// like. However, the 'in' operator does not work on strings so we cannot just
// use the array path even if the browser supports indexing into strings. We
// therefore end up splitting the string.


/**
 * Returns the index of the first element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
 *
 * @param {IArrayLike<T>|string} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at index 0.
 * @return {number} The index of the first matching array element.
 * @template T
 */
const indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?
    function(arr, obj, opt_fromIndex) {
      asserts.assert(arr.length != null);

      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      const fromIndex = opt_fromIndex == null ?
          0 :
          (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :
                               opt_fromIndex);

      if (typeof arr === 'string') {
        // Array.prototype.indexOf uses === so only strings should be found.
        if (typeof obj !== 'string' || obj.length != 1) {
          return -1;
        }
        return arr.indexOf(obj, fromIndex);
      }

      for (let i = fromIndex; i < arr.length; i++) {
        if (i in arr && arr[i] === obj) return i;
      }
      return -1;
    };
exports.indexOf = indexOf;


/**
 * Returns the index of the last element of an array with a specified value, or
 * -1 if the element is not present in the array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
 *
 * @param {!IArrayLike<T>|string} arr The array to be searched.
 * @param {T} obj The object for which we are searching.
 * @param {?number=} opt_fromIndex The index at which to start the search. If
 *     omitted the search starts at the end of the array.
 * @return {number} The index of the last matching array element.
 * @template T
 */
const lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?
    function(arr, obj, opt_fromIndex) {
      asserts.assert(arr.length != null);

      // Firefox treats undefined and null as 0 in the fromIndex argument which
      // leads it to always return -1
      const fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
    } :
    function(arr, obj, opt_fromIndex) {
      let fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;

      if (fromIndex < 0) {
        fromIndex = Math.max(0, arr.length + fromIndex);
      }

      if (typeof arr === 'string') {
        // Array.prototype.lastIndexOf uses === so only strings should be found.
        if (typeof obj !== 'string' || obj.length != 1) {
          return -1;
        }
        return arr.lastIndexOf(obj, fromIndex);
      }

      for (let i = fromIndex; i >= 0; i--) {
        if (i in arr && arr[i] === obj) return i;
      }
      return -1;
    };
exports.lastIndexOf = lastIndexOf;


/**
 * Calls a function for each element in an array. Skips holes in the array.
 * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
 *
 * @param {IArrayLike<T>|string} arr Array or array like object over
 *     which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function takes 3 arguments (the element, the index and the
 *     array). The return value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @template T,S
 */
const forEach = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?
    function(arr, f, opt_obj) {
      asserts.assert(arr.length != null);

      Array.prototype.forEach.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      const l = arr.length;  // must be fixed during loop... see docs
      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
      for (let i = 0; i < l; i++) {
        if (i in arr2) {
          f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
        }
      }
    };
exports.forEach = forEach;


/**
 * Calls a function for each element in an array, starting from the last
 * element rather than the first.
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
 *     element. This function
 *     takes 3 arguments (the element, the index and the array). The return
 *     value is ignored.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @template T,S
 */
function forEachRight(arr, f, opt_obj) {
  const l = arr.length;  // must be fixed during loop... see docs
  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
  for (let i = l - 1; i >= 0; --i) {
    if (i in arr2) {
      f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
    }
  }
}
exports.forEachRight = forEachRight;


/**
 * Calls a function for each element in an array, and if the function returns
 * true adds the element to a new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?):boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and must
 *     return a Boolean. If the return value is true the element is added to the
 *     result array. If it is false the element is not included.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {!Array<T>} a new array in which only elements that passed the test
 *     are present.
 * @template T,S
 */
const filter = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?
    function(arr, f, opt_obj) {
      asserts.assert(arr.length != null);

      return Array.prototype.filter.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      const l = arr.length;  // must be fixed during loop... see docs
      const res = [];
      let resLength = 0;
      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
      for (let i = 0; i < l; i++) {
        if (i in arr2) {
          const val = arr2[i];  // in case f mutates arr2
          if (f.call(/** @type {?} */ (opt_obj), val, i, arr)) {
            res[resLength++] = val;
          }
        }
      }
      return res;
    };
exports.filter = filter;


/**
 * Calls a function for each element in an array and inserts the result into a
 * new array.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
 *
 * @param {IArrayLike<VALUE>|string} arr Array or array like object
 *     over which to iterate.
 * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call
 *     for every element. This function takes 3 arguments (the element,
 *     the index and the array) and should return something. The result will be
 *     inserted into a new array.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
 * @return {!Array<RESULT>} a new array with the results from f.
 * @template THIS, VALUE, RESULT
 */
const map = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?
    function(arr, f, opt_obj) {
      asserts.assert(arr.length != null);

      return Array.prototype.map.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      const l = arr.length;  // must be fixed during loop... see docs
      const res = new Array(l);
      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
      for (let i = 0; i < l; i++) {
        if (i in arr2) {
          res[i] = f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
        }
      }
      return res;
    };
exports.map = map;


/**
 * Passes every element of an array into a function and accumulates the result.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
 * Note that this implementation differs from the native Array.prototype.reduce
 * in that the initial value is assumed to be defined (the MDN docs linked above
 * recommend not omitting this parameter, although it is technically optional).
 *
 * For example:
 * var a = [1, 2, 3, 4];
 * reduce(a, function(r, v, i, arr) {return r + v;}, 0);
 * returns 10
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {R} Result of evaluating f repeatedly across the values of the array.
 * @template T,S,R
 */
const reduce = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?
    function(arr, f, val, opt_obj) {
      asserts.assert(arr.length != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return Array.prototype.reduce.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      let rval = val;
      forEach(arr, function(val, index) {
        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);
      });
      return rval;
    };
exports.reduce = reduce;


/**
 * Passes every element of an array into a function and accumulates the result,
 * starting from the last element and working towards the first.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
 *
 * For example:
 * var a = ['a', 'b', 'c'];
 * reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
 * returns 'cba'
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, R, T, number, ?) : R} f The function to call for
 *     every element. This function
 *     takes 4 arguments (the function's previous result or the initial value,
 *     the value of the current array element, the current array index, and the
 *     array itself)
 *     function(previousValue, currentValue, index, array).
 * @param {?} val The initial value to pass into the function on the first call.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {R} Object returned as a result of evaluating f repeatedly across the
 *     values of the array.
 * @template T,S,R
 */
const reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?
    function(arr, f, val, opt_obj) {
      asserts.assert(arr.length != null);
      asserts.assert(f != null);
      if (opt_obj) {
        f = goog.bind(f, opt_obj);
      }
      return Array.prototype.reduceRight.call(arr, f, val);
    } :
    function(arr, f, val, opt_obj) {
      let rval = val;
      forEachRight(arr, function(val, index) {
        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);
      });
      return rval;
    };
exports.reduceRight = reduceRight;


/**
 * Calls f for each element of an array. If any call returns true, some()
 * returns true (without checking the remaining elements). If all calls
 * return false, some() returns false.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj  The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} true if any element passes the test.
 * @template T,S
 */
const some = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?
    function(arr, f, opt_obj) {
      asserts.assert(arr.length != null);

      return Array.prototype.some.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      const l = arr.length;  // must be fixed during loop... see docs
      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
      for (let i = 0; i < l; i++) {
        if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
          return true;
        }
      }
      return false;
    };
exports.some = some;


/**
 * Call f for each element of an array. If all calls return true, every()
 * returns true. If any call returns false, every() returns false and
 * does not continue to check the remaining elements.
 *
 * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
 *
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within f.
 * @return {boolean} false if any element fails the test.
 * @template T,S
 */
const every = goog.NATIVE_ARRAY_PROTOTYPES &&
        (ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?
    function(arr, f, opt_obj) {
      asserts.assert(arr.length != null);

      return Array.prototype.every.call(arr, f, opt_obj);
    } :
    function(arr, f, opt_obj) {
      const l = arr.length;  // must be fixed during loop... see docs
      const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
      for (let i = 0; i < l; i++) {
        if (i in arr2 && !f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
          return false;
        }
      }
      return true;
    };
exports.every = every;


/**
 * Counts the array elements that fulfill the predicate, i.e. for which the
 * callback function returns true. Skips holes in the array.
 *
 * @param {!IArrayLike<T>|string} arr Array or array like object
 *     over which to iterate.
 * @param {function(this: S, T, number, ?): boolean} f The function to call for
 *     every element. Takes 3 arguments (the element, the index and the array).
 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
 * @return {number} The number of the matching elements.
 * @template T,S
 */
function count(arr, f, opt_obj) {
  let count = 0;
  forEach(arr, function(element, index, arr) {
    if (f.call(/** @type {?} */ (opt_obj), element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
}
exports.count = count;


/**
 * Search an array for the first element that satisfies a given condition and
 * return that element.
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {T|null} The first array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
function find(arr, f, opt_obj) {
  const i = findIndex(arr, f, opt_obj);
  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];
}
exports.find = find;


/**
 * Search an array for the first element that satisfies a given condition and
 * return its index.
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
 *     every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the first array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
function findIndex(arr, f, opt_obj) {
  const l = arr.length;  // must be fixed during loop... see docs
  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
  for (let i = 0; i < l; i++) {
    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
}
exports.findIndex = findIndex;


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return that element.
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {T|null} The last array element that passes the test, or null if no
 *     element is found.
 * @template T,S
 */
function findRight(arr, f, opt_obj) {
  const i = findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : typeof arr === 'string' ? arr.charAt(i) : arr[i];
}
exports.findRight = findRight;


/**
 * Search an array (in reverse order) for the last element that satisfies a
 * given condition and return its index.
 * @param {IArrayLike<T>|string} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The index of the last array element that passes the test,
 *     or -1 if no element is found.
 * @template T,S
 */
function findIndexRight(arr, f, opt_obj) {
  const l = arr.length;  // must be fixed during loop... see docs
  const arr2 = (typeof arr === 'string') ? arr.split('') : arr;
  for (let i = l - 1; i >= 0; i--) {
    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
}
exports.findIndexRight = findIndexRight;


/**
 * Whether the array contains the given object.
 * @param {IArrayLike<?>|string} arr The array to test for the presence of the
 *     element.
 * @param {*} obj The object for which to test.
 * @return {boolean} true if obj is present.
 */
function contains(arr, obj) {
  return indexOf(arr, obj) >= 0;
}
exports.contains = contains;


/**
 * Whether the array is empty.
 * @param {IArrayLike<?>|string} arr The array to test.
 * @return {boolean} true if empty.
 */
function isEmpty(arr) {
  return arr.length == 0;
}
exports.isEmpty = isEmpty;


/**
 * Clears the array.
 * @param {IArrayLike<?>} arr Array or array like object to clear.
 */
function clear(arr) {
  // For non real arrays we don't have the magic length so we delete the
  // indices.
  if (!Array.isArray(arr)) {
    for (let i = arr.length - 1; i >= 0; i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
}
exports.clear = clear;


/**
 * Pushes an item into an array, if it's not already in the array.
 * @param {Array<T>} arr Array into which to insert the item.
 * @param {T} obj Value to add.
 * @template T
 */
function insert(arr, obj) {
  if (!contains(arr, obj)) {
    arr.push(obj);
  }
}
exports.insert = insert;


/**
 * Inserts an object at the given index of the array.
 * @param {IArrayLike<?>} arr The array to modify.
 * @param {*} obj The object to insert.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
function insertAt(arr, obj, opt_i) {
  splice(arr, opt_i, 0, obj);
}
exports.insertAt = insertAt;


/**
 * Inserts at the given index of the array, all elements of another array.
 * @param {IArrayLike<?>} arr The array to modify.
 * @param {IArrayLike<?>} elementsToAdd The array of elements to add.
 * @param {number=} opt_i The index at which to insert the object. If omitted,
 *      treated as 0. A negative index is counted from the end of the array.
 */
function insertArrayAt(arr, elementsToAdd, opt_i) {
  goog.partial(splice, arr, opt_i, 0).apply(null, elementsToAdd);
}
exports.insertArrayAt = insertArrayAt;


/**
 * Inserts an object into an array before a specified object.
 * @param {Array<T>} arr The array to modify.
 * @param {T} obj The object to insert.
 * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2
 *     is omitted or not found, obj is inserted at the end of the array.
 * @template T
 */
function insertBefore(arr, obj, opt_obj2) {
  let i;
  if (arguments.length == 2 || (i = indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    insertAt(arr, obj, i);
  }
}
exports.insertBefore = insertBefore;


/**
 * Removes the first occurrence of a particular value from an array.
 * @param {IArrayLike<T>} arr Array from which to remove
 *     value.
 * @param {T} obj Object to remove.
 * @return {boolean} True if an element was removed.
 * @template T
 */
function remove(arr, obj) {
  const i = indexOf(arr, obj);
  let rv;
  if ((rv = i >= 0)) {
    removeAt(arr, i);
  }
  return rv;
}
exports.remove = remove;


/**
 * Removes the last occurrence of a particular value from an array.
 * @param {!IArrayLike<T>} arr Array from which to remove value.
 * @param {T} obj Object to remove.
 * @return {boolean} True if an element was removed.
 * @template T
 */
function removeLast(arr, obj) {
  const i = lastIndexOf(arr, obj);
  if (i >= 0) {
    removeAt(arr, i);
    return true;
  }
  return false;
}
exports.removeLast = removeLast;


/**
 * Removes from an array the element at index i
 * @param {IArrayLike<?>} arr Array or array like object from which to
 *     remove value.
 * @param {number} i The index to remove.
 * @return {boolean} True if an element was removed.
 */
function removeAt(arr, i) {
  asserts.assert(arr.length != null);

  // use generic form of splice
  // splice returns the removed items and if successful the length of that
  // will be 1
  return Array.prototype.splice.call(arr, i, 1).length == 1;
}
exports.removeAt = removeAt;


/**
 * Removes the first value that satisfies the given condition.
 * @param {IArrayLike<T>} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {boolean} True if an element was removed.
 * @template T,S
 */
function removeIf(arr, f, opt_obj) {
  const i = findIndex(arr, f, opt_obj);
  if (i >= 0) {
    removeAt(arr, i);
    return true;
  }
  return false;
}
exports.removeIf = removeIf;


/**
 * Removes all values that satisfy the given condition.
 * @param {IArrayLike<T>} arr Array or array
 *     like object over which to iterate.
 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
 *     for every element. This function
 *     takes 3 arguments (the element, the index and the array) and should
 *     return a boolean.
 * @param {S=} opt_obj An optional "this" context for the function.
 * @return {number} The number of items removed
 * @template T,S
 */
function removeAllIf(arr, f, opt_obj) {
  let removedCount = 0;
  forEachRight(arr, function(val, index) {
    if (f.call(/** @type {?} */ (opt_obj), val, index, arr)) {
      if (removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
}
exports.removeAllIf = removeAllIf;


/**
 * Returns a new array that is the result of joining the arguments.  If arrays
 * are passed then their items are added, however, if non-arrays are passed they
 * will be added to the return array as is.
 *
 * Note that ArrayLike objects will be added as is, rather than having their
 * items added.
 *
 * concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
 * concat(0, [1, 2]) -> [0, 1, 2]
 * concat([1, 2], null) -> [1, 2, null]
 *
 * @param {...*} var_args Items to concatenate.  Arrays will have each item
 *     added, while primitives and objects will be added as is.
 * @return {!Array<?>} The new resultant array.
 */
function concat(var_args) {
  return Array.prototype.concat.apply([], arguments);
}
exports.concat = concat;


/**
 * Returns a new array that contains the contents of all the arrays passed.
 * @param {...!Array<T>} var_args
 * @return {!Array<T>}
 * @template T
 */
function join(var_args) {
  return Array.prototype.concat.apply([], arguments);
}
exports.join = join;


/**
 * Converts an object to an array.
 * @param {IArrayLike<T>|string} object  The object to convert to an
 *     array.
 * @return {!Array<T>} The object converted into an array. If object has a
 *     length property, every property indexed with a non-negative number
 *     less than length will be included in the result. If object does not
 *     have a length property, an empty array will be returned.
 * @template T
 */
function toArray(object) {
  const length = object.length;

  // If length is not a number the following is false. This case is kept for
  // backwards compatibility since there are callers that pass objects that are
  // not array like.
  if (length > 0) {
    const rv = new Array(length);
    for (let i = 0; i < length; i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
}
exports.toArray = toArray;


/**
 * Does a shallow copy of an array.
 * @param {IArrayLike<T>|string} arr  Array or array-like object to
 *     clone.
 * @return {!Array<T>} Clone of the input array.
 * @template T
 */
const clone = toArray;
exports.clone = clone;


/**
 * Extends an array with another array, element, or "array like" object.
 * This function operates 'in-place', it does not create a new Array.
 *
 * Example:
 * var a = [];
 * extend(a, [0, 1]);
 * a; // [0, 1]
 * extend(a, 2);
 * a; // [0, 1, 2]
 *
 * @param {Array<VALUE>} arr1  The array to modify.
 * @param {...(IArrayLike<VALUE>|VALUE)} var_args The elements or arrays of
 *     elements to add to arr1.
 * @template VALUE
 */
function extend(arr1, var_args) {
  for (let i = 1; i < arguments.length; i++) {
    const arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      const len1 = arr1.length || 0;
      const len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (let j = 0; j < len2; j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
}
exports.extend = extend;


/**
 * Adds or removes elements from an array. This is a generic version of Array
 * splice. This means that it might work on other objects similar to arrays,
 * such as the arguments object.
 *
 * @param {IArrayLike<T>} arr The array to modify.
 * @param {number|undefined} index The index at which to start changing the
 *     array. If not defined, treated as 0.
 * @param {number} howMany How many elements to remove (0 means no removal. A
 *     value below 0 is treated as zero and so is any other non number. Numbers
 *     are floored).
 * @param {...T} var_args Optional, additional elements to insert into the
 *     array.
 * @return {!Array<T>} the removed elements.
 * @template T
 */
function splice(arr, index, howMany, var_args) {
  asserts.assert(arr.length != null);

  return Array.prototype.splice.apply(arr, slice(arguments, 1));
}
exports.splice = splice;


/**
 * Returns a new array from a segment of an array. This is a generic version of
 * Array slice. This means that it might work on other objects similar to
 * arrays, such as the arguments object.
 *
 * @param {IArrayLike<T>|string} arr The array from
 * which to copy a segment.
 * @param {number} start The index of the first element to copy.
 * @param {number=} opt_end The index after the last element to copy.
 * @return {!Array<T>} A new array containing the specified segment of the
 *     original array.
 * @template T
 */
function slice(arr, start, opt_end) {
  asserts.assert(arr.length != null);

  // passing 1 arg to slice is not the same as passing 2 where the second is
  // null or undefined (in that case the second argument is treated as 0).
  // we could use slice on the arguments object and then use apply instead of
  // testing the length
  if (arguments.length <= 2) {
    return Array.prototype.slice.call(arr, start);
  } else {
    return Array.prototype.slice.call(arr, start, opt_end);
  }
}
exports.slice = slice;


/**
 * Removes all duplicates from an array (retaining only the first
 * occurrence of each array element).  This function modifies the
 * array in place and doesn't change the order of the non-duplicate items.
 *
 * For objects, duplicates are identified as having the same unique ID as
 * defined by {@link goog.getUid}.
 *
 * Alternatively you can specify a custom hash function that returns a unique
 * value for each item in the array it should consider unique.
 *
 * Runtime: N,
 * Worstcase space: 2N (no dupes)
 *
 * @param {IArrayLike<T>} arr The array from which to remove
 *     duplicates.
 * @param {Array=} opt_rv An optional array in which to return the results,
 *     instead of performing the removal inplace.  If specified, the original
 *     array will remain unchanged.
 * @param {function(T):string=} opt_hashFn An optional function to use to
 *     apply to every item in the array. This function should return a unique
 *     value for each item in the array it should consider unique.
 * @template T
 */
function removeDuplicates(arr, opt_rv, opt_hashFn) {
  const returnArray = opt_rv || arr;
  const defaultHashFn = function(item) {
    // Prefix each type with a single character representing the type to
    // prevent conflicting keys (e.g. true and 'true').
    return goog.isObject(item) ? 'o' + goog.getUid(item) :
                                 (typeof item).charAt(0) + item;
  };
  const hashFn = opt_hashFn || defaultHashFn;

  let cursorInsert = 0;
  let cursorRead = 0;
  const seen = {};

  while (cursorRead < arr.length) {
    const current = arr[cursorRead++];
    const key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
}
exports.removeDuplicates = removeDuplicates;


/**
 * Searches the specified array for the specified target using the binary
 * search algorithm.  If no opt_compareFn is specified, elements are compared
 * using <code>defaultCompare</code>, which compares the elements
 * using the built in < and > operators.  This will produce the expected
 * behavior for homogeneous arrays of String(s) and Number(s). The array
 * specified <b>must</b> be sorted in ascending order (as defined by the
 * comparison function).  If the array is not sorted, results are undefined.
 * If the array contains multiple instances of the specified target value, the
 * left-most instance will be found.
 *
 * Runtime: O(log n)
 *
 * @param {IArrayLike<VALUE>} arr The array to be searched.
 * @param {TARGET} target The sought value.
 * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, the target value and an element from your array, and return a
 *     negative number, zero, or a positive number depending on whether the
 *     first argument is less than, equal to, or greater than the second.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @template TARGET, VALUE
 */
function binarySearch(arr, target, opt_compareFn) {
  return binarySearch_(
      arr, opt_compareFn || defaultCompare, false /* isEvaluator */, target);
}
exports.binarySearch = binarySearch;


/**
 * Selects an index in the specified array using the binary search algorithm.
 * The evaluator receives an element and determines whether the desired index
 * is before, at, or after it.  The evaluator must be consistent (formally,
 * map(map(arr, evaluator, opt_obj), goog.math.sign)
 * must be monotonically non-increasing).
 *
 * Runtime: O(log n)
 *
 * @param {IArrayLike<VALUE>} arr The array to be searched.
 * @param {function(this:THIS, VALUE, number, ?): number} evaluator
 *     Evaluator function that receives 3 arguments (the element, the index and
 *     the array). Should return a negative number, zero, or a positive number
 *     depending on whether the desired index is before, at, or after the
 *     element passed to it.
 * @param {THIS=} opt_obj The object to be used as the value of 'this'
 *     within evaluator.
 * @return {number} Index of the leftmost element matched by the evaluator, if
 *     such exists; otherwise (-(insertion point) - 1). The insertion point is
 *     the index of the first element for which the evaluator returns negative,
 *     or arr.length if no such element exists. The return value is non-negative
 *     iff a match is found.
 * @template THIS, VALUE
 */
function binarySelect(arr, evaluator, opt_obj) {
  return binarySearch_(
      arr, evaluator, true /* isEvaluator */, undefined /* opt_target */,
      opt_obj);
}
exports.binarySelect = binarySelect;


/**
 * Implementation of a binary search algorithm which knows how to use both
 * comparison functions and evaluators. If an evaluator is provided, will call
 * the evaluator with the given optional data object, conforming to the
 * interface defined in binarySelect. Otherwise, if a comparison function is
 * provided, will call the comparison function against the given data object.
 *
 * This implementation purposefully does not use goog.bind or goog.partial for
 * performance reasons.
 *
 * Runtime: O(log n)
 *
 * @param {IArrayLike<?>} arr The array to be searched.
 * @param {function(?, ?, ?): number | function(?, ?): number} compareFn
 *     Either an evaluator or a comparison function, as defined by binarySearch
 *     and binarySelect above.
 * @param {boolean} isEvaluator Whether the function is an evaluator or a
 *     comparison function.
 * @param {?=} opt_target If the function is a comparison function, then
 *     this is the target to binary search for.
 * @param {Object=} opt_selfObj If the function is an evaluator, this is an
 *     optional this object for the evaluator.
 * @return {number} Lowest index of the target value if found, otherwise
 *     (-(insertion point) - 1). The insertion point is where the value should
 *     be inserted into arr to preserve the sorted property.  Return value >= 0
 *     iff target is found.
 * @private
 */
function binarySearch_(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  let left = 0;            // inclusive
  let right = arr.length;  // exclusive
  let found;
  while (left < right) {
    const middle = left + ((right - left) >>> 1);
    let compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      // NOTE(dimvar): To avoid this cast, we'd have to use function overloading
      // for the type of binarySearch_, which the type system can't express yet.
      compareResult = /** @type {function(?, ?): number} */ (compareFn)(
          opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      // We are looking for the lowest index so we can't return immediately.
      found = !compareResult;
    }
  }
  // left is the index if found, or the insertion point otherwise.
  // Avoiding bitwise not operator, as that causes a loss in precision for array
  // indexes outside the bounds of a 32-bit signed integer.  Array indexes have
  // a maximum value of 2^32-2 https://tc39.es/ecma262/#array-index
  return found ? left : -left - 1;
}


/**
 * Sorts the specified array into ascending order.  If no opt_compareFn is
 * specified, elements are compared using
 * <code>defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s), unlike the native sort,
 * but will give unpredictable results for heterogeneous lists of strings and
 * numbers with different numbers of digits.
 *
 * This sort is not guaranteed to be stable.
 *
 * Runtime: Same as `Array.prototype.sort`
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {?function(T,T):number=} opt_compareFn Optional comparison
 *     function by which the
 *     array is to be ordered. Should take 2 arguments to compare, and return a
 *     negative number, zero, or a positive number depending on whether the
 *     first argument is less than, equal to, or greater than the second.
 * @template T
 */
function sort(arr, opt_compareFn) {
  // TODO(arv): Update type annotation since null is not accepted.
  arr.sort(opt_compareFn || defaultCompare);
}
exports.sort = sort;


/**
 * Sorts the specified array into ascending order in a stable way.  If no
 * opt_compareFn is specified, elements are compared using
 * <code>defaultCompare</code>, which compares the elements using
 * the built in < and > operators.  This will produce the expected behavior
 * for homogeneous arrays of String(s) and Number(s).
 *
 * Runtime: Same as `Array.prototype.sort`, plus an additional
 * O(n) overhead of copying the array twice.
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {?function(T, T): number=} opt_compareFn Optional comparison function
 *     by which the array is to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T
 */
function stableSort(arr, opt_compareFn) {
  const compArr = new Array(arr.length);
  for (let i = 0; i < arr.length; i++) {
    compArr[i] = {index: i, value: arr[i]};
  }
  const valueCompareFn = opt_compareFn || defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  sort(compArr, stableCompareFn);
  for (let i = 0; i < arr.length; i++) {
    arr[i] = compArr[i].value;
  }
}
exports.stableSort = stableSort;


/**
 * Sort the specified array into ascending order based on item keys
 * returned by the specified key function.
 * If no opt_compareFn is specified, the keys are compared in ascending order
 * using <code>defaultCompare</code>.
 *
 * Runtime: O(S(f(n)), where S is runtime of <code>sort</code>
 * and f(n) is runtime of the key function.
 *
 * @param {Array<T>} arr The array to be sorted.
 * @param {function(T): K} keyFn Function taking array element and returning
 *     a key used for sorting this element.
 * @param {?function(K, K): number=} opt_compareFn Optional comparison function
 *     by which the keys are to be ordered. Should take 2 arguments to compare,
 *     and return a negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template T,K
 */
function sortByKey(arr, keyFn, opt_compareFn) {
  const keyCompareFn = opt_compareFn || defaultCompare;
  sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
}
exports.sortByKey = sortByKey;


/**
 * Sorts an array of objects by the specified object key and compare
 * function. If no compare function is provided, the key values are
 * compared in ascending order using <code>defaultCompare</code>.
 * This won't work for keys that get renamed by the compiler. So use
 * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
 * @param {Array<Object>} arr An array of objects to sort.
 * @param {string} key The object key to sort by.
 * @param {Function=} opt_compareFn The function to use to compare key
 *     values.
 */
function sortObjectsByKey(arr, key, opt_compareFn) {
  sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
}
exports.sortObjectsByKey = sortObjectsByKey;


/**
 * Tells if the array is sorted.
 * @param {!IArrayLike<T>} arr The array.
 * @param {?function(T,T):number=} opt_compareFn Function to compare the
 *     array elements.
 *     Should take 2 arguments to compare, and return a negative number, zero,
 *     or a positive number depending on whether the first argument is less
 *     than, equal to, or greater than the second.
 * @param {boolean=} opt_strict If true no equal elements are allowed.
 * @return {boolean} Whether the array is sorted.
 * @template T
 */
function isSorted(arr, opt_compareFn, opt_strict) {
  const compare = opt_compareFn || defaultCompare;
  for (let i = 1; i < arr.length; i++) {
    const compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
}
exports.isSorted = isSorted;


/**
 * Compares two arrays for equality. Two arrays are considered equal if they
 * have the same length and their corresponding elements are equal according to
 * the comparison function.
 *
 * @param {IArrayLike<A>} arr1 The first array to compare.
 * @param {IArrayLike<B>} arr2 The second array to compare.
 * @param {?function(A,B):boolean=} opt_equalsFn Optional comparison function.
 *     Should take 2 arguments to compare, and return true if the arguments
 *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which
 *     compares the elements using the built-in '===' operator.
 * @return {boolean} Whether the two arrays are equal.
 * @template A
 * @template B
 */
function equals(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||
      arr1.length != arr2.length) {
    return false;
  }
  const l = arr1.length;
  const equalsFn = opt_equalsFn || defaultCompareEquality;
  for (let i = 0; i < l; i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
}
exports.equals = equals;


/**
 * 3-way array compare function.
 * @param {!IArrayLike<VALUE>} arr1 The first array to
 *     compare.
 * @param {!IArrayLike<VALUE>} arr2 The second array to
 *     compare.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is to be ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {number} Negative number, zero, or a positive number depending on
 *     whether the first argument is less than, equal to, or greater than the
 *     second.
 * @template VALUE
 */
function compare3(arr1, arr2, opt_compareFn) {
  const compare = opt_compareFn || defaultCompare;
  const l = Math.min(arr1.length, arr2.length);
  for (let i = 0; i < l; i++) {
    const result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return defaultCompare(arr1.length, arr2.length);
}
exports.compare3 = compare3;


/**
 * Compares its two arguments for order, using the built in < and >
 * operators.
 * @param {VALUE} a The first object to be compared.
 * @param {VALUE} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is less than, equal to, or greater than the second,
 *     respectively.
 * @template VALUE
 */
function defaultCompare(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}
exports.defaultCompare = defaultCompare;


/**
 * Compares its two arguments for inverse order, using the built in < and >
 * operators.
 * @param {VALUE} a The first object to be compared.
 * @param {VALUE} b The second object to be compared.
 * @return {number} A negative number, zero, or a positive number as the first
 *     argument is greater than, equal to, or less than the second,
 *     respectively.
 * @template VALUE
 */
function inverseDefaultCompare(a, b) {
  return -defaultCompare(a, b);
}
exports.inverseDefaultCompare = inverseDefaultCompare;


/**
 * Compares its two arguments for equality, using the built in === operator.
 * @param {*} a The first object to compare.
 * @param {*} b The second object to compare.
 * @return {boolean} True if the two arguments are equal, false otherwise.
 */
function defaultCompareEquality(a, b) {
  return a === b;
}
exports.defaultCompareEquality = defaultCompareEquality;


/**
 * Inserts a value into a sorted array. The array is not modified if the
 * value is already present.
 * @param {IArrayLike<VALUE>} array The array to modify.
 * @param {VALUE} value The object to insert.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was inserted.
 * @template VALUE
 */
function binaryInsert(array, value, opt_compareFn) {
  const index = binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
}
exports.binaryInsert = binaryInsert;


/**
 * Removes a value from a sorted array.
 * @param {!IArrayLike<VALUE>} array The array to modify.
 * @param {VALUE} value The object to remove.
 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
 *     function by which the array is ordered. Should take 2 arguments to
 *     compare, and return a negative number, zero, or a positive number
 *     depending on whether the first argument is less than, equal to, or
 *     greater than the second.
 * @return {boolean} True if an element was removed.
 * @template VALUE
 */
function binaryRemove(array, value, opt_compareFn) {
  const index = binarySearch(array, value, opt_compareFn);
  return (index >= 0) ? removeAt(array, index) : false;
}
exports.binaryRemove = binaryRemove;


/**
 * Splits an array into disjoint buckets according to a splitting function.
 * @param {IArrayLike<T>} array The array.
 * @param {function(this:S, T, number, !IArrayLike<T>):?} sorter Function to
 *     call for every element.  This takes 3 arguments (the element, the index
 *     and the array) and must return a valid object key (a string, number,
 *     etc), or undefined, if that object should not be placed in a bucket.
 * @param {S=} opt_obj The object to be used as the value of 'this' within
 *     sorter.
 * @return {!Object<!Array<T>>} An object, with keys being all of the unique
 *     return values of sorter, and values being arrays containing the items for
 *     which the splitter returned that key.
 * @template T,S
 */
function bucket(array, sorter, opt_obj) {
  const buckets = {};

  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    const key = sorter.call(/** @type {?} */ (opt_obj), value, i, array);
    if (key !== undefined) {
      // Push the value to the right bucket, creating it if necessary.
      const bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }

  return buckets;
}
exports.bucket = bucket;


/**
 * Splits an array into disjoint buckets according to a splitting function.
 * @param {!IArrayLike<V>} array The array.
 * @param {function(V, number, !IArrayLike<V>):(K|undefined)} sorter Function to
 *     call for every element.  This takes 3 arguments (the element, the index,
 *     and the array) and must return a value to use as a key, or undefined, if
 *     that object should not be placed in a bucket.
 * @return {!Map<K, !Array<V>>} A map, with keys being all of the unique
 *     return values of sorter, and values being arrays containing the items for
 *     which the splitter returned that key.
 * @template K,V
 */
function bucketToMap(array, sorter) {
  const /** !Map<K, !Array<V>> */ buckets = new Map();

  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    const key = sorter(value, i, array);
    if (key !== undefined) {
      // Push the value to the right bucket, creating it if necessary.
      let bucket = buckets.get(key);
      if (!bucket) {
        bucket = [];
        buckets.set(key, bucket);
      }
      bucket.push(value);
    }
  }

  return buckets;
}
exports.bucketToMap = bucketToMap;


/**
 * Creates a new object built from the provided array and the key-generation
 * function.
 * @param {IArrayLike<T>} arr Array or array like object over
 *     which to iterate whose elements will be the values in the new object.
 * @param {?function(this:S, T, number, ?) : string} keyFunc The function to
 *     call for every element. This function takes 3 arguments (the element, the
 *     index and the array) and should return a string that will be used as the
 *     key for the element in the new object. If the function returns the same
 *     key for more than one element, the value for that key is
 *     implementation-defined.
 * @param {S=} opt_obj The object to be used as the value of 'this'
 *     within keyFunc.
 * @return {!Object<T>} The new object.
 * @template T,S
 */
function toObject(arr, keyFunc, opt_obj) {
  const ret = {};
  forEach(arr, function(element, index) {
    ret[keyFunc.call(/** @type {?} */ (opt_obj), element, index, arr)] =
        element;
  });
  return ret;
}
exports.toObject = toObject;


/**
 * Creates a new ES6 Map built from the provided array and the key-generation
 * function.
 * @param {!IArrayLike<V>} arr Array or array like object over which to iterate
 *     whose elements will be the values in the new object.
 * @param {?function(V, number, ?) : K} keyFunc The function to call for every
 *     element. This function takes 3 arguments (the element, the index, and the
 *     array) and should return a value that will be used as the key for the
 *     element in the new object. If the function returns the same key for more
 *     than one element, the value for that key is implementation-defined.
 * @return {!Map<K, V>} The new map.
 * @template K,V
 */
function toMap(arr, keyFunc) {
  const /** !Map<K, V> */ map = new Map();

  for (let i = 0; i < arr.length; i++) {
    const element = arr[i];
    map.set(keyFunc(element, i, arr), element);
  }

  return map;
}
exports.toMap = toMap;


/**
 * Creates a range of numbers in an arithmetic progression.
 *
 * Range takes 1, 2, or 3 arguments:
 * <pre>
 * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
 * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
 * range(-2, -5, -1) produces [-2, -3, -4]
 * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
 * </pre>
 *
 * @param {number} startOrEnd The starting value of the range if an end argument
 *     is provided. Otherwise, the start value is 0, and this is the end value.
 * @param {number=} opt_end The optional end value of the range.
 * @param {number=} opt_step The step size between range values. Defaults to 1
 *     if opt_step is undefined or 0.
 * @return {!Array<number>} An array of numbers for the requested range. May be
 *     an empty array if adding the step would not converge toward the end
 *     value.
 */
function range(startOrEnd, opt_end, opt_step) {
  const array = [];
  let start = 0;
  let end = startOrEnd;
  const step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }

  if (step * (end - start) < 0) {
    // Sign mismatch: start + step will never reach the end value.
    return [];
  }

  if (step > 0) {
    for (let i = start; i < end; i += step) {
      array.push(i);
    }
  } else {
    for (let i = start; i > end; i += step) {
      array.push(i);
    }
  }
  return array;
}
exports.range = range;


/**
 * Returns an array consisting of the given value repeated N times.
 *
 * @param {VALUE} value The value to repeat.
 * @param {number} n The repeat count.
 * @return {!Array<VALUE>} An array with the repeated value.
 * @template VALUE
 */
function repeat(value, n) {
  const array = [];
  for (let i = 0; i < n; i++) {
    array[i] = value;
  }
  return array;
}
exports.repeat = repeat;


/**
 * Returns an array consisting of every argument with all arrays
 * expanded in-place recursively.
 *
 * @param {...*} var_args The values to flatten.
 * @return {!Array<?>} An array containing the flattened values.
 */
function flatten(var_args) {
  const CHUNK_SIZE = 8192;

  const result = [];
  for (let i = 0; i < arguments.length; i++) {
    const element = arguments[i];
    if (Array.isArray(element)) {
      for (let c = 0; c < element.length; c += CHUNK_SIZE) {
        const chunk = slice(element, c, c + CHUNK_SIZE);
        const recurseResult = flatten.apply(null, chunk);
        for (let r = 0; r < recurseResult.length; r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
}
exports.flatten = flatten;


/**
 * Rotates an array in-place. After calling this method, the element at
 * index i will be the element previously at index (i - n) %
 * array.length, for all values of i between 0 and array.length - 1,
 * inclusive.
 *
 * For example, suppose list comprises [t, a, n, k, s]. After invoking
 * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].
 *
 * @param {!Array<T>} array The array to rotate.
 * @param {number} n The amount to rotate.
 * @return {!Array<T>} The array.
 * @template T
 */
function rotate(array, n) {
  asserts.assert(array.length != null);

  if (array.length) {
    n %= array.length;
    if (n > 0) {
      Array.prototype.unshift.apply(array, array.splice(-n, n));
    } else if (n < 0) {
      Array.prototype.push.apply(array, array.splice(0, -n));
    }
  }
  return array;
}
exports.rotate = rotate;


/**
 * Moves one item of an array to a new position keeping the order of the rest
 * of the items. Example use case: keeping a list of JavaScript objects
 * synchronized with the corresponding list of DOM elements after one of the
 * elements has been dragged to a new position.
 * @param {!IArrayLike<?>} arr The array to modify.
 * @param {number} fromIndex Index of the item to move between 0 and
 *     `arr.length - 1`.
 * @param {number} toIndex Target index between 0 and `arr.length - 1`.
 */
function moveItem(arr, fromIndex, toIndex) {
  asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  asserts.assert(toIndex >= 0 && toIndex < arr.length);
  // Remove 1 item at fromIndex.
  const removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
  // Insert the removed item at toIndex.
  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
  // We don't use goog.array.insertAt and goog.array.removeAt, because they're
  // significantly slower than splice.
}
exports.moveItem = moveItem;


/**
 * Creates a new array for which the element at position i is an array of the
 * ith element of the provided arrays.  The returned array will only be as long
 * as the shortest array provided; additional values are ignored.  For example,
 * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].
 *
 * This is similar to the zip() function in Python.  See {@link
 * http://docs.python.org/library/functions.html#zip}
 *
 * @param {...!IArrayLike<?>} var_args Arrays to be combined.
 * @return {!Array<!Array<?>>} A new array of arrays created from
 *     provided arrays.
 */
function zip(var_args) {
  if (!arguments.length) {
    return [];
  }
  const result = [];
  let minLen = arguments[0].length;
  for (let i = 1; i < arguments.length; i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (let i = 0; i < minLen; i++) {
    const value = [];
    for (let j = 0; j < arguments.length; j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
}
exports.zip = zip;


/**
 * Shuffles the values in the specified array using the Fisher-Yates in-place
 * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()
 * and so resets the state of that random number generator. Similarly, may reset
 * the state of any other specified random number generator.
 *
 * Runtime: O(n)
 *
 * @param {!Array<?>} arr The array to be shuffled.
 * @param {function():number=} opt_randFn Optional random function to use for
 *     shuffling.
 *     Takes no arguments, and returns a random number on the interval [0, 1).
 *     Defaults to Math.random() using JavaScript's built-in Math library.
 */
function shuffle(arr, opt_randFn) {
  const randFn = opt_randFn || Math.random;

  for (let i = arr.length - 1; i > 0; i--) {
    // Choose a random array index in [0, i] (inclusive with i).
    const j = Math.floor(randFn() * (i + 1));

    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
}
exports.shuffle = shuffle;


/**
 * Returns a new array of elements from arr, based on the indexes of elements
 * provided by index_arr. For example, the result of index copying
 * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].
 *
 * @param {!IArrayLike<T>} arr The array to get a indexed copy from.
 * @param {!IArrayLike<number>} index_arr An array of indexes to get from arr.
 * @return {!Array<T>} A new array of elements from arr in index_arr order.
 * @template T
 */
function copyByIndex(arr, index_arr) {
  const result = [];
  forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
}
exports.copyByIndex = copyByIndex;


/**
 * Maps each element of the input array into zero or more elements of the output
 * array.
 *
 * @param {!IArrayLike<VALUE>|string} arr Array or array like object
 *     over which to iterate.
 * @param {function(this:THIS, VALUE, number, ?): !Array<RESULT>} f The function
 *     to call for every element. This function takes 3 arguments (the element,
 *     the index and the array) and should return an array. The result will be
 *     used to extend a new array.
 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
 * @return {!Array<RESULT>} a new array with the concatenation of all arrays
 *     returned from f.
 * @template THIS, VALUE, RESULT
 */
function concatMap(arr, f, opt_obj) {
  return concat.apply([], map(arr, f, opt_obj));
}
exports.concatMap = concatMap;

;return exports;});

//third_party/javascript/closure/debug/errorcontext.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Provides methods dealing with context on error objects.
 */

goog.provide('goog.debug.errorcontext');


/**
 * Adds key-value context to the error.
 * @param {!Error} err The error to add context to.
 * @param {string} contextKey Key for the context to be added.
 * @param {string} contextValue Value for the context to be added.
 */
goog.debug.errorcontext.addErrorContext = function(
    err, contextKey, contextValue) {
  'use strict';
  if (!err[goog.debug.errorcontext.CONTEXT_KEY_]) {
    err[goog.debug.errorcontext.CONTEXT_KEY_] = {};
  }
  err[goog.debug.errorcontext.CONTEXT_KEY_][contextKey] = contextValue;
};


/**
 * @param {!Error} err The error to get context from.
 * @return {!Object<string, string>} The context of the provided error.
 */
goog.debug.errorcontext.getErrorContext = function(err) {
  'use strict';
  return err[goog.debug.errorcontext.CONTEXT_KEY_] || {};
};


// TODO(aaronsn): convert this to a Symbol once goog.debug.ErrorReporter is
// able to use ES6.
/** @private @const {string} */
goog.debug.errorcontext.CONTEXT_KEY_ = '__closure__error__context__984382';

//third_party/javascript/closure/debug/debug.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Logging and debugging utilities.
 *
 * @see ../demos/debug.html
 */

goog.provide('goog.debug');

goog.require('goog.array');
goog.require('goog.debug.errorcontext');


/** @define {boolean} Whether logging should be enabled. */
goog.debug.LOGGING_ENABLED =
    goog.define('goog.debug.LOGGING_ENABLED', goog.DEBUG);


/** @define {boolean} Whether to force "sloppy" stack building. */
goog.debug.FORCE_SLOPPY_STACKS =
    goog.define('goog.debug.FORCE_SLOPPY_STACKS', false);


/**
 * @define {boolean} TODO(b/159435805): Remove this hack once bug is resolved.
 */
goog.debug.CHECK_FOR_THROWN_EVENT =
    goog.define('goog.debug.CHECK_FOR_THROWN_EVENT', false);



/**
 * Catches onerror events fired by windows and similar objects.
 * @param {function(Object)} logFunc The function to call with the error
 *    information.
 * @param {boolean=} opt_cancel Whether to stop the error from reaching the
 *    browser.
 * @param {Object=} opt_target Object that fires onerror events.
 * @suppress {strictMissingProperties} onerror is not defined as a property
 *    on Object.
 */
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  'use strict';
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;

  /**
   * New onerror handler for this target. This onerror handler follows the spec
   * according to
   * http://www.whatwg.org/specs/web-apps/current-work/#runtime-script-errors
   * The spec was changed in August 2013 to support receiving column information
   * and an error object for all scripts on the same origin or cross origin
   * scripts with the proper headers. See
   * https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror
   *
   * @param {string} message The error message. For cross-origin errors, this
   *     will be scrubbed to just "Script error.". For new browsers that have
   *     updated to follow the latest spec, errors that come from origins that
   *     have proper cross origin headers will not be scrubbed.
   * @param {string} url The URL of the script that caused the error. The URL
   *     will be scrubbed to "" for cross origin scripts unless the script has
   *     proper cross origin headers and the browser has updated to the latest
   *     spec.
   * @param {number} line The line number in the script that the error
   *     occurred on.
   * @param {number=} opt_col The optional column number that the error
   *     occurred on. Only browsers that have updated to the latest spec will
   *     include this.
   * @param {Error=} opt_error The optional actual error object for this
   *     error that should include the stack. Only browsers that have updated
   *     to the latest spec will inlude this parameter.
   * @return {boolean} Whether to prevent the error from reaching the browser.
   */
  target.onerror = function(message, url, line, opt_col, opt_error) {
    'use strict';
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({
      message: message,
      fileName: url,
      line: line,
      lineNumber: line,
      col: opt_col,
      error: opt_error
    });
    return retVal;
  };
};


/**
 * Creates a string representing an object and all its properties.
 * @param {Object|null|undefined} obj Object to expose.
 * @param {boolean=} opt_showFn Show the functions as well as the properties,
 *     default is false.
 * @return {string} The string representation of `obj`.
 */
goog.debug.expose = function(obj, opt_showFn) {
  'use strict';
  if (typeof obj == 'undefined') {
    return 'undefined';
  }
  if (obj == null) {
    return 'NULL';
  }
  var str = [];

  for (var x in obj) {
    if (!opt_showFn && typeof obj[x] === 'function') {
      continue;
    }
    var s = x + ' = ';

    try {
      s += obj[x];
    } catch (e) {
      s += '*** ' + e + ' ***';
    }
    str.push(s);
  }
  return str.join('\n');
};


/**
 * Creates a string representing a given primitive or object, and for an
 * object, all its properties and nested objects. NOTE: The output will include
 * Uids on all objects that were exposed. Any added Uids will be removed before
 * returning.
 * @param {*} obj Object to expose.
 * @param {boolean=} opt_showFn Also show properties that are functions (by
 *     default, functions are omitted).
 * @return {string} A string representation of `obj`.
 */
goog.debug.deepExpose = function(obj, opt_showFn) {
  'use strict';
  var str = [];

  // Track any objects where deepExpose added a Uid, so they can be cleaned up
  // before return. We do this globally, rather than only on ancestors so that
  // if the same object appears in the output, you can see it.
  var uidsToCleanup = [];
  var ancestorUids = {};

  var helper = function(obj, space) {
    'use strict';
    var nestspace = space + '  ';

    var indentMultiline = function(str) {
      'use strict';
      return str.replace(/\n/g, '\n' + space);
    };


    try {
      if (obj === undefined) {
        str.push('undefined');
      } else if (obj === null) {
        str.push('NULL');
      } else if (typeof obj === 'string') {
        str.push('"' + indentMultiline(obj) + '"');
      } else if (typeof obj === 'function') {
        str.push(indentMultiline(String(obj)));
      } else if (goog.isObject(obj)) {
        // Add a Uid if needed. The struct calls implicitly adds them.
        if (!goog.hasUid(obj)) {
          uidsToCleanup.push(obj);
        }
        var uid = goog.getUid(obj);
        if (ancestorUids[uid]) {
          str.push('*** reference loop detected (id=' + uid + ') ***');
        } else {
          ancestorUids[uid] = true;
          str.push('{');
          for (var x in obj) {
            if (!opt_showFn && typeof obj[x] === 'function') {
              continue;
            }
            str.push('\n');
            str.push(nestspace);
            str.push(x + ' = ');
            helper(obj[x], nestspace);
          }
          str.push('\n' + space + '}');
          delete ancestorUids[uid];
        }
      } else {
        str.push(obj);
      }
    } catch (e) {
      str.push('*** ' + e + ' ***');
    }
  };

  helper(obj, '');

  // Cleanup any Uids that were added by the deepExpose.
  for (var i = 0; i < uidsToCleanup.length; i++) {
    goog.removeUid(uidsToCleanup[i]);
  }

  return str.join('');
};


/**
 * Recursively outputs a nested array as a string.
 * @param {Array<?>} arr The array.
 * @return {string} String representing nested array.
 */
goog.debug.exposeArray = function(arr) {
  'use strict';
  var str = [];
  for (var i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return '[ ' + str.join(', ') + ' ]';
};


/**
 * Normalizes the error/exception object between browsers.
 * @param {*} err Raw error object.
 * @return {{
 *    message: (?|undefined),
 *    name: (?|undefined),
 *    lineNumber: (?|undefined),
 *    fileName: (?|undefined),
 *    stack: (?|undefined)
 * }} Representation of err as an Object. It will never return err.
 * @suppress {strictMissingProperties} properties not defined on err
 */
goog.debug.normalizeErrorObject = function(err) {
  'use strict';
  var href = goog.getObjectByName('window.location.href');
  if (err == null) {
    err = 'Unknown Error of type "null/undefined"';
  }
  if (typeof err === 'string') {
    return {
      'message': err,
      'name': 'Unknown error',
      'lineNumber': 'Not available',
      'fileName': href,
      'stack': 'Not available'
    };
  }

  var lineNumber, fileName;
  var threwError = false;

  try {
    lineNumber = err.lineNumber || err.line || 'Not available';
  } catch (e) {
    // Firefox 2 sometimes throws an error when accessing 'lineNumber':
    // Message: Permission denied to get property UnnamedClass.lineNumber
    lineNumber = 'Not available';
    threwError = true;
  }

  try {
    fileName = err.fileName || err.filename || err.sourceURL ||
        // $googDebugFname may be set before a call to eval to set the filename
        // that the eval is supposed to present.
        goog.global['$googDebugFname'] || href;
  } catch (e) {
    // Firefox 2 may also throw an error when accessing 'filename'.
    fileName = 'Not available';
    threwError = true;
  }

  var stack = goog.debug.serializeErrorStack_(err);

  // The IE Error object contains only the name and the message.
  // The Safari Error object uses the line and sourceURL fields.
  if (threwError || !err.lineNumber || !err.fileName || !err.stack ||
      !err.message || !err.name) {
    var message = err.message;
    if (message == null) {
      if (err.constructor && err.constructor instanceof Function) {
        var ctorName = err.constructor.name ?
            err.constructor.name :
            goog.debug.getFunctionName(err.constructor);
        message = 'Unknown Error of type "' + ctorName + '"';
        // TODO(b/159435805): Remove this hack once bug is resolved.
        if (goog.debug.CHECK_FOR_THROWN_EVENT && ctorName == 'Event') {
          try {
            message = message + ' with Event.type "' + (err.type || '') + '"';
          } catch (e) {
            // Just give up on getting more information out of the error object.
          }
        }
      } else {
        message = 'Unknown Error of unknown type';
      }

      // Avoid TypeError since toString could be missing from the instance
      // (e.g. if created Object.create(null)).
      if (typeof err.toString === 'function' &&
          Object.prototype.toString !== err.toString) {
        message += ': ' + err.toString();
      }
    }
    return {
      'message': message,
      'name': err.name || 'UnknownError',
      'lineNumber': lineNumber,
      'fileName': fileName,
      'stack': stack || 'Not available'
    };
  }
  // Standards error object
  // Typed !Object. Should be a subtype of the return type, but it's not.
  err.stack = stack;

  // Return non-standard error to allow for consistent result (eg. enumerable).
  return {
    'message': err.message,
    'name': err.name,
    'lineNumber': err.lineNumber,
    'fileName': err.fileName,
    'stack': err.stack
  };
};


/**
 * Serialize stack by including the cause chain of the exception if it exists.
 *
 * MOE:begin_intracomment_strip
 * When an OO language is transpiled to JavaScript, it might have the concept of
 * exception chaining, which we emulate here. See go/exception-cause-reporting
 * for more information.
 * MOE:end_intracomment_strip
 *
 * @param {*} e an exception that may have a cause
 * @param {!Object=} seen set of cause that have already been serialized
 * @return {string}
 * @private
 * @suppress {missingProperties} properties not defined on cause and e
 */
goog.debug.serializeErrorStack_ = function(e, seen) {
  'use strict';
  if (!seen) {
    seen = {};
  }
  seen[goog.debug.serializeErrorAsKey_(e)] = true;

  var stack = e['stack'] || '';

  // Add cause if exists.
  var cause = e.cause;
  if (cause && !seen[goog.debug.serializeErrorAsKey_(cause)]) {
    stack += '\nCaused by: ';
    // Some browsers like Chrome add the error message as the first frame of the
    // stack, In this case we don't need to add it. Note: we don't use
    // String.startsWith method because it might have to be polyfilled.
    if (!cause.stack || cause.stack.indexOf(cause.toString()) != 0) {
      stack += (typeof cause === 'string') ? cause : cause.message + '\n';
    }
    stack += goog.debug.serializeErrorStack_(cause, seen);
  }

  return stack;
};

/**
 * Serialize an error to a string key.
 * @param {*} e an exception
 * @return {string}
 * @private
 */
goog.debug.serializeErrorAsKey_ = function(e) {
  'use strict';
  var keyPrefix = '';

  if (typeof e.toString === 'function') {
    keyPrefix = '' + e;
  }

  return keyPrefix + e['stack'];
};


/**
 * Converts an object to an Error using the object's toString if it's not
 * already an Error, adds a stacktrace if there isn't one, and optionally adds
 * an extra message.
 * @param {*} err The original thrown error, object, or string.
 * @param {string=} opt_message  optional additional message to add to the
 *     error.
 * @return {!Error} If err is an Error, it is enhanced and returned. Otherwise,
 *     it is converted to an Error which is enhanced and returned.
 */
goog.debug.enhanceError = function(err, opt_message) {
  'use strict';
  var error;
  if (!(err instanceof Error)) {
    error = Error(err);
    if (Error.captureStackTrace) {
      // Trim this function off the call stack, if we can.
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }

  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    // find the first unoccupied 'messageX' property
    var x = 0;
    while (error['message' + x]) {
      ++x;
    }
    error['message' + x] = String(opt_message);
  }
  return error;
};


/**
 * Converts an object to an Error using the object's toString if it's not
 * already an Error, adds a stacktrace if there isn't one, and optionally adds
 * context to the Error, which is reported by the closure error reporter.
 * @param {*} err The original thrown error, object, or string.
 * @param {!Object<string, string>=} opt_context Key-value context to add to the
 *     Error.
 * @return {!Error} If err is an Error, it is enhanced and returned. Otherwise,
 *     it is converted to an Error which is enhanced and returned.
 */
goog.debug.enhanceErrorWithContext = function(err, opt_context) {
  'use strict';
  var error = goog.debug.enhanceError(err);
  if (opt_context) {
    for (var key in opt_context) {
      goog.debug.errorcontext.addErrorContext(error, key, opt_context[key]);
    }
  }
  return error;
};


/**
 * Gets the current stack trace. Simple and iterative - doesn't worry about
 * catching circular references or getting the args.
 * @param {number=} opt_depth Optional maximum depth to trace back to.
 * @return {string} A string with the function names of all functions in the
 *     stack, separated by \n.
 * @suppress {es5Strict}
 */
goog.debug.getStacktraceSimple = function(opt_depth) {
  'use strict';
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
    // NOTE: browsers that have strict mode support also have native "stack"
    // properties.  Fall-through for legacy browser support.
  }

  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;

  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push('()\n');

    try {
      fn = fn.caller;
    } catch (e) {
      sb.push('[exception trying to get caller]\n');
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push('[...long stack...]');
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push('[...reached max depth limit...]');
  } else {
    sb.push('[end]');
  }

  return sb.join('');
};


/**
 * Max length of stack to try and output
 * @type {number}
 */
goog.debug.MAX_STACK_DEPTH = 50;


/**
 * @param {Function} fn The function to start getting the trace from.
 * @return {?string}
 * @private
 */
goog.debug.getNativeStackTrace_ = function(fn) {
  'use strict';
  var tempErr = new Error();
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    // IE10, only adds stack traces when an exception is thrown.
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};


/**
 * Gets the current stack trace, either starting from the caller or starting
 * from a specified function that's currently on the call stack.
 * @param {?Function=} fn If provided, when collecting the stack trace all
 *     frames above the topmost call to this function, including that call,
 *     will be left out of the stack trace.
 * @return {string} Stack trace.
 * @suppress {es5Strict}
 */
goog.debug.getStacktrace = function(fn) {
  'use strict';
  var stack;
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    // Try to get the stack trace from the environment if it is available.
    var contextFn = fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    // NOTE: browsers that have strict mode support also have native "stack"
    // properties. This function will throw in strict mode.
    stack = goog.debug.getStacktraceHelper_(fn || arguments.callee.caller, []);
  }
  return stack;
};


/**
 * Private helper for getStacktrace().
 * @param {?Function} fn If provided, when collecting the stack trace all
 *     frames above the topmost call to this function, including that call,
 *     will be left out of the stack trace.
 * @param {Array<!Function>} visited List of functions visited so far.
 * @return {string} Stack trace starting from function fn.
 * @suppress {es5Strict}
 * @private
 */
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  'use strict';
  var sb = [];

  // Circular reference, certain functions like bind seem to cause a recursive
  // loop so we need to catch circular references
  if (goog.array.contains(visited, fn)) {
    sb.push('[...circular reference...]');

    // Traverse the call stack until function not found or max depth is reached
  } else if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
    sb.push(goog.debug.getFunctionName(fn) + '(');
    var args = fn.arguments;
    // Args may be null for some special functions such as host objects or eval.
    for (var i = 0; args && i < args.length; i++) {
      if (i > 0) {
        sb.push(', ');
      }
      var argDesc;
      var arg = args[i];
      switch (typeof arg) {
        case 'object':
          argDesc = arg ? 'object' : 'null';
          break;

        case 'string':
          argDesc = arg;
          break;

        case 'number':
          argDesc = String(arg);
          break;

        case 'boolean':
          argDesc = arg ? 'true' : 'false';
          break;

        case 'function':
          argDesc = goog.debug.getFunctionName(arg);
          argDesc = argDesc ? argDesc : '[fn]';
          break;

        case 'undefined':
        default:
          argDesc = typeof arg;
          break;
      }

      if (argDesc.length > 40) {
        argDesc = argDesc.slice(0, 40) + '...';
      }
      sb.push(argDesc);
    }
    visited.push(fn);
    sb.push(')\n');

    try {
      sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
    } catch (e) {
      sb.push('[exception trying to get caller]\n');
    }

  } else if (fn) {
    sb.push('[...long stack...]');
  } else {
    sb.push('[end]');
  }
  return sb.join('');
};


/**
 * Gets a function name
 * @param {Function} fn Function to get name of.
 * @return {string} Function's name.
 */
goog.debug.getFunctionName = function(fn) {
  'use strict';
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }

  // Heuristically determine function name based on code.
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function\s+([^\(]+)/m.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = '[Anonymous]';
    }
  }

  return goog.debug.fnNameCache_[functionSource];
};


/**
 * Makes whitespace visible by replacing it with printable characters.
 * This is useful in finding diffrences between the expected and the actual
 * output strings of a testcase.
 * @param {string} string whose whitespace needs to be made visible.
 * @return {string} string whose whitespace is made visible.
 */
goog.debug.makeWhitespaceVisible = function(string) {
  'use strict';
  return string.replace(/ /g, '[_]')
      .replace(/\f/g, '[f]')
      .replace(/\n/g, '[n]\n')
      .replace(/\r/g, '[r]')
      .replace(/\t/g, '[t]');
};


/**
 * Returns the type of a value. If a constructor is passed, and a suitable
 * string cannot be found, 'unknown type name' will be returned.
 *
 * <p>Forked rather than moved from {@link goog.asserts.getType_}
 * to avoid adding a dependency to goog.asserts.
 * @param {*} value A constructor, object, or primitive.
 * @return {string} The best display name for the value, or 'unknown type name'.
 */
goog.debug.runtimeType = function(value) {
  'use strict';
  if (value instanceof Function) {
    return value.displayName || value.name || 'unknown type name';
  } else if (value instanceof Object) {
    return /** @type {string} */ (value.constructor.displayName) ||
        value.constructor.name || Object.prototype.toString.call(value);
  } else {
    return value === null ? 'null' : typeof value;
  }
};


/**
 * Hash map for storing function names that have already been looked up.
 * @type {Object}
 * @private
 */
goog.debug.fnNameCache_ = {};


/**
 * Private internal function to support goog.debug.freeze.
 * @param {T} arg
 * @return {T}
 * @template T
 * @private
 */
goog.debug.freezeInternal_ = goog.DEBUG && Object.freeze || function(arg) {
  'use strict';
  return arg;
};


/**
 * Freezes the given object, but only in debug mode (and in browsers that
 * support it).  Note that this is a shallow freeze, so for deeply nested
 * objects it must be called at every level to ensure deep immutability.
 * @param {T} arg
 * @return {T}
 * @template T
 */
goog.debug.freeze = function(arg) {
  'use strict';
  // NOTE: this compiles to nothing, but hides the possible side effect of
  // freezeInternal_ from the compiler so that the entire call can be
  // removed if the result is not used.
  return {
    valueOf: function() {
      'use strict';
      return goog.debug.freezeInternal_(arg);
    }
  }.valueOf();
};

//third_party/javascript/closure/dom/htmlelement.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

goog.provide('goog.dom.HtmlElement');



/**
 * This subclass of HTMLElement is used when only a HTMLElement is possible and
 * not any of its subclasses. Normally, a type can refer to an instance of
 * itself or an instance of any subtype. More concretely, if HTMLElement is used
 * then the compiler must assume that it might still be e.g. HTMLScriptElement.
 * With this, the type check knows that it couldn't be any special element.
 *
 * @constructor
 * @extends {HTMLElement}
 */
goog.dom.HtmlElement = function() {};

//third_party/javascript/closure/dom/tagname.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Defines the goog.dom.TagName class. Its constants enumerate
 * all HTML tag names specified in either the W3C HTML 4.01 index of elements
 * or the HTML5.1 specification.
 *
 * References:
 * https://www.w3.org/TR/html401/index/elements.html
 * https://www.w3.org/TR/html51/dom.html#elements
 */
goog.provide('goog.dom.TagName');

goog.require('goog.dom.HtmlElement');

/**
 * A tag name for an HTML element.
 *
 * This type is a lie. All instances are actually strings. Do not implement it.
 *
 * It exists because we need an object type to host the template type parameter,
 * and that's not possible with literal or enum types. It is a record type so
 * that runtime type checks don't try to validate the lie.
 *
 * @template T
 * @record
 */
goog.dom.TagName = class {
  /**
   * Cast a string into the tagname for the associated constructor.
   *
   * @template T
   * @param {string} name
   * @param {function(new:T, ...?)} type
   * @return {!goog.dom.TagName<T>}
   */
  static cast(name, type) {
    return /** @type {?} */ (name);
  }

  /** @suppress {unusedPrivateMembers} */
  constructor() {
    /** @private {null} */
    this.googDomTagName_doNotImplementThisTypeOrElse_;

    /** @private {T} */
    this.ensureTypeScriptRemembersTypeT_;
  }

  /**
   * Appease the compiler that instances are stringafiable for the
   * purpose of being a dictionary key.
   *
   * Never implemented; always backed by `String::toString`.
   *
   * @override
   * @return {string}
   */
  toString() {}
};



/** @const {!goog.dom.TagName<!HTMLAnchorElement>} */
goog.dom.TagName.A = /** @type {?} */ ('A');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.ABBR = /** @type {?} */ ('ABBR');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.ACRONYM = /** @type {?} */ ('ACRONYM');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.ADDRESS = /** @type {?} */ ('ADDRESS');

/** @const {!goog.dom.TagName<!HTMLAppletElement>} */
goog.dom.TagName.APPLET = /** @type {?} */ ('APPLET');

/** @const {!goog.dom.TagName<!HTMLAreaElement>} */
goog.dom.TagName.AREA = /** @type {?} */ ('AREA');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.ARTICLE = /** @type {?} */ ('ARTICLE');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.ASIDE = /** @type {?} */ ('ASIDE');

/** @const {!goog.dom.TagName<!HTMLAudioElement>} */
goog.dom.TagName.AUDIO = /** @type {?} */ ('AUDIO');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.B = /** @type {?} */ ('B');

/** @const {!goog.dom.TagName<!HTMLBaseElement>} */
goog.dom.TagName.BASE = /** @type {?} */ ('BASE');

/** @const {!goog.dom.TagName<!HTMLBaseFontElement>} */
goog.dom.TagName.BASEFONT = /** @type {?} */ ('BASEFONT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.BDI = /** @type {?} */ ('BDI');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.BDO = /** @type {?} */ ('BDO');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.BIG = /** @type {?} */ ('BIG');

/** @const {!goog.dom.TagName<!HTMLQuoteElement>} */
goog.dom.TagName.BLOCKQUOTE = /** @type {?} */ ('BLOCKQUOTE');

/** @const {!goog.dom.TagName<!HTMLBodyElement>} */
goog.dom.TagName.BODY = /** @type {?} */ ('BODY');

/** @const {!goog.dom.TagName<!HTMLBRElement>} */
goog.dom.TagName.BR = /** @type {?} */ ('BR');

/** @const {!goog.dom.TagName<!HTMLButtonElement>} */
goog.dom.TagName.BUTTON = /** @type {?} */ ('BUTTON');

/** @const {!goog.dom.TagName<!HTMLCanvasElement>} */
goog.dom.TagName.CANVAS = /** @type {?} */ ('CANVAS');

/** @const {!goog.dom.TagName<!HTMLTableCaptionElement>} */
goog.dom.TagName.CAPTION = /** @type {?} */ ('CAPTION');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.CENTER = /** @type {?} */ ('CENTER');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.CITE = /** @type {?} */ ('CITE');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.CODE = /** @type {?} */ ('CODE');

/** @const {!goog.dom.TagName<!HTMLTableColElement>} */
goog.dom.TagName.COL = /** @type {?} */ ('COL');

/** @const {!goog.dom.TagName<!HTMLTableColElement>} */
goog.dom.TagName.COLGROUP = /** @type {?} */ ('COLGROUP');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.COMMAND = /** @type {?} */ ('COMMAND');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.DATA = /** @type {?} */ ('DATA');

/** @const {!goog.dom.TagName<!HTMLDataListElement>} */
goog.dom.TagName.DATALIST = /** @type {?} */ ('DATALIST');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.DD = /** @type {?} */ ('DD');

/** @const {!goog.dom.TagName<!HTMLModElement>} */
goog.dom.TagName.DEL = /** @type {?} */ ('DEL');

/** @const {!goog.dom.TagName<!HTMLDetailsElement>} */
goog.dom.TagName.DETAILS = /** @type {?} */ ('DETAILS');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.DFN = /** @type {?} */ ('DFN');

/** @const {!goog.dom.TagName<!HTMLDialogElement>} */
goog.dom.TagName.DIALOG = /** @type {?} */ ('DIALOG');

/** @const {!goog.dom.TagName<!HTMLDirectoryElement>} */
goog.dom.TagName.DIR = /** @type {?} */ ('DIR');

/** @const {!goog.dom.TagName<!HTMLDivElement>} */
goog.dom.TagName.DIV = /** @type {?} */ ('DIV');

/** @const {!goog.dom.TagName<!HTMLDListElement>} */
goog.dom.TagName.DL = /** @type {?} */ ('DL');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.DT = /** @type {?} */ ('DT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.EM = /** @type {?} */ ('EM');

/** @const {!goog.dom.TagName<!HTMLEmbedElement>} */
goog.dom.TagName.EMBED = /** @type {?} */ ('EMBED');

/** @const {!goog.dom.TagName<!HTMLFieldSetElement>} */
goog.dom.TagName.FIELDSET = /** @type {?} */ ('FIELDSET');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.FIGCAPTION = /** @type {?} */ ('FIGCAPTION');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.FIGURE = /** @type {?} */ ('FIGURE');

/** @const {!goog.dom.TagName<!HTMLFontElement>} */
goog.dom.TagName.FONT = /** @type {?} */ ('FONT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.FOOTER = /** @type {?} */ ('FOOTER');

/** @const {!goog.dom.TagName<!HTMLFormElement>} */
goog.dom.TagName.FORM = /** @type {?} */ ('FORM');

/** @const {!goog.dom.TagName<!HTMLFrameElement>} */
goog.dom.TagName.FRAME = /** @type {?} */ ('FRAME');

/** @const {!goog.dom.TagName<!HTMLFrameSetElement>} */
goog.dom.TagName.FRAMESET = /** @type {?} */ ('FRAMESET');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H1 = /** @type {?} */ ('H1');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H2 = /** @type {?} */ ('H2');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H3 = /** @type {?} */ ('H3');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H4 = /** @type {?} */ ('H4');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H5 = /** @type {?} */ ('H5');

/** @const {!goog.dom.TagName<!HTMLHeadingElement>} */
goog.dom.TagName.H6 = /** @type {?} */ ('H6');

/** @const {!goog.dom.TagName<!HTMLHeadElement>} */
goog.dom.TagName.HEAD = /** @type {?} */ ('HEAD');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.HEADER = /** @type {?} */ ('HEADER');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.HGROUP = /** @type {?} */ ('HGROUP');

/** @const {!goog.dom.TagName<!HTMLHRElement>} */
goog.dom.TagName.HR = /** @type {?} */ ('HR');

/** @const {!goog.dom.TagName<!HTMLHtmlElement>} */
goog.dom.TagName.HTML = /** @type {?} */ ('HTML');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.I = /** @type {?} */ ('I');

/** @const {!goog.dom.TagName<!HTMLIFrameElement>} */
goog.dom.TagName.IFRAME = /** @type {?} */ ('IFRAME');

/** @const {!goog.dom.TagName<!HTMLImageElement>} */
goog.dom.TagName.IMG = /** @type {?} */ ('IMG');

/** @const {!goog.dom.TagName<!HTMLInputElement>} */
goog.dom.TagName.INPUT = /** @type {?} */ ('INPUT');

/** @const {!goog.dom.TagName<!HTMLModElement>} */
goog.dom.TagName.INS = /** @type {?} */ ('INS');

/** @const {!goog.dom.TagName<!HTMLIsIndexElement>} */
goog.dom.TagName.ISINDEX = /** @type {?} */ ('ISINDEX');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.KBD = /** @type {?} */ ('KBD');

// HTMLKeygenElement is deprecated.
/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.KEYGEN = /** @type {?} */ ('KEYGEN');

/** @const {!goog.dom.TagName<!HTMLLabelElement>} */
goog.dom.TagName.LABEL = /** @type {?} */ ('LABEL');

/** @const {!goog.dom.TagName<!HTMLLegendElement>} */
goog.dom.TagName.LEGEND = /** @type {?} */ ('LEGEND');

/** @const {!goog.dom.TagName<!HTMLLIElement>} */
goog.dom.TagName.LI = /** @type {?} */ ('LI');

/** @const {!goog.dom.TagName<!HTMLLinkElement>} */
goog.dom.TagName.LINK = /** @type {?} */ ('LINK');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.MAIN = /** @type {?} */ ('MAIN');

/** @const {!goog.dom.TagName<!HTMLMapElement>} */
goog.dom.TagName.MAP = /** @type {?} */ ('MAP');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.MARK = /** @type {?} */ ('MARK');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.MATH = /** @type {?} */ ('MATH');

/** @const {!goog.dom.TagName<!HTMLMenuElement>} */
goog.dom.TagName.MENU = /** @type {?} */ ('MENU');

/** @const {!goog.dom.TagName<!HTMLMenuItemElement>} */
goog.dom.TagName.MENUITEM = /** @type {?} */ ('MENUITEM');

/** @const {!goog.dom.TagName<!HTMLMetaElement>} */
goog.dom.TagName.META = /** @type {?} */ ('META');

/** @const {!goog.dom.TagName<!HTMLMeterElement>} */
goog.dom.TagName.METER = /** @type {?} */ ('METER');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.NAV = /** @type {?} */ ('NAV');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.NOFRAMES = /** @type {?} */ ('NOFRAMES');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.NOSCRIPT = /** @type {?} */ ('NOSCRIPT');

/** @const {!goog.dom.TagName<!HTMLObjectElement>} */
goog.dom.TagName.OBJECT = /** @type {?} */ ('OBJECT');

/** @const {!goog.dom.TagName<!HTMLOListElement>} */
goog.dom.TagName.OL = /** @type {?} */ ('OL');

/** @const {!goog.dom.TagName<!HTMLOptGroupElement>} */
goog.dom.TagName.OPTGROUP = /** @type {?} */ ('OPTGROUP');

/** @const {!goog.dom.TagName<!HTMLOptionElement>} */
goog.dom.TagName.OPTION = /** @type {?} */ ('OPTION');

/** @const {!goog.dom.TagName<!HTMLOutputElement>} */
goog.dom.TagName.OUTPUT = /** @type {?} */ ('OUTPUT');

/** @const {!goog.dom.TagName<!HTMLParagraphElement>} */
goog.dom.TagName.P = /** @type {?} */ ('P');

/** @const {!goog.dom.TagName<!HTMLParamElement>} */
goog.dom.TagName.PARAM = /** @type {?} */ ('PARAM');

/** @const {!goog.dom.TagName<!HTMLPictureElement>} */
goog.dom.TagName.PICTURE = /** @type {?} */ ('PICTURE');

/** @const {!goog.dom.TagName<!HTMLPreElement>} */
goog.dom.TagName.PRE = /** @type {?} */ ('PRE');

/** @const {!goog.dom.TagName<!HTMLProgressElement>} */
goog.dom.TagName.PROGRESS = /** @type {?} */ ('PROGRESS');

/** @const {!goog.dom.TagName<!HTMLQuoteElement>} */
goog.dom.TagName.Q = /** @type {?} */ ('Q');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.RP = /** @type {?} */ ('RP');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.RT = /** @type {?} */ ('RT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.RTC = /** @type {?} */ ('RTC');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.RUBY = /** @type {?} */ ('RUBY');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.S = /** @type {?} */ ('S');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SAMP = /** @type {?} */ ('SAMP');

/** @const {!goog.dom.TagName<!HTMLScriptElement>} */
goog.dom.TagName.SCRIPT = /** @type {?} */ ('SCRIPT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SECTION = /** @type {?} */ ('SECTION');

/** @const {!goog.dom.TagName<!HTMLSelectElement>} */
goog.dom.TagName.SELECT = /** @type {?} */ ('SELECT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SMALL = /** @type {?} */ ('SMALL');

/** @const {!goog.dom.TagName<!HTMLSourceElement>} */
goog.dom.TagName.SOURCE = /** @type {?} */ ('SOURCE');

/** @const {!goog.dom.TagName<!HTMLSpanElement>} */
goog.dom.TagName.SPAN = /** @type {?} */ ('SPAN');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.STRIKE = /** @type {?} */ ('STRIKE');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.STRONG = /** @type {?} */ ('STRONG');

/** @const {!goog.dom.TagName<!HTMLStyleElement>} */
goog.dom.TagName.STYLE = /** @type {?} */ ('STYLE');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SUB = /** @type {?} */ ('SUB');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SUMMARY = /** @type {?} */ ('SUMMARY');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SUP = /** @type {?} */ ('SUP');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.SVG = /** @type {?} */ ('SVG');

/** @const {!goog.dom.TagName<!HTMLTableElement>} */
goog.dom.TagName.TABLE = /** @type {?} */ ('TABLE');

/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */
goog.dom.TagName.TBODY = /** @type {?} */ ('TBODY');

/** @const {!goog.dom.TagName<!HTMLTableCellElement>} */
goog.dom.TagName.TD = /** @type {?} */ ('TD');

/** @const {!goog.dom.TagName<!HTMLTemplateElement>} */
goog.dom.TagName.TEMPLATE = /** @type {?} */ ('TEMPLATE');

/** @const {!goog.dom.TagName<!HTMLTextAreaElement>} */
goog.dom.TagName.TEXTAREA = /** @type {?} */ ('TEXTAREA');

/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */
goog.dom.TagName.TFOOT = /** @type {?} */ ('TFOOT');

/** @const {!goog.dom.TagName<!HTMLTableCellElement>} */
goog.dom.TagName.TH = /** @type {?} */ ('TH');

/** @const {!goog.dom.TagName<!HTMLTableSectionElement>} */
goog.dom.TagName.THEAD = /** @type {?} */ ('THEAD');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.TIME = /** @type {?} */ ('TIME');

/** @const {!goog.dom.TagName<!HTMLTitleElement>} */
goog.dom.TagName.TITLE = /** @type {?} */ ('TITLE');

/** @const {!goog.dom.TagName<!HTMLTableRowElement>} */
goog.dom.TagName.TR = /** @type {?} */ ('TR');

/** @const {!goog.dom.TagName<!HTMLTrackElement>} */
goog.dom.TagName.TRACK = /** @type {?} */ ('TRACK');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.TT = /** @type {?} */ ('TT');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.U = /** @type {?} */ ('U');

/** @const {!goog.dom.TagName<!HTMLUListElement>} */
goog.dom.TagName.UL = /** @type {?} */ ('UL');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.VAR = /** @type {?} */ ('VAR');

/** @const {!goog.dom.TagName<!HTMLVideoElement>} */
goog.dom.TagName.VIDEO = /** @type {?} */ ('VIDEO');

/** @const {!goog.dom.TagName<!goog.dom.HtmlElement>} */
goog.dom.TagName.WBR = /** @type {?} */ ('WBR');

//third_party/javascript/closure/object/object.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Utilities for manipulating objects/maps/hashes.
 */
goog.module('goog.object');
goog.module.declareLegacyNamespace();

/**
 * Calls a function for each element in an object/map/hash.
 * @param {?Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,?Object<K,V>):?} f The function to call for every
 *     element. This function takes 3 arguments (the value, the key and the
 *     object) and the return value is ignored.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {void}
 * @template T,K,V
 */
function forEach(obj, f, opt_obj) {
  for (const key in obj) {
    f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);
  }
}

/**
 * Calls a function for each element in an object/map/hash. If that call returns
 * true, adds the element to a new object.
 * @param {?Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for
 *     every element. This function takes 3 arguments (the value, the key and
 *     the object) and should return a boolean. If the return value is true the
 *     element is added to the result object. If it is false the element is not
 *     included.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object<K,V>} a new object in which only elements that passed the
 *     test are present.
 * @template T,K,V
 */
function filter(obj, f, opt_obj) {
  const res = {};
  for (const key in obj) {
    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
}

/**
 * For every element in an object/map/hash calls a function and inserts the
 * result into a new object.
 * @param {?Object<K,V>} obj The object over which to iterate.
 * @param {function(this:T,V,?,?Object<K,V>):R} f The function to call for every
 *     element. This function takes 3 arguments (the value, the key and the
 *     object) and should return something. The result will be inserted into a
 *     new object.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {!Object<K,R>} a new object with the results from f.
 * @template T,K,V,R
 */
function map(obj, f, opt_obj) {
  const res = {};
  for (const key in obj) {
    res[key] = f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);
  }
  return res;
}

/**
 * Calls a function for each element in an object/map/hash. If any
 * call returns true, returns true (without checking the rest). If
 * all calls return false, returns false.
 * @param {?Object<K,V>} obj The object to check.
 * @param {function(this:T,V,?,?Object<K,V>):boolean} f The function to call for
 *     every element. This function takes 3 arguments (the value, the key and
 *     the object) and should return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} true if any element passes the test.
 * @template T,K,V
 */
function some(obj, f, opt_obj) {
  for (const key in obj) {
    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
      return true;
    }
  }
  return false;
}

/**
 * Calls a function for each element in an object/map/hash. If
 * all calls return true, returns true. If any call returns false, returns
 * false at this point and does not continue to check the remaining elements.
 * @param {?Object<K,V>} obj The object to check.
 * @param {?function(this:T,V,?,?Object<K,V>):boolean} f The function to call
 *     for every element. This function takes 3 arguments (the value, the key
 *     and the object) and should return a boolean.
 * @param {T=} opt_obj This is used as the 'this' object within f.
 * @return {boolean} false if any element fails the test.
 * @template T,K,V
 */
function every(obj, f, opt_obj) {
  for (const key in obj) {
    if (!f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
      return false;
    }
  }
  return true;
}

/**
 * Returns the number of key-value pairs in the object map.
 * @param {?Object} obj The object for which to get the number of key-value
 *     pairs.
 * @return {number} The number of key-value pairs in the object map.
 */
function getCount(obj) {
  let rv = 0;
  for (const key in obj) {
    rv++;
  }
  return rv;
}

/**
 * Returns one key from the object map, if any exists.
 * For map literals the returned key will be the first one in most of the
 * browsers (a know exception is Konqueror).
 * @param {?Object} obj The object to pick a key from.
 * @return {string|undefined} The key or undefined if the object is empty.
 */
function getAnyKey(obj) {
  for (const key in obj) {
    return key;
  }
}

/**
 * Returns one value from the object map, if any exists.
 * For map literals the returned value will be the first one in most of the
 * browsers (a know exception is Konqueror).
 * @param {?Object<K,V>} obj The object to pick a value from.
 * @return {V|undefined} The value or undefined if the object is empty.
 * @template K,V
 */
function getAnyValue(obj) {
  for (const key in obj) {
    return obj[key];
  }
}

/**
 * Whether the object/hash/map contains the given object as a value.
 * An alias for containsValue(obj, val).
 * @param {?Object<K,V>} obj The object in which to look for val.
 * @param {V} val The object for which to check.
 * @return {boolean} true if val is present.
 * @template K,V
 */
function contains(obj, val) {
  return containsValue(obj, val);
}

/**
 * Returns the values of the object/map/hash.
 * @param {?Object<K,V>} obj The object from which to get the values.
 * @return {!Array<V>} The values in the object/map/hash.
 * @template K,V
 */
function getValues(obj) {
  const res = [];
  let i = 0;
  for (const key in obj) {
    res[i++] = obj[key];
  }
  return res;
}

/**
 * Returns the keys of the object/map/hash.
 * @param {?Object} obj The object from which to get the keys.
 * @return {!Array<string>} Array of property keys.
 */
function getKeys(obj) {
  const res = [];
  let i = 0;
  for (const key in obj) {
    res[i++] = key;
  }
  return res;
}

/**
 * Get a value from an object multiple levels deep.  This is useful for
 * pulling values from deeply nested objects, such as JSON responses.
 * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
 * @param {?Object} obj An object to get the value from. Can be array-like.
 * @param {...(string|number|!IArrayLike<number|string>)} var_args A number of
 *     keys (as strings, or numbers, for array-like objects). Can also be
 *     specified as a single array of keys.
 * @return {*} The resulting value. If, at any point, the value for a key in the
 *     current object is null or undefined, returns undefined.
 */
function getValueByKeys(obj, var_args) {
  const isArrayLike = goog.isArrayLike(var_args);
  const keys = isArrayLike ?
      /** @type {!IArrayLike<number|string>} */ (var_args) :
      arguments;

  // Start with the 2nd parameter for the variable parameters syntax.
  for (let i = isArrayLike ? 0 : 1; i < keys.length; i++) {
    if (obj == null) return undefined;
    obj = obj[keys[i]];
  }

  return obj;
}

/**
 * Whether the object/map/hash contains the given key.
 * @param {?Object} obj The object in which to look for key.
 * @param {?} key The key for which to check.
 * @return {boolean} true If the map contains the key.
 */
function containsKey(obj, key) {
  return obj !== null && key in obj;
}

/**
 * Whether the object/map/hash contains the given value. This is O(n).
 * @param {?Object<K,V>} obj The object in which to look for val.
 * @param {V} val The value for which to check.
 * @return {boolean} true If the map contains the value.
 * @template K,V
 */
function containsValue(obj, val) {
  for (const key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
}

/**
 * Searches an object for an element that satisfies the given condition and
 * returns its key.
 * @param {?Object<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to
 *     call for every element. Takes 3 arguments (the value, the key and the
 *     object) and should return a boolean.
 * @param {T=} thisObj An optional "this" context for the function.
 * @return {string|undefined} The key of an element for which the function
 *     returns true or undefined if no such element is found.
 * @template T,K,V
 */
function findKey(obj, f, thisObj = undefined) {
  for (const key in obj) {
    if (f.call(/** @type {?} */ (thisObj), obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
}

/**
 * Searches an object for an element that satisfies the given condition and
 * returns its value.
 * @param {?Object<K,V>} obj The object to search in.
 * @param {function(this:T,V,string,?Object<K,V>):boolean} f The function to
 *     call for every element. Takes 3 arguments (the value, the key and the
 *     object) and should return a boolean.
 * @param {T=} thisObj An optional "this" context for the function.
 * @return {V} The value of an element for which the function returns true or
 *     undefined if no such element is found.
 * @template T,K,V
 */
function findValue(obj, f, thisObj = undefined) {
  const key = findKey(obj, f, thisObj);
  return key && obj[key];
}

/**
 * Whether the object/map/hash is empty.
 * @param {?Object} obj The object to test.
 * @return {boolean} true if obj is empty.
 */
function isEmpty(obj) {
  for (const key in obj) {
    return false;
  }
  return true;
}

/**
 * Removes all key value pairs from the object/map/hash.
 * @param {?Object} obj The object to clear.
 * @return {void}
 */
function clear(obj) {
  for (const i in obj) {
    delete obj[i];
  }
}

/**
 * Removes a key-value pair based on the key.
 * @param {?Object} obj The object from which to remove the key.
 * @param {?} key The key to remove.
 * @return {boolean} Whether an element was removed.
 */
function remove(obj, key) {
  let rv;
  if (rv = key in /** @type {!Object} */ (obj)) {
    delete obj[key];
  }
  return rv;
}

/**
 * Adds a key-value pair to the object. Throws an exception if the key is
 * already in use. Use set if you want to change an existing pair.
 * @param {?Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} val The value to add.
 * @return {void}
 * @template K,V
 */
function add(obj, key, val) {
  if (obj !== null && key in obj) {
    throw new Error(`The object already contains the key "${key}"`);
  }
  set(obj, key, val);
}

/**
 * Returns the value for the given key.
 * @param {?Object<K,V>} obj The object from which to get the value.
 * @param {string} key The key for which to get the value.
 * @param {R=} val The value to return if no item is found for the given key
 *     (default is undefined).
 * @return {V|R|undefined} The value for the given key.
 * @template K,V,R
 */
function get(obj, key, val = undefined) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return val;
}

/**
 * Adds a key-value pair to the object/map/hash.
 * @param {?Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add.
 * @template K,V
 * @return {void}
 */
function set(obj, key, value) {
  obj[key] = value;
}

/**
 * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
 * @param {?Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {V} value The value to add if the key wasn't present.
 * @return {V} The value of the entry at the end of the function.
 * @template K,V
 */
function setIfUndefined(obj, key, value) {
  return key in /** @type {!Object} */ (obj) ? obj[key] : (obj[key] = value);
}

/**
 * Sets a key and value to an object if the key is not set. The value will be
 * the return value of the given function. If the key already exists, the
 * object will not be changed and the function will not be called (the function
 * will be lazily evaluated -- only called if necessary).
 * This function is particularly useful when used with an `Object` which is
 * acting as a cache.
 * @param {?Object<K,V>} obj The object to which to add the key-value pair.
 * @param {string} key The key to add.
 * @param {function():V} f The value to add if the key wasn't present.
 * @return {V} The value of the entry at the end of the function.
 * @template K,V
 */
function setWithReturnValueIfNotSet(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }

  const val = f();
  obj[key] = val;
  return val;
}

/**
 * Compares two objects for equality using === on the values.
 * @param {!Object<K,V>} a
 * @param {!Object<K,V>} b
 * @return {boolean}
 * @template K,V
 */
function equals(a, b) {
  for (const k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (const k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
}

/**
 * Returns a shallow clone of the object.
 * @param {?Object<K,V>} obj Object to clone.
 * @return {!Object<K,V>} Clone of the input object.
 * @template K,V
 */
function clone(obj) {
  const res = {};
  for (const key in obj) {
    res[key] = obj[key];
  }
  return res;
}

/**
 * Clones a value. The input may be an Object, Array, or basic type. Objects and
 * arrays will be cloned recursively.
 * WARNINGS:
 * <code>unsafeClone</code> does not detect reference loops. Objects
 * that refer to themselves will cause infinite recursion.
 * <code>unsafeClone</code> is unaware of unique identifiers, and
 * copies UIDs created by <code>getUid</code> into cloned results.
 * @param {T} obj The value to clone.
 * @return {T} A clone of the input value.
 * @template T
 */
function unsafeClone(obj) {
  if (!obj || typeof obj !== 'object') return obj;
  if (typeof obj.clone === 'function') return obj.clone();
  if (typeof Map !== 'undefined' && obj instanceof Map) {
    return new Map(obj);
  } else if (typeof Set !== 'undefined' && obj instanceof Set) {
    return new Set(obj);
  } else if (obj instanceof Date) {
    return new Date(obj.getTime());
  }
  const clone = Array.isArray(obj) ? [] :
      typeof ArrayBuffer === 'function' &&
          typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj) &&
          !(obj instanceof DataView) ?
                                     new obj.constructor(obj.length) :
                                     {};
  for (const key in obj) {
    clone[key] = unsafeClone(obj[key]);
  }
  return clone;
}

/**
 * Returns a new object in which all the keys and values are interchanged
 * (keys become values and values become keys). If multiple keys map to the
 * same value, the chosen transposed value is implementation-dependent.
 * @param {?Object} obj The object to transpose.
 * @return {!Object} The transposed object.
 */
function transpose(obj) {
  const transposed = {};
  for (const key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
}

/**
 * The names of the fields that are defined on Object.prototype.
 * @type {!Array<string>}
 */
const PROTOTYPE_FIELDS = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf',
];

/**
 * Extends an object with another object.
 * This operates 'in-place'; it does not create a new Object.
 * Example:
 * var o = {};
 * extend(o, {a: 0, b: 1});
 * o; // {a: 0, b: 1}
 * extend(o, {b: 2, c: 3});
 * o; // {a: 0, b: 2, c: 3}
 * @param {?Object} target The object to modify. Existing properties will be
 *     overwritten if they are also present in one of the objects in `var_args`.
 * @param {...(?Object|undefined)} var_args The objects from which values
 *     will be copied.
 * @return {void}
 * @deprecated Prefer Object.assign
 */
function extend(target, var_args) {
  let key;
  let source;
  for (let i = 1; i < arguments.length; i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }

    // For IE the for-in-loop does not contain any properties that are not
    // enumerable on the prototype object (for example isPrototypeOf from
    // Object.prototype) and it will also not include 'replace' on objects that
    // extend String and change 'replace' (not that it is common for anyone to
    // extend anything except Object).

    for (let j = 0; j < PROTOTYPE_FIELDS.length; j++) {
      key = PROTOTYPE_FIELDS[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
}

/**
 * Creates a new object built from the key-value pairs provided as arguments.
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments, otherwise even arguments are used as
 *     the property names and odd arguments are used as the property values.
 * @return {!Object} The new object.
 * @throws {!Error} If there are uneven number of arguments or there is only one
 *     non array argument.
 */
function create(var_args) {
  const argLength = arguments.length;
  if (argLength == 1 && Array.isArray(arguments[0])) {
    return create.apply(null, arguments[0]);
  }

  if (argLength % 2) {
    throw new Error('Uneven number of arguments');
  }

  const rv = {};
  for (let i = 0; i < argLength; i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
}

/**
 * Creates a new object where the property names come from the arguments but
 * the value is always set to true
 * @param {...*} var_args If only one argument is provided and it is an array
 *     then this is used as the arguments, otherwise the arguments are used as
 *     the property names.
 * @return {!Object} The new object.
 */
function createSet(var_args) {
  const argLength = arguments.length;
  if (argLength == 1 && Array.isArray(arguments[0])) {
    return createSet.apply(null, arguments[0]);
  }

  const rv = {};
  for (let i = 0; i < argLength; i++) {
    rv[arguments[i]] = true;
  }
  return rv;
}

/**
 * Creates an immutable view of the underlying object, if the browser
 * supports immutable objects.
 * In default mode, writes to this view will fail silently. In strict mode,
 * they will throw an error.
 * @param {!Object<K,V>} obj An object.
 * @return {!Object<K,V>} An immutable view of that object, or the original
 *     object if this browser does not support immutables.
 * @template K,V
 */
function createImmutableView(obj) {
  let result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
}

/**
 * @param {!Object} obj An object.
 * @return {boolean} Whether this is an immutable view of the object.
 */
function isImmutableView(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
}

/**
 * Get all properties names on a given Object regardless of enumerability.
 * <p> If the browser does not support `Object.getOwnPropertyNames` nor
 * `Object.getPrototypeOf` then this is equivalent to using
 * `getKeys`
 * @param {?Object} obj The object to get the properties of.
 * @param {boolean=} includeObjectPrototype Whether properties defined on
 *     `Object.prototype` should be included in the result.
 * @param {boolean=} includeFunctionPrototype Whether properties defined on
 *     `Function.prototype` should be included in the result.
 * @return {!Array<string>}
 * @public
 */
function getAllPropertyNames(
    obj, includeObjectPrototype = undefined,
    includeFunctionPrototype = undefined) {
  if (!obj) {
    return [];
  }

  // Naively use a for..in loop to get the property names if the browser doesn't
  // support any other APIs for getting it.
  if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {
    return getKeys(obj);
  }

  const visitedSet = {};

  // Traverse the prototype chain and add all properties to the visited set.
  let proto = obj;
  while (proto && (proto !== Object.prototype || !!includeObjectPrototype) &&
         (proto !== Function.prototype || !!includeFunctionPrototype)) {
    const names = Object.getOwnPropertyNames(proto);
    for (let i = 0; i < names.length; i++) {
      visitedSet[names[i]] = true;
    }
    proto = Object.getPrototypeOf(proto);
  }

  return getKeys(visitedSet);
}

/**
 * Given a ES5 or ES6 class reference, return its super class / super
 * constructor.
 * This should be used in rare cases where you need to walk up the inheritance
 * tree (this is generally a bad idea). But this work with ES5 and ES6 classes,
 * unlike relying on the superClass_ property.
 * Note: To start walking up the hierarchy from an instance call this with its
 * `constructor` property; e.g. `getSuperClass(instance.constructor)`.
 * @param {function(new: ?)} constructor
 * @return {?Object}
 */
function getSuperClass(constructor) {
  const proto = Object.getPrototypeOf(constructor.prototype);
  return proto && proto.constructor;
}

exports = {
  add,
  clear,
  clone,
  contains,
  containsKey,
  containsValue,
  create,
  createImmutableView,
  createSet,
  equals,
  every,
  extend,
  filter,
  findKey,
  findValue,
  forEach,
  get,
  getAllPropertyNames,
  getAnyKey,
  getAnyValue,
  getCount,
  getKeys,
  getSuperClass,
  getValueByKeys,
  getValues,
  isEmpty,
  isImmutableView,
  map,
  remove,
  set,
  setIfUndefined,
  setWithReturnValueIfNotSet,
  some,
  transpose,
  unsafeClone,
};

;return exports;});

//third_party/javascript/closure/dom/tags.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Utilities for HTML element tag names.
 */
goog.provide('goog.dom.tags');

goog.require('goog.object');


/**
 * The void elements specified by
 * http://www.w3.org/TR/html-markup/syntax.html#void-elements.
 * @const @private {!Object<string, boolean>}
 */
goog.dom.tags.VOID_TAGS_ = goog.object.createSet(
    'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',
    'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr');


/**
 * Checks whether the tag is void (with no contents allowed and no legal end
 * tag), for example 'br'.
 * @param {string} tagName The tag name in lower case.
 * @return {boolean}
 */
goog.dom.tags.isVoidTag = function(tagName) {
  'use strict';
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};

//third_party/javascript/tslib/tslib_closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview
 * Hand-modified Closure version of tslib.js.
 * These use the literal space optimized code from TypeScript for
 * compatibility.
 *
 * @suppress {undefinedVars}
 */

// Do not use @license

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

goog.module('google3.third_party.javascript.tslib.tslib');

/** @suppress {missingPolyfill} the code below intentionally feature-tests. */
var extendStatics = Object.setPrototypeOf ||
    function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

/**
 * @param {?} d
 * @param {?} b
 */
exports.__extends = function(d, b) {
  extendStatics(d, b);
  // LOCAL MODIFICATION: Add jsdoc annotation here:
  /** @constructor */
  function __() { /** @type {?} */
    (this).constructor = d;
  }
  d.prototype =
      b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/** @type {typeof Object.assign} */
exports.__assign = Object.assign || /** @return {?} */ function(/** ? */ t) {
  for (var s, i = 1, n = arguments.length; i < n; i++) {
    s = arguments[i];
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
  }
  return t;
};

/**
 * @param {?} s
 * @param {?} e
 * @return {?}
 */
exports.__rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === 'function')
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};

/**
 * @param {?} decorators
 * @param {T} target
 * @param {?=} key
 * @param {?=} desc
 * @return {T}
 * @template T
 */
exports.__decorate = function(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3     ? target :
      desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) :
                      desc,
      d;
  // google3 local modification: use quoted property access to work around
  // https://b.corp.google.com/issues/77140019.
  if (typeof Reflect === 'object' && Reflect &&
      typeof Reflect['decorate'] === 'function')
    r = Reflect['decorate'](decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

/**
 * @param {?} paramIndex
 * @param {?} decorator
 * @return {?}
 */
exports.__param = function(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
};

exports.__setFunctionName = function(f, name, prefix) {
  if (typeof name === 'symbol')
    name = name.description ? '['.concat(name.description, ']') : '';
  return Object.defineProperty(f, 'name', {
    configurable: true,
    value: prefix ? ''.concat(prefix, ' ', name) : name
  });
};

/**
 * @param {?} metadataKey
 * @param {?} metadataValue
 * @return {?}
 */
exports.__metadata = function(metadataKey, metadataValue) {
  // google3 local modification: use quoted property access to work around
  // https://b.corp.google.com/issues/77140019.
  if (typeof Reflect === 'object' && Reflect &&
      typeof Reflect['metadata'] === 'function')
    return Reflect['metadata'](metadataKey, metadataValue);
};

/**
 * @template T
 * @param {T} thisArg
 * @param {?} _arguments
 * @param {?} P
 * @param {function(this:T)} generator
 * @return {?}
 */
exports.__awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    // LOCAL MODIFICATION: Cannot express the function + keys pattern in
    // closure, so we escape generator.next with ? type.
    function fulfilled(value) {
      try {
        step((/** @type {?} */ (generator)).next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator['throw'](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) :
                    adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

/**
 * @param {?} thisArg
 * @param {?} body
 * @return {?}
 */
exports.__generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function() {
      if (t[0] & 1) throw (/** @type {!Error} */ (t[1]));
      return t[1];
    },
    trys: [],
    ops: []
  },
      f, y, t, g;
  // LOCAL MODIFICATION: Originally iterator body was "return this", but it
  // doesn't compile as this is unknown. Changed to g, which is equivalent.
  return g = {next: verb(0), 'throw': verb(1), 'return': verb(2)},
         typeof Symbol === 'function' && (g[Symbol.iterator] = function() {
           return g;
         }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  /**
   * @suppress {strictMissingProperties} TODO(b/214874268): Remove
   * strictMissingProperties suppression after b/214427036 is fixed
   */
  function step(op) {
    if (f) throw new TypeError('Generator is already executing.');
    while (_) try {
        if (f = 1,
            y &&
                (t = op[0] & 2 ? y['return'] :
                     op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) :
                             y.next) &&
                !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {value: op[1], done: false};
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) &&
                (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5) throw (/** @type {!Error} */ (op[1]));
    return {value: op[0] ? op[1] : void 0, done: true};
  }
};

/**
 * @param {?} m
 * @param {?} o
 */
exports.__exportStar = function(m, o) {
  for (var p in m)
    if (!o.hasOwnProperty(p)) o[p] = m[p];
};

/**
 * @param {?} o
 * @return {?}
 */
exports.__values = function(o) {
  var m = typeof Symbol === 'function' && o[Symbol.iterator], i = 0;
  if (m) return m.call(o);
  return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return {value: o && o[i++], done: !o};
    }
  };
};

/**
 * @param {?} o
 * @param {?=} n
 * @return {?}
 */
exports.__read = function(o, n) {
  var m = typeof Symbol === 'function' && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {error: error};
  } finally {
    try {
      if (r && !r.done && (m = i['return'])) m.call(i);
    } finally {
      if (e) throw (/** @type {!Error} */ (e.error));
    }
  }
  return ar;
};


/** @deprecated */
exports.__spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(exports.__read(arguments[i]));
  return ar;
};

/** @deprecated */
exports.__spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};

/**
 * @param {!Array<?>} to
 * @param {!Array<?>} from
 * @param {!Array<?>} pack
 * @return {!Array<?>}
 */
exports.__spreadArray = function(to, from, pack) {
  // LOCAL MODIFICATION: https://github.com/microsoft/TypeScript/issues/43353
  // We have to accept NodeList because they don't implement Iterable in Edge.
  if (!Array.isArray(from) && !(from instanceof NodeList)) {
    throw new TypeError('Expected an Array or NodeList: ' + String(from));
  }
  // END LOCAL MODIFICATION
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};

/**
 * @constructor
 * LOCAL MODIFICATION: Originally used "this" in function body,
 * @this {?}
 * END LOCAL MODIFICATION
 * @param {?} v
 * @return {?}
 */
exports.__await = function(v) {
  return this instanceof exports.__await ? (this.v = v, this) :
                                           new exports.__await(v);
};

/**
 * @template T
 * @param {T} thisArg
 * @param {?} _arguments
 * @param {function(this:T)} generator
 * @return {?}
 */
exports.__asyncGenerator = function(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb('next'), verb('throw'), verb('return'),
         i[Symbol.asyncIterator] = function() {
           return (/** @type {?} */ (this));
         }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof exports.__await ?
        Promise.resolve(/** @type {?} */ (r.value).v).then(fulfill, reject) :
        settle(q[0][2], r);
  }
  function fulfill(value) {
    resume('next', value);
  }
  function reject(value) {
    resume('throw', value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
};

/**
 * @param {?} o
 * @return {?}
 */
exports.__asyncDelegator = function(o) {
  var i, p;
  // LOCAL MODIFICATION: Originally iterator body was "return this", but it
  // doesn't compile in some builds, as this is unknown. Changed to i, which is
  // equivalent.
  return i = {}, verb('next'), verb('throw', function(e) {
           throw e;
         }), verb('return'), i[Symbol.iterator] = function() {
    return i;
  }, i;
  /**
   * @param {?} n
   * @param {?=} f
   * @return {?}
   */
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ?
          {value: new exports.__await(o[n](v)), done: n === 'return'} :
          f ? f(v) :
              v;
    } : f;
  }
};

/**
 * @param {?} o
 * @return {?}
 */
exports.__asyncValues = function(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError('Symbol.asyncIterator is not defined.');
  var m = o[Symbol.asyncIterator], i;
  return m ?
      m.call(o) :
      (o = typeof __values === 'function' ? __values(o) : o[Symbol.iterator](),
       i = {}, verb('next'), verb('throw'), verb('return'),
       i[Symbol.asyncIterator] = function() {
         return (/** @type {?} */ (this));
       }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v) {
      resolve({value: v, done: d});
    }, reject);
  }
};

/**
 * @param {?=} cooked
 * @param {?=} raw
 * @return {?}
 */
exports.__makeTemplateObject = function(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, 'raw', {value: raw});
  } else {
    cooked.raw = raw;
  }
  return cooked;
};

/**
 * @param {?} receiver
 * @param {?} state
 * @param {?} kind
 * @param {?} f
 * @return {?}
 */
exports.__classPrivateFieldGet = function(receiver, state, kind, f) {
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a getter');
  if (typeof state === 'function' ? receiver !== state || !f :
                                    !state.has(receiver))
    throw new TypeError(
        'Cannot read private member from an object whose class did not declare it');
  return kind === 'm' ? f :
      kind === 'a'    ? f.call(receiver) :
      f               ? f.value :
                        state.get(receiver);
};

/**
 * @param {?} receiver
 * @param {?} state
 * @param {?} value
 * @param {?} kind
 * @param {?} f
 * @return {?}
 */
exports.__classPrivateFieldSet = function(receiver, state, value, kind, f) {
  if (kind === 'm') throw new TypeError('Private method is not writable');
  if (kind === 'a' && !f)
    throw new TypeError('Private accessor was defined without a setter');
  if (typeof state === 'function' ? receiver !== state || !f :
                                    !state.has(receiver))
    throw new TypeError(
        'Cannot write private member to an object whose class did not declare it');
  return (kind === 'a' ? f.call(receiver, value) :
              f        ? f.value = value :
                         state.set(receiver, value)),
         value;
};

/**
 * @param {?} state
 * @param {?} receiver
 * @return {?}
 */
exports.__classPrivateFieldIn = function(state, receiver) {
  if (receiver === null ||
      (typeof receiver !== 'object' && typeof receiver !== 'function'))
    throw new TypeError('Cannot use \'in\' operator on non-object');
  return typeof state === 'function' ? receiver === state : state.has(receiver);
};

;return exports;});

//third_party/javascript/closure/flags/flags.toggles.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: blaze-out/k8-opt/bin/third_party/javascript/closure/flags/flags.toggles.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
// DO NOT EDIT! Generated by ts_toggle_library
goog.module('google3.third_party.javascript.closure.flags.flags$2etoggles');
var module = module || { id: 'third_party/javascript/closure/flags/flags.toggles.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__use_toggles = goog.readToggleInternalDoNotCallDirectly('GoogFlags__use_toggles');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__override_disable_toggles = goog.readToggleInternalDoNotCallDirectly('GoogFlags__override_disable_toggles');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__use_user_agent_client_hints__enable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__use_user_agent_client_hints__enable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__async_throw_on_unicode_to_byte__enable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__async_throw_on_unicode_to_byte__enable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__client_only_wiz_attribute_sanitization__enable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__client_only_wiz_attribute_sanitization__enable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__testonly_disabled_flag__enable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__testonly_disabled_flag__enable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__testonly_debug_flag__enable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__testonly_debug_flag__enable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__testonly_staging_flag__disable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__testonly_staging_flag__disable');
/** @type {boolean} */
exports.TOGGLE_GoogFlags__testonly_stable_flag__disable = goog.readToggleInternalDoNotCallDirectly('GoogFlags__testonly_stable_flag__disable');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MudG9nZ2xlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9mbGFncy9mbGFncy50b2dnbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWEsUUFBQSw2QkFBNkIsR0FBWSxJQUFJLENBQUMsbUNBQW1DLENBQUMsd0JBQXdCLENBQUM7O0FBQzNHLFFBQUEsMENBQTBDLEdBQVksSUFBSSxDQUFDLG1DQUFtQyxDQUFDLHFDQUFxQyxDQUFDOztBQUNySSxRQUFBLHFEQUFxRCxHQUFZLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxnREFBZ0QsQ0FBQzs7QUFDM0osUUFBQSx3REFBd0QsR0FBWSxJQUFJLENBQUMsbUNBQW1DLENBQUMsbURBQW1ELENBQUM7O0FBQ2pLLFFBQUEsZ0VBQWdFLEdBQVksSUFBSSxDQUFDLG1DQUFtQyxDQUFDLDJEQUEyRCxDQUFDOztBQUNqTCxRQUFBLGdEQUFnRCxHQUFZLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQywyQ0FBMkMsQ0FBQzs7QUFDakosUUFBQSw2Q0FBNkMsR0FBWSxJQUFJLENBQUMsbUNBQW1DLENBQUMsd0NBQXdDLENBQUM7O0FBQzNJLFFBQUEsZ0RBQWdELEdBQVksSUFBSSxDQUFDLG1DQUFtQyxDQUFDLDJDQUEyQyxDQUFDOztBQUNqSixRQUFBLCtDQUErQyxHQUFZLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQywwQ0FBMEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIERPIE5PVCBFRElUISBHZW5lcmF0ZWQgYnkgdHNfdG9nZ2xlX2xpYnJhcnlcblxuZXhwb3J0IGNvbnN0IFRPR0dMRV9Hb29nRmxhZ3NfX3VzZV90b2dnbGVzOiBib29sZWFuID0gZ29vZy5yZWFkVG9nZ2xlSW50ZXJuYWxEb05vdENhbGxEaXJlY3RseSgnR29vZ0ZsYWdzX191c2VfdG9nZ2xlcycpO1xuZXhwb3J0IGNvbnN0IFRPR0dMRV9Hb29nRmxhZ3NfX292ZXJyaWRlX2Rpc2FibGVfdG9nZ2xlczogYm9vbGVhbiA9IGdvb2cucmVhZFRvZ2dsZUludGVybmFsRG9Ob3RDYWxsRGlyZWN0bHkoJ0dvb2dGbGFnc19fb3ZlcnJpZGVfZGlzYWJsZV90b2dnbGVzJyk7XG5leHBvcnQgY29uc3QgVE9HR0xFX0dvb2dGbGFnc19fdXNlX3VzZXJfYWdlbnRfY2xpZW50X2hpbnRzX19lbmFibGU6IGJvb2xlYW4gPSBnb29nLnJlYWRUb2dnbGVJbnRlcm5hbERvTm90Q2FsbERpcmVjdGx5KCdHb29nRmxhZ3NfX3VzZV91c2VyX2FnZW50X2NsaWVudF9oaW50c19fZW5hYmxlJyk7XG5leHBvcnQgY29uc3QgVE9HR0xFX0dvb2dGbGFnc19fYXN5bmNfdGhyb3dfb25fdW5pY29kZV90b19ieXRlX19lbmFibGU6IGJvb2xlYW4gPSBnb29nLnJlYWRUb2dnbGVJbnRlcm5hbERvTm90Q2FsbERpcmVjdGx5KCdHb29nRmxhZ3NfX2FzeW5jX3Rocm93X29uX3VuaWNvZGVfdG9fYnl0ZV9fZW5hYmxlJyk7XG5leHBvcnQgY29uc3QgVE9HR0xFX0dvb2dGbGFnc19fY2xpZW50X29ubHlfd2l6X2F0dHJpYnV0ZV9zYW5pdGl6YXRpb25fX2VuYWJsZTogYm9vbGVhbiA9IGdvb2cucmVhZFRvZ2dsZUludGVybmFsRG9Ob3RDYWxsRGlyZWN0bHkoJ0dvb2dGbGFnc19fY2xpZW50X29ubHlfd2l6X2F0dHJpYnV0ZV9zYW5pdGl6YXRpb25fX2VuYWJsZScpO1xuZXhwb3J0IGNvbnN0IFRPR0dMRV9Hb29nRmxhZ3NfX3Rlc3Rvbmx5X2Rpc2FibGVkX2ZsYWdfX2VuYWJsZTogYm9vbGVhbiA9IGdvb2cucmVhZFRvZ2dsZUludGVybmFsRG9Ob3RDYWxsRGlyZWN0bHkoJ0dvb2dGbGFnc19fdGVzdG9ubHlfZGlzYWJsZWRfZmxhZ19fZW5hYmxlJyk7XG5leHBvcnQgY29uc3QgVE9HR0xFX0dvb2dGbGFnc19fdGVzdG9ubHlfZGVidWdfZmxhZ19fZW5hYmxlOiBib29sZWFuID0gZ29vZy5yZWFkVG9nZ2xlSW50ZXJuYWxEb05vdENhbGxEaXJlY3RseSgnR29vZ0ZsYWdzX190ZXN0b25seV9kZWJ1Z19mbGFnX19lbmFibGUnKTtcbmV4cG9ydCBjb25zdCBUT0dHTEVfR29vZ0ZsYWdzX190ZXN0b25seV9zdGFnaW5nX2ZsYWdfX2Rpc2FibGU6IGJvb2xlYW4gPSBnb29nLnJlYWRUb2dnbGVJbnRlcm5hbERvTm90Q2FsbERpcmVjdGx5KCdHb29nRmxhZ3NfX3Rlc3Rvbmx5X3N0YWdpbmdfZmxhZ19fZGlzYWJsZScpO1xuZXhwb3J0IGNvbnN0IFRPR0dMRV9Hb29nRmxhZ3NfX3Rlc3Rvbmx5X3N0YWJsZV9mbGFnX19kaXNhYmxlOiBib29sZWFuID0gZ29vZy5yZWFkVG9nZ2xlSW50ZXJuYWxEb05vdENhbGxEaXJlY3RseSgnR29vZ0ZsYWdzX190ZXN0b25seV9zdGFibGVfZmxhZ19fZGlzYWJsZScpO1xuIl19
;return exports;});

//third_party/javascript/closure/flags/flags.js
goog.loadModule(function(exports) {'use strict';// DO NOT OPENSOURCE
goog.module('goog.flags');
goog.module.declareLegacyNamespace();

const toggles = goog.require('google3.third_party.javascript.closure.flags.flags$2etoggles');

// NOTE: STAGING defaults to true unless overridden by command-line flag.
/** @type {boolean} */
const STAGING = goog.readFlagInternalDoNotUseOrElse(1, goog.FLAGS_STAGING_DEFAULT);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bUSE_USER_AGENT_CLIENT_HINTS\b
 */
exports.USE_USER_AGENT_CLIENT_HINTS = toggles.TOGGLE_GoogFlags__use_toggles ? toggles.TOGGLE_GoogFlags__use_user_agent_client_hints__enable :
    goog.readFlagInternalDoNotUseOrElse(610401301, false);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bASYNC_THROW_ON_UNICODE_TO_BYTE\b
 */
exports.ASYNC_THROW_ON_UNICODE_TO_BYTE = toggles.TOGGLE_GoogFlags__use_toggles ? toggles.TOGGLE_GoogFlags__async_throw_on_unicode_to_byte__enable :
    goog.readFlagInternalDoNotUseOrElse(899588437, false);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bCLIENT_ONLY_WIZ_ATTRIBUTE_SANITIZATION\b
 */
exports.CLIENT_ONLY_WIZ_ATTRIBUTE_SANITIZATION = toggles.TOGGLE_GoogFlags__use_toggles ? toggles.TOGGLE_GoogFlags__client_only_wiz_attribute_sanitization__enable :
    goog.readFlagInternalDoNotUseOrElse(533565600, false);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bTESTONLY_DISABLED_FLAG\b
 */
exports.TESTONLY_DISABLED_FLAG = toggles.TOGGLE_GoogFlags__use_toggles ? toggles.TOGGLE_GoogFlags__testonly_disabled_flag__enable :
    goog.readFlagInternalDoNotUseOrElse(2147483644, false);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bTESTONLY_DEBUG_FLAG\b
 */
exports.TESTONLY_DEBUG_FLAG = toggles.TOGGLE_GoogFlags__use_toggles ? goog.DEBUG || toggles.TOGGLE_GoogFlags__testonly_debug_flag__enable :
    goog.readFlagInternalDoNotUseOrElse(2147483645, goog.DEBUG);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bTESTONLY_STAGING_FLAG\b
 */
exports.TESTONLY_STAGING_FLAG = toggles.TOGGLE_GoogFlags__use_toggles ? goog.FLAGS_STAGING_DEFAULT && (toggles.TOGGLE_GoogFlags__override_disable_toggles || !toggles.TOGGLE_GoogFlags__testonly_staging_flag__disable) :
    goog.readFlagInternalDoNotUseOrElse(2147483646, STAGING);
/**
 * @const {boolean}
 * @see google3/third_party/javascript/closure/flags/flags.proto?q=symbol:\bTESTONLY_STABLE_FLAG\b
 */
exports.TESTONLY_STABLE_FLAG = toggles.TOGGLE_GoogFlags__use_toggles ? toggles.TOGGLE_GoogFlags__override_disable_toggles || !toggles.TOGGLE_GoogFlags__testonly_stable_flag__disable :
    goog.readFlagInternalDoNotUseOrElse(2147483647, true);

;return exports;});

//third_party/javascript/closure/fs/blob.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Wrappers for the HTML5 File API. These wrappers closely mirror
 * the underlying APIs, but use Closure-style events and Deferred return values.
 * Their existence also makes it possible to mock the FileSystem API for testing
 * in browsers that don't support it natively.
 *
 * When adding public functions to anything under this namespace, be sure to add
 * its mock counterpart to goog.testing.fs.
 */

goog.provide('goog.fs.blob');



/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param {...(string|!Blob|!ArrayBuffer)} var_args The values that will make up
 *     the resulting blob.
 * @return {!Blob} The blob.
 */
goog.fs.blob.getBlob = function(var_args) {
  'use strict';
  const BlobBuilder = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;

  if (BlobBuilder !== undefined) {
    const bb = new BlobBuilder();
    for (let i = 0; i < arguments.length; i++) {
      bb.append(arguments[i]);
    }
    return bb.getBlob();
  } else {
    return goog.fs.blob.getBlobWithProperties(
        Array.prototype.slice.call(arguments));
  }
};


/**
 * Creates a blob with the given properties.
 * See https://developer.mozilla.org/en-US/docs/Web/API/Blob for more details.
 *
 * @param {!Array<string|!Blob|!ArrayBuffer>} parts The values that will make up
 *     the resulting blob (subset supported by both BlobBuilder.append() and
 *     Blob constructor).
 * @param {string=} opt_type The MIME type of the Blob.
 * @param {string=} opt_endings Specifies how strings containing newlines are to
 *     be written out.
 * @return {!Blob} The blob.
 */
goog.fs.blob.getBlobWithProperties = function(parts, opt_type, opt_endings) {
  'use strict';
  const BlobBuilder = goog.global.BlobBuilder || goog.global.WebKitBlobBuilder;

  if (BlobBuilder !== undefined) {
    const bb = new BlobBuilder();
    for (let i = 0; i < parts.length; i++) {
      bb.append(parts[i], opt_endings);
    }
    return bb.getBlob(opt_type);
  } else if (goog.global.Blob !== undefined) {
    const properties = {};
    if (opt_type) {
      properties['type'] = opt_type;
    }
    if (opt_endings) {
      properties['endings'] = opt_endings;
    }
    return new Blob(parts, properties);
  } else {
    throw new Error('This browser doesn\'t seem to support creating Blobs');
  }
};

//third_party/javascript/closure/fs/url.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Wrapper for URL and its createObjectUrl and revokeObjectUrl
 * methods that are part of the HTML5 File API.
 */

goog.provide('goog.fs.url');


/**
 * Creates a blob URL for a blob object.
 * Throws an error if the browser does not support Object Urls.
 *
 * @param {!File|!Blob|!MediaSource|!MediaStream} obj The object for which
 *   to create the URL.
 * @return {string} The URL for the object.
 */
goog.fs.url.createObjectUrl = function(obj) {
  'use strict';
  return goog.fs.url.getUrlObject_().createObjectURL(obj);
};


/**
 * Revokes a URL created by {@link goog.fs.url.createObjectUrl}.
 * Throws an error if the browser does not support Object Urls.
 *
 * @param {string} url The URL to revoke.
 * @return {void}
 */
goog.fs.url.revokeObjectUrl = function(url) {
  'use strict';
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};


/**
 * @record
 * @private
 */
goog.fs.url.UrlObject_ = function() {};

/**
 * @param {!File|!Blob|!MediaSource|!MediaStream} arg
 * @return {string}
 */
goog.fs.url.UrlObject_.prototype.createObjectURL = function(arg) {};

/**
 * @param {string} s
 * @return {void}
 */
goog.fs.url.UrlObject_.prototype.revokeObjectURL = function(s) {};


/**
 * Get the object that has the createObjectURL and revokeObjectURL functions for
 * this browser.
 *
 * @return {!goog.fs.url.UrlObject_} The object for this browser.
 * @private
 */
goog.fs.url.getUrlObject_ = function() {
  'use strict';
  const urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw new Error('This browser doesn\'t seem to support blob URLs');
  }
};


/**
 * Finds the object that has the createObjectURL and revokeObjectURL functions
 * for this browser.
 *
 * @return {?goog.fs.url.UrlObject_} The object for this browser or null if the
 *     browser does not support Object Urls.
 * @private
 */
goog.fs.url.findUrlObject_ = function() {
  'use strict';
  // This is what the spec says to do
  // http://dev.w3.org/2006/webapi/FileAPI/#dfn-createObjectURL
  if (goog.global.URL !== undefined &&
      goog.global.URL.createObjectURL !== undefined) {
    return /** @type {!goog.fs.url.UrlObject_} */ (goog.global.URL);
    // This is what the spec used to say to do
  } else if (goog.global.createObjectURL !== undefined) {
    return /** @type {!goog.fs.url.UrlObject_} */ (goog.global);
  } else {
    return null;
  }
};


/**
 * Checks whether this browser supports Object Urls. If not, calls to
 * createObjectUrl and revokeObjectUrl will result in an error.
 *
 * @return {boolean} True if this browser supports Object Urls.
 */
goog.fs.url.browserSupportsObjectUrls = function() {
  'use strict';
  return goog.fs.url.findUrlObject_() != null;
};

//third_party/javascript/closure/html/trustedtypes.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Policy to convert strings to Trusted Types. See
 * https://github.com/WICG/trusted-types for details.
 */

goog.provide('goog.html.trustedtypes');


/**
 * @define {string} Name for the Trusted Types policy used in Closure Safe
 * Types. Differs from `goog.TRUSTED_TYPES_POLICY_NAME` in that the latter is
 * also used for other purposes like the debug loader. If empty, Closure Safe
 * Types will not use Trusted Types. Default is `goog.TRUSTED_TYPES_POLICY_NAME`
 * plus the suffix `#html`, unless `goog.TRUSTED_TYPES_POLICY_NAME` is empty.
 * @package
 */
goog.html.trustedtypes.POLICY_NAME = goog.define(
    'goog.html.trustedtypes.POLICY_NAME',
    goog.TRUSTED_TYPES_POLICY_NAME ? goog.TRUSTED_TYPES_POLICY_NAME + '#html' :
                                     '');


/**
 * Cached result of goog.createTrustedTypesPolicy.
 * @type {?TrustedTypePolicy|undefined}
 * @private
 */
goog.html.trustedtypes.cachedPolicy_;


/**
 * Creates a (singleton) Trusted Type Policy for Safe HTML Types.
 * @return {?TrustedTypePolicy}
 * @package
 */
goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse = function() {
  'use strict';
  if (!goog.html.trustedtypes.POLICY_NAME) {
    // Binary not configured for Trusted Types.
    return null;
  }

  if (goog.html.trustedtypes.cachedPolicy_ === undefined) {
    goog.html.trustedtypes.cachedPolicy_ =
        goog.createTrustedTypesPolicy(goog.html.trustedtypes.POLICY_NAME);
  }

  return goog.html.trustedtypes.cachedPolicy_;
};

//third_party/javascript/closure/string/typedstring.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

goog.provide('goog.string.TypedString');



/**
 * Wrapper for strings that conform to a data type or language.
 *
 * Implementations of this interface are wrappers for strings, and typically
 * associate a type contract with the wrapped string.  Concrete implementations
 * of this interface may choose to implement additional run-time type checking,
 * see for example `goog.html.SafeHtml`. If available, client code that
 * needs to ensure type membership of an object should use the type's function
 * to assert type membership, such as `goog.html.SafeHtml.unwrap`.
 * @interface
 */
goog.string.TypedString = function() {};


/**
 * Interface marker of the TypedString interface.
 *
 * This property can be used to determine at runtime whether or not an object
 * implements this interface.  All implementations of this interface set this
 * property to `true`.
 * @type {boolean}
 */
goog.string.TypedString.prototype.implementsGoogStringTypedString;


/**
 * Retrieves this wrapped string's value.
 * @return {string} The wrapped string's value.
 */
goog.string.TypedString.prototype.getTypedStringValue;

//third_party/javascript/closure/string/const.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

goog.provide('goog.string.Const');

goog.require('goog.asserts');
goog.require('goog.string.TypedString');



/**
 * Wrapper for compile-time-constant strings.
 *
 * Const is a wrapper for strings that can only be created from program
 * constants (i.e., string literals).  This property relies on a custom Closure
 * compiler check that `goog.string.Const.from` is only invoked on
 * compile-time-constant expressions.
 *
 * Const is useful in APIs whose correct and secure use requires that certain
 * arguments are not attacker controlled: Compile-time constants are inherently
 * under the control of the application and not under control of external
 * attackers, and hence are safe to use in such contexts.
 *
 * Instances of this type must be created via its factory method
 * `goog.string.Const.from` and not by invoking its constructor.  The
 * constructor intentionally takes no parameters and the type is immutable;
 * hence only a default instance corresponding to the empty string can be
 * obtained via constructor invocation.  Use goog.string.Const.EMPTY
 * instead of using this constructor to get an empty Const string.
 *
 * @see goog.string.Const#from
 * @constructor
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 * @param {Object=} opt_token package-internal implementation detail.
 * @param {string=} opt_content package-internal implementation detail.
 */
goog.string.Const = function(opt_token, opt_content) {
  'use strict';
  /**
   * The wrapped value of this Const object.  The field has a purposely ugly
   * name to make (non-compiled) code that attempts to directly access this
   * field stand out.
   * @private {string}
   */
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =
      ((opt_token ===
        goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_) &&
       opt_content) ||
      '';

  /**
   * A type marker used to implement additional run-time type checking.
   * @see goog.string.Const#unwrap
   * @const {!Object}
   * @private
   */
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =
      goog.string.Const.TYPE_MARKER_;
};


/**
 * @override
 * @const
 */
goog.string.Const.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this Const's value as a string.
 *
 * IMPORTANT: In code where it is security-relevant that an object's type is
 * indeed `goog.string.Const`, use `goog.string.Const.unwrap`
 * instead of this method.
 *
 * @see goog.string.Const#unwrap
 * @override
 * @return {string}
 */
goog.string.Const.prototype.getTypedStringValue = function() {
  'use strict';
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};


if (goog.DEBUG) {
  /**
   * Returns a debug-string representation of this value.
   *
   * To obtain the actual string value wrapped inside an object of this type,
   * use `goog.string.Const.unwrap`.
   *
   * @see goog.string.Const#unwrap
   * @override
   * @return {string}
   */
  goog.string.Const.prototype.toString = function() {
    'use strict';
    return 'Const{' +
        this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +
        '}';
  };
}


/**
 * Performs a runtime check that the provided object is indeed an instance
 * of `goog.string.Const`, and returns its value.
 * @param {!goog.string.Const} stringConst The object to extract from.
 * @return {string} The Const object's contained string, unless the run-time
 *     type check fails. In that case, `unwrap` returns an innocuous
 *     string, or, if assertions are enabled, throws
 *     `goog.asserts.AssertionError`.
 */
goog.string.Const.unwrap = function(stringConst) {
  'use strict';
  // Perform additional run-time type-checking to ensure that stringConst is
  // indeed an instance of the expected type.  This provides some additional
  // protection against security bugs due to application code that disables type
  // checks.
  if (stringConst instanceof goog.string.Const &&
      stringConst.constructor === goog.string.Const &&
      stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===
          goog.string.Const.TYPE_MARKER_) {
    return stringConst
        .stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail(
        'expected object of type Const, got \'' + stringConst + '\'');
    return 'type_error:Const';
  }
};


/**
 * Creates a Const object from a compile-time constant string.
 *
 * It is illegal to invoke this function on an expression whose
 * compile-time-constant value cannot be determined by the Closure compiler.
 *
 * Correct invocations include,
 * <pre>
 *   var s = goog.string.Const.from('hello');
 *   var t = goog.string.Const.from('hello' + 'world');
 * </pre>
 *
 * In contrast, the following are illegal:
 * <pre>
 *   var s = goog.string.Const.from(getHello());
 *   var t = goog.string.Const.from('hello' + world);
 * </pre>
 *
 * @param {string} s A constant string from which to create a Const.
 * @return {!goog.string.Const} A Const object initialized to stringConst.
 */
goog.string.Const.from = function(s) {
  'use strict';
  return new goog.string.Const(
      goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_, s);
};

/**
 * Type marker for the Const type, used to implement additional run-time
 * type checking.
 * @const {!Object}
 * @private
 */
goog.string.Const.TYPE_MARKER_ = {};

/**
 * @type {!Object}
 * @private
 * @const
 */
goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_ = {};

/**
 * A Const instance wrapping the empty string.
 * @const {!goog.string.Const}
 */
goog.string.Const.EMPTY = goog.string.Const.from('');

//third_party/javascript/closure/html/safescript.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview The SafeScript type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.module('goog.html.SafeScript');
goog.module.declareLegacyNamespace();

const Const = goog.require('goog.string.Const');
const TypedString = goog.require('goog.string.TypedString');
const trustedtypes = goog.require('goog.html.trustedtypes');
const {fail} = goog.require('goog.asserts');

/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @const {!Object}
 */
const CONSTRUCTOR_TOKEN_PRIVATE = {};

/**
 * A string-like object which represents JavaScript code and that carries the
 * security type contract that its value, as a string, will not cause execution
 * of unconstrained attacker controlled code (XSS) when evaluated as JavaScript
 * in a browser.
 *
 * Instances of this type must be created via the factory method
 * `SafeScript.fromConstant` and not by invoking its constructor. The
 * constructor intentionally takes an extra parameter that cannot be constructed
 * outside of this file and the type is immutable; hence only a default instance
 * corresponding to the empty string can be obtained via constructor invocation.
 *
 * A SafeScript's string representation can safely be interpolated as the
 * content of a script element within HTML. The SafeScript string should not be
 * escaped before interpolation.
 *
 * Note that the SafeScript might contain text that is attacker-controlled but
 * that text should have been interpolated with appropriate escaping,
 * sanitization and/or validation into the right location in the script, such
 * that it is highly constrained in its effect (for example, it had to match a
 * set of whitelisted words).
 *
 * A SafeScript can be constructed via security-reviewed unchecked
 * conversions. In this case producers of SafeScript must ensure themselves that
 * the SafeScript does not contain unsafe script. Note in particular that
 * `&lt;` is dangerous, even when inside JavaScript strings, and so should
 * always be forbidden or JavaScript escaped in user controlled input. For
 * example, if `&lt;/script&gt;&lt;script&gt;evil&lt;/script&gt;"` were
 * interpolated inside a JavaScript string, it would break out of the context
 * of the original script element and `evil` would execute. Also note
 * that within an HTML script (raw text) element, HTML character references,
 * such as "&lt;" are not allowed. See
 * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.
 * Creating SafeScript objects HAS SIDE-EFFECTS due to calling Trusted Types Web
 * API.
 *
 * @see SafeScript#fromConstant
 * @final
 * @implements {TypedString}
 */
class SafeScript {
  /**
   * @param {!TrustedScript|string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG && token !== CONSTRUCTOR_TOKEN_PRIVATE) {
      throw Error('SafeScript is not meant to be built directly');
    }

    /**
     * The contained value of this SafeScript.  The field has a purposely ugly
     * name to make (non-compiled) code that attempts to directly access this
     * field stand out.
     * @const
     * @private {!TrustedScript|string}
     */
    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = value;

    /**
     * @override
     * @const
     */
    this.implementsGoogStringTypedString = true;
  }

  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeScript, use
   * `SafeScript.unwrap`.
   *
   * @return {string}
   * @see SafeScript#unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
  }

  /**
   * Creates a SafeScript object from a compile-time constant string.
   *
   * @param {!Const} script A compile-time-constant string from which to create
   *     a SafeScript.
   * @return {!SafeScript} A SafeScript object initialized to `script`.
   */
  static fromConstant(script) {
    const scriptString = Const.unwrap(script);
    if (scriptString.length === 0) {
      return SafeScript.EMPTY;
    }
    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(
        scriptString);
  }

  /**
   * Creates a SafeScript JSON representation from anything that could be passed
   * to JSON.stringify.
   * @param {*} val
   * @return {!SafeScript}
   * MOE:begin_intracomment_strip
   * @deprecated Use safevalues.valueAsScript instead.
   * @package
   * MOE:end_intracomment_strip
   */
  static fromJson(val) {
    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(
        SafeScript.stringify_(val));
  }

  /**
   * Returns this SafeScript's value as a string.
   *
   * IMPORTANT: In code where it is security relevant that an object's type is
   * indeed `SafeScript`, use `SafeScript.unwrap` instead of
   * this method. If in doubt, assume that it's security relevant. In
   * particular, note that goog.html functions which return a goog.html type do
   * not guarantee the returned instance is of the right type. For example:
   *
   * <pre>
   * var fakeSafeHtml = new String('fake');
   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
   * // instanceof goog.html.SafeHtml.
   * </pre>
   *
   * @see SafeScript#unwrap
   * @override
   */
  getTypedStringValue() {
    return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString();
  }

  /**
   * Performs a runtime check that the provided object is indeed a
   * SafeScript object, and returns its value.
   *
   * @param {!SafeScript} safeScript The object to extract from.
   * @return {string} The safeScript object's contained string, unless
   *     the run-time type check fails. In that case, `unwrap` returns an
   *     innocuous string, or, if assertions are enabled, throws
   *     `asserts.AssertionError`.
   */
  static unwrap(safeScript) {
    return SafeScript.unwrapTrustedScript(safeScript).toString();
  }

  /**
   * Unwraps value as TrustedScript if supported or as a string if not.
   * @param {!SafeScript} safeScript
   * @return {!TrustedScript|string}
   * @see SafeScript.unwrap
   */
  static unwrapTrustedScript(safeScript) {
    // Perform additional Run-time type-checking to ensure that
    // safeScript is indeed an instance of the expected type.  This
    // provides some additional protection against security bugs due to
    // application code that disables type checks.
    // Specifically, the following checks are performed:
    // 1. The object is an instance of the expected type.
    // 2. The object is not an instance of a subclass.
    if (safeScript instanceof SafeScript &&
        safeScript.constructor === SafeScript) {
      return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
    } else {
      fail(
          'expected object of type SafeScript, got \'' + safeScript +
          '\' of type ' + goog.typeOf(safeScript));
      return 'type_error:SafeScript';
    }
  }

  /**
   * Converts the given value to an embeddable JSON string and returns it. The
   * resulting string can be embedded in HTML because the '<' character is
   * encoded.
   *
   * @param {*} val
   * @return {string}
   * @private
   */
  static stringify_(val) {
    const json = JSON.stringify(val);
    return json.replace(/</g, '\\x3c');
  }

  /**
   * Package-internal utility method to create SafeScript instances.
   *
   * @param {string} script The string to initialize the SafeScript object with.
   * @return {!SafeScript} The initialized SafeScript object.
   * @package
   */
  static createSafeScriptSecurityPrivateDoNotAccessOrElse(script) {
    /** @noinline */
    const noinlineScript = script;
    const policy = trustedtypes.getPolicyPrivateDoNotAccessOrElse();
    const trustedScript =
        policy ? policy.createScript(noinlineScript) : noinlineScript;
    return new SafeScript(trustedScript, CONSTRUCTOR_TOKEN_PRIVATE);
  }
}

/**
 * A SafeScript instance corresponding to the empty string.
 * @const {!SafeScript}
 */
SafeScript.EMPTY = /** @type {!SafeScript} */ ({
  // NOTE: this compiles to nothing, but hides the possible side effect of
  // SafeScript creation (due to calling trustedTypes.createPolicy) from the
  // compiler so that the entire call can be removed if the result is not used.
  // MOE:begin_strip
  // TODO(b/155299094): Refactor after adding compiler support.
  // MOE:end_strip
  valueOf: function() {
    return SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse('');
  },
}.valueOf());


exports = SafeScript;

;return exports;});

//third_party/javascript/closure/html/trustedresourceurl.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview The TrustedResourceUrl type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.TrustedResourceUrl');

goog.require('goog.asserts');
goog.require('goog.fs.blob');
goog.require('goog.fs.url');
goog.require('goog.html.SafeScript');
goog.require('goog.html.trustedtypes');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');



/**
 * A URL which is under application control and from which script, CSS, and
 * other resources that represent executable code, can be fetched.
 *
 * Given that the URL can only be constructed from strings under application
 * control and is used to load resources, bugs resulting in a malformed URL
 * should not have a security impact and are likely to be easily detectable
 * during testing. Given the wide number of non-RFC compliant URLs in use,
 * stricter validation could prevent some applications from being able to use
 * this type.
 *
 * Instances of this type must be created via the factory method,
 * (`fromConstant`, `fromConstants`, `format` or `formatWithParams`), and not by
 * invoking its constructor. The constructor intentionally takes an extra
 * parameter that cannot be constructed outside of this file and the type is
 * immutable; hence only a default instance corresponding to the empty string
 * can be obtained via constructor invocation.
 *
 * Creating TrustedResourceUrl objects HAS SIDE-EFFECTS due to calling
 * Trusted Types Web API.
 *
 * @see goog.html.TrustedResourceUrl#fromConstant
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 */
goog.html.TrustedResourceUrl = class {
  /**
   * @private
   * @param {!TrustedScriptURL|string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG &&
        token !== goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_) {
      throw Error('TrustedResourceUrl is not meant to be built directly');
    }

    /**
     * The contained value of this TrustedResourceUrl.  The field has a
     * purposely ugly name to make (non-compiled) code that attempts to directly
     * access this field stand out.
     * @const
     * @private {!TrustedScriptURL|string}
     */
    this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = value;
  }

  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a TrustedResourceUrl, use
   * `goog.html.TrustedResourceUrl.unwrap`.
   *
   * @return {string}
   * @see goog.html.TrustedResourceUrl#unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '';
  }
};


/**
 * @override
 * @const
 */
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this TrustedResourceUrl's value as a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed `TrustedResourceUrl`, use
 * `goog.html.TrustedResourceUrl.unwrap` instead of this method. If in
 * doubt, assume that it's security relevant. In particular, note that
 * goog.html functions which return a goog.html type do not guarantee that
 * the returned instance is of the right type. For example:
 *
 * <pre>
 * var fakeSafeHtml = new String('fake');
 * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
 * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
 * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
 * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof
 * // goog.html.SafeHtml.
 * </pre>
 *
 * @see goog.html.TrustedResourceUrl#unwrap
 * @override
 */
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  'use strict';
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_
      .toString();
};


/**
 * Creates a new TrustedResourceUrl with params added to URL. Both search and
 * hash params can be specified.
 *
 * @param {string|?Object<string, *>|undefined} searchParams Search parameters
 *     to add to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for
 *     exact format definition.
 * @param {(string|?Object<string, *>)=} opt_hashParams Hash parameters to add
 *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact
 *     format definition.
 * @return {!goog.html.TrustedResourceUrl} New TrustedResourceUrl with params.
 */
goog.html.TrustedResourceUrl.prototype.cloneWithParams = function(
    searchParams, opt_hashParams) {
  'use strict';
  var url = goog.html.TrustedResourceUrl.unwrap(this);
  var parts = goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(url);
  var urlBase = parts[1];
  var urlSearch = parts[2] || '';
  var urlHash = parts[3] || '';

  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(
          urlBase +
          goog.html.TrustedResourceUrl.stringifyParams_(
              '?', urlSearch, searchParams) +
          goog.html.TrustedResourceUrl.stringifyParams_(
              '#', urlHash, opt_hashParams));
};

/**
 * Performs a runtime check that the provided object is indeed a
 * TrustedResourceUrl object, and returns its value.
 *
 * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl The object to
 *     extract from.
 * @return {string} The trustedResourceUrl object's contained string, unless
 *     the run-time type check fails. In that case, `unwrap` returns an
 *     innocuous string, or, if assertions are enabled, throws
 *     `goog.asserts.AssertionError`.
 */
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  'use strict';
  return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(trustedResourceUrl)
      .toString();
};


/**
 * Unwraps value as TrustedScriptURL if supported or as a string if not.
 * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl
 * @return {!TrustedScriptURL|string}
 * @see goog.html.TrustedResourceUrl.unwrap
 */
goog.html.TrustedResourceUrl.unwrapTrustedScriptURL = function(
    trustedResourceUrl) {
  'use strict';
  // Perform additional Run-time type-checking to ensure that
  // trustedResourceUrl is indeed an instance of the expected type.  This
  // provides some additional protection against security bugs due to
  // application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&
      trustedResourceUrl.constructor === goog.html.TrustedResourceUrl) {
    return trustedResourceUrl
        .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail(
        'expected object of type TrustedResourceUrl, got \'' +
        trustedResourceUrl + '\' of type ' + goog.typeOf(trustedResourceUrl));
    return 'type_error:TrustedResourceUrl';
  }
};


/**
 * Creates a TrustedResourceUrl from a format string and arguments.
 *
 * The arguments for interpolation into the format string map labels to values.
 * Values of type `goog.string.Const` are interpolated without modifcation.
 * Values of other types are cast to string and encoded with
 * encodeURIComponent.
 *
 * `%{<label>}` markers are used in the format string to indicate locations
 * to be interpolated with the valued mapped to the given label. `<label>`
 * must contain only alphanumeric and `_` characters.
 *
 * The format string must match goog.html.TrustedResourceUrl.BASE_URL_.
 *
 * Example usage:
 *
 *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(
 *        'https://www.google.com/search?q=%{query}'), {'query': searchTerm});
 *
 *    var url = goog.html.TrustedResourceUrl.format(goog.string.Const.from(
 *        '//www.youtube.com/v/%{videoId}?hl=en&fs=1%{autoplay}'), {
 *        'videoId': videoId,
 *        'autoplay': opt_autoplay ?
 *            goog.string.Const.from('&autoplay=1') : goog.string.Const.EMPTY
 *    });
 *
 * While this function can be used to create a TrustedResourceUrl from only
 * constants, fromConstant() and fromConstants() are generally preferable for
 * that purpose.
 *
 * @param {!goog.string.Const} format The format string.
 * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping
 *     of labels to values to be interpolated into the format string.
 *     goog.string.Const values are interpolated without encoding.
 * @return {!goog.html.TrustedResourceUrl}
 * @throws {!Error} On an invalid format string or if a label used in the
 *     the format string is not present in args.
 */
goog.html.TrustedResourceUrl.format = function(format, args) {
  'use strict';
  var formatStr = goog.string.Const.unwrap(format);
  if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {
    throw new Error('Invalid TrustedResourceUrl format: ' + formatStr);
  }
  var result = formatStr.replace(
      goog.html.TrustedResourceUrl.FORMAT_MARKER_, function(match, id) {
        'use strict';
        if (!Object.prototype.hasOwnProperty.call(args, id)) {
          throw new Error(
              'Found marker, "' + id + '", in format string, "' + formatStr +
              '", but no valid label mapping found ' +
              'in args: ' + JSON.stringify(args));
        }
        var arg = args[id];
        if (arg instanceof goog.string.Const) {
          return goog.string.Const.unwrap(arg);
        } else {
          return encodeURIComponent(String(arg));
        }
      });
  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);
};


/**
 * @private @const {!RegExp}
 */
goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;


/**
 * The URL must be absolute, scheme-relative or path-absolute. So it must
 * start with:
 * - https:// followed by allowed origin characters.
 * - // followed by allowed origin characters.
 * - Any absolute or relative path.
 *
 * Based on
 * https://url.spec.whatwg.org/commit-snapshots/56b74ce7cca8883eab62e9a12666e2fac665d03d/#url-parsing
 * an initial / which is not followed by another / or \ will end up in the "path
 * state" and from there it can only go to "fragment state" and "query state".
 *
 * We don't enforce a well-formed domain name. So '.' or '1.2' are valid.
 * That's ok because the origin comes from a compile-time constant.
 *
 * A regular expression is used instead of goog.uri for several reasons:
 * - Strictness. E.g. we don't want any userinfo component and we don't
 *   want '/./, nor \' in the first path component.
 * - Small trusted base. goog.uri is generic and might need to change,
 *   reasoning about all the ways it can parse a URL now and in the future
 *   is error-prone.
 * - Code size. We expect many calls to .format(), many of which might
 *   not be using goog.uri.
 * - Simplicity. Using goog.uri would likely not result in simpler nor shorter
 *   code.
 * @private @const {!RegExp}
 */
goog.html.TrustedResourceUrl.BASE_URL_ = new RegExp(
    '^((https:)?//[0-9a-z.:[\\]-]+/'  // Origin.
        + '|/[^/\\\\]'                // Absolute path.
        + '|[^:/\\\\%]+/'             // Relative path.
        + '|[^:/\\\\%]*[?#]'          // Query string or fragment.
        + '|about:blank#'             // about:blank with fragment.
        + ')',
    'i');

/**
 * RegExp for splitting a URL into the base, search field, and hash field.
 *
 * @private @const {!RegExp}
 */
goog.html.TrustedResourceUrl.URL_PARAM_PARSER_ =
    /^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;


/**
 * Formats the URL same as TrustedResourceUrl.format and then adds extra URL
 * parameters.
 *
 * Example usage:
 *
 *     // Creates '//www.youtube.com/v/abc?autoplay=1' for videoId='abc' and
 *     // opt_autoplay=1. Creates '//www.youtube.com/v/abc' for videoId='abc'
 *     // and opt_autoplay=undefined.
 *     var url = goog.html.TrustedResourceUrl.formatWithParams(
 *         goog.string.Const.from('//www.youtube.com/v/%{videoId}'),
 *         {'videoId': videoId},
 *         {'autoplay': opt_autoplay});
 *
 * @param {!goog.string.Const} format The format string.
 * @param {!Object<string, (string|number|!goog.string.Const)>} args Mapping
 *     of labels to values to be interpolated into the format string.
 *     goog.string.Const values are interpolated without encoding.
 * @param {string|?Object<string, *>|undefined} searchParams Parameters to add
 *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact
 *     format definition.
 * @param {(string|?Object<string, *>)=} opt_hashParams Hash parameters to add
 *     to URL. See goog.html.TrustedResourceUrl.stringifyParams_ for exact
 *     format definition.
 * @return {!goog.html.TrustedResourceUrl}
 * @throws {!Error} On an invalid format string or if a label used in the
 *     the format string is not present in args.
 */
goog.html.TrustedResourceUrl.formatWithParams = function(
    format, args, searchParams, opt_hashParams) {
  'use strict';
  var url = goog.html.TrustedResourceUrl.format(format, args);
  return url.cloneWithParams(searchParams, opt_hashParams);
};


/**
 * Creates a TrustedResourceUrl object from a compile-time constant string.
 *
 * Compile-time constant strings are inherently program-controlled and hence
 * trusted.
 *
 * @param {!goog.string.Const} url A compile-time-constant string from which to
 *     create a TrustedResourceUrl.
 * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object
 *     initialized to `url`.
 */
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  'use strict';
  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(
          goog.string.Const.unwrap(url));
};


/**
 * Creates a TrustedResourceUrl object from a compile-time constant strings.
 *
 * Compile-time constant strings are inherently program-controlled and hence
 * trusted.
 *
 * @param {!Array<!goog.string.Const>} parts Compile-time-constant strings from
 *     which to create a TrustedResourceUrl.
 * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object
 *     initialized to concatenation of `parts`.
 */
goog.html.TrustedResourceUrl.fromConstants = function(parts) {
  'use strict';
  var unwrapped = '';
  for (var i = 0; i < parts.length; i++) {
    unwrapped += goog.string.Const.unwrap(parts[i]);
  }
  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);
};

/**
 * Creates a TrustedResourceUrl object by generating a Blob from a SafeScript
 * object and then calling createObjectURL with that blob.
 *
 * SafeScript objects are trusted to contain executable JavaScript code.
 *
 * Caller must call goog.fs.url.revokeObjectUrl() on the unwrapped url to
 * release the underlying blob.
 *
 * Throws if browser doesn't support blob construction.
 *
 * @param {!goog.html.SafeScript} safeScript A script from which to create a
 *     TrustedResourceUrl.
 * @return {!goog.html.TrustedResourceUrl} A TrustedResourceUrl object
 *     initialized to a new blob URL.
 */
goog.html.TrustedResourceUrl.fromSafeScript = function(safeScript) {
  'use strict';
  var blob = goog.fs.blob.getBlobWithProperties(
      [goog.html.SafeScript.unwrap(safeScript)], 'text/javascript');
  var url = goog.fs.url.createObjectUrl(blob);
  return goog.html.TrustedResourceUrl
      .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @private {!Object}
 * @const
 */
goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};


/**
 * Package-internal utility method to create TrustedResourceUrl instances.
 *
 * @param {string} url The string to initialize the TrustedResourceUrl object
 *     with.
 * @return {!goog.html.TrustedResourceUrl} The initialized TrustedResourceUrl
 *     object.
 * @package
 */
goog.html.TrustedResourceUrl
    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  'use strict';
  /** @noinline */
  const noinlineUrl = url;
  const policy = goog.html.trustedtypes.getPolicyPrivateDoNotAccessOrElse();
  const value = policy ? policy.createScriptURL(noinlineUrl) : noinlineUrl;
  return new goog.html.TrustedResourceUrl(
      value, goog.html.TrustedResourceUrl.CONSTRUCTOR_TOKEN_PRIVATE_);
};


/**
 * Stringifies the passed params to be used as either a search or hash field of
 * a URL.
 *
 * @param {string} prefix The prefix character for the given field ('?' or '#').
 * @param {string} currentString The existing field value (including the prefix
 *     character, if the field is present).
 * @param {string|?Object<string, *>|undefined} params The params to set or
 *     append to the field.
 * - If `undefined` or `null`, the field remains unchanged.
 * - If a string, then the string will be escaped and the field will be
 *   overwritten with that value.
 * - If an Object, that object is treated as a set of key-value pairs to be
 *   appended to the current field. Note that JavaScript doesn't guarantee the
 *   order of values in an object which might result in non-deterministic order
 *   of the parameters. However, browsers currently preserve the order. The
 *   rules for each entry:
 *   - If an array, it will be processed as if each entry were an additional
 *     parameter with exactly the same key, following the same logic below.
 *   - If `undefined` or `null`, it will be skipped.
 *   - Otherwise, it will be turned into a string, escaped, and appended.
 * @return {string}
 * @private
 */
goog.html.TrustedResourceUrl.stringifyParams_ = function(
    prefix, currentString, params) {
  'use strict';
  if (params == null) {
    // Do not modify the field.
    return currentString;
  }
  if (typeof params === 'string') {
    // Set field to the passed string.
    return params ? prefix + encodeURIComponent(params) : '';
  }
  // Add on parameters to field from key-value object.
  for (var key in params) {
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name
    if (Object.prototype.hasOwnProperty.call(params, key)) {
      var value = params[key];
      var outputValues = Array.isArray(value) ? value : [value];
      for (var i = 0; i < outputValues.length; i++) {
        var outputValue = outputValues[i];
        if (outputValue != null) {
          if (!currentString) {
            currentString = prefix;
          }
          currentString += (currentString.length > prefix.length ? '&' : '') +
              encodeURIComponent(key) + '=' +
              encodeURIComponent(String(outputValue));
        }
      }
    }
  }
  return currentString;
};

//third_party/javascript/closure/string/internal.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview String functions called from Closure packages that couldn't
 * depend on each other. Outside Closure, use goog.string function which
 * delegate to these.
 */


goog.provide('goog.string.internal');


/**
 * Fast prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix A string to look for at the start of `str`.
 * @return {boolean} True if `str` begins with `prefix`.
 * @see goog.string.startsWith
 */
goog.string.internal.startsWith = function(str, prefix) {
  'use strict';
  return str.lastIndexOf(prefix, 0) == 0;
};


/**
 * Fast suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of `str`.
 * @return {boolean} True if `str` ends with `suffix`.
 * @see goog.string.endsWith
 */
goog.string.internal.endsWith = function(str, suffix) {
  'use strict';
  const l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};


/**
 * Case-insensitive prefix-checker.
 * @param {string} str The string to check.
 * @param {string} prefix  A string to look for at the end of `str`.
 * @return {boolean} True if `str` begins with `prefix` (ignoring
 *     case).
 * @see goog.string.caseInsensitiveStartsWith
 */
goog.string.internal.caseInsensitiveStartsWith = function(str, prefix) {
  'use strict';
  return (
      goog.string.internal.caseInsensitiveCompare(
          prefix, str.slice(0, prefix.length)) == 0);
};


/**
 * Case-insensitive suffix-checker.
 * @param {string} str The string to check.
 * @param {string} suffix A string to look for at the end of `str`.
 * @return {boolean} True if `str` ends with `suffix` (ignoring
 *     case).
 * @see goog.string.caseInsensitiveEndsWith
 */
goog.string.internal.caseInsensitiveEndsWith = function(str, suffix) {
  'use strict';
  return (
      goog.string.internal.caseInsensitiveCompare(
          suffix, str.slice(str.length - suffix.length)) == 0);
};


/**
 * Case-insensitive equality checker.
 * @param {string} str1 First string to check.
 * @param {string} str2 Second string to check.
 * @return {boolean} True if `str1` and `str2` are the same string,
 *     ignoring case.
 * @see goog.string.caseInsensitiveEquals
 */
goog.string.internal.caseInsensitiveEquals = function(str1, str2) {
  'use strict';
  return str1.toLowerCase() == str2.toLowerCase();
};


/**
 * Checks if a string is empty or contains only whitespaces.
 * @param {string} str The string to check.
 * @return {boolean} Whether `str` is empty or whitespace only.
 * @see goog.string.isEmptyOrWhitespace
 */
goog.string.internal.isEmptyOrWhitespace = function(str) {
  'use strict';
  // testing length == 0 first is actually slower in all browsers (about the
  // same in Opera).
  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
  // include it in the regexp to enforce consistent cross-browser behavior.
  return /^[\s\xa0]*$/.test(str);
};


/**
 * Trims white spaces to the left and right of a string.
 * @param {string} str The string to trim.
 * @return {string} A trimmed copy of `str`.
 */
goog.string.internal.trim =
    (goog.TRUSTED_SITE && String.prototype.trim) ? function(str) {
      'use strict';
      return str.trim();
    } : function(str) {
      'use strict';
      // Since IE doesn't include non-breaking-space (0xa0) in their \s
      // character class (as required by section 7.2 of the ECMAScript spec),
      // we explicitly include it in the regexp to enforce consistent
      // cross-browser behavior.
      // NOTE: We don't use String#replace because it might have side effects
      // causing this function to not compile to 0 bytes.
      return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(str)[1];
    };


/**
 * A string comparator that ignores case.
 * -1 = str1 less than str2
 *  0 = str1 equals str2
 *  1 = str1 greater than str2
 *
 * @param {string} str1 The string to compare.
 * @param {string} str2 The string to compare `str1` to.
 * @return {number} The comparator result, as described above.
 * @see goog.string.caseInsensitiveCompare
 */
goog.string.internal.caseInsensitiveCompare = function(str1, str2) {
  'use strict';
  const test1 = String(str1).toLowerCase();
  const test2 = String(str2).toLowerCase();

  if (test1 < test2) {
    return -1;
  } else if (test1 == test2) {
    return 0;
  } else {
    return 1;
  }
};


/**
 * Converts \n to <br>s or <br />s.
 * @param {string} str The string in which to convert newlines.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} A copy of `str` with converted newlines.
 * @see goog.string.newLineToBr
 */
goog.string.internal.newLineToBr = function(str, opt_xml) {
  'use strict';
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '<br />' : '<br>');
};


/**
 * Escapes double quote '"' and single quote '\'' characters in addition to
 * '&', '<', and '>' so that a string can be included in an HTML tag attribute
 * value within double or single quotes.
 * @param {string} str string to be escaped.
 * @param {boolean=} opt_isLikelyToContainHtmlChars
 * @return {string} An escaped copy of `str`.
 * @see goog.string.htmlEscape
 */
goog.string.internal.htmlEscape = function(
    str, opt_isLikelyToContainHtmlChars) {
  'use strict';
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.internal.AMP_RE_, '&amp;')
              .replace(goog.string.internal.LT_RE_, '&lt;')
              .replace(goog.string.internal.GT_RE_, '&gt;')
              .replace(goog.string.internal.QUOT_RE_, '&quot;')
              .replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;')
              .replace(goog.string.internal.NULL_RE_, '&#0;');
    return str;

  } else {
    // quick test helps in the case when there are no chars to replace, in
    // worst case this makes barely a difference to the time taken
    if (!goog.string.internal.ALL_RE_.test(str)) return str;

    // str.indexOf is faster than regex.test in this case
    if (str.indexOf('&') != -1) {
      str = str.replace(goog.string.internal.AMP_RE_, '&amp;');
    }
    if (str.indexOf('<') != -1) {
      str = str.replace(goog.string.internal.LT_RE_, '&lt;');
    }
    if (str.indexOf('>') != -1) {
      str = str.replace(goog.string.internal.GT_RE_, '&gt;');
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.internal.QUOT_RE_, '&quot;');
    }
    if (str.indexOf('\'') != -1) {
      str = str.replace(goog.string.internal.SINGLE_QUOTE_RE_, '&#39;');
    }
    if (str.indexOf('\x00') != -1) {
      str = str.replace(goog.string.internal.NULL_RE_, '&#0;');
    }
    return str;
  }
};


/**
 * Regular expression that matches an ampersand, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.AMP_RE_ = /&/g;


/**
 * Regular expression that matches a less than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.LT_RE_ = /</g;


/**
 * Regular expression that matches a greater than sign, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.GT_RE_ = />/g;


/**
 * Regular expression that matches a double quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.QUOT_RE_ = /"/g;


/**
 * Regular expression that matches a single quote, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.SINGLE_QUOTE_RE_ = /'/g;


/**
 * Regular expression that matches null character, for use in escaping.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.NULL_RE_ = /\x00/g;


/**
 * Regular expression that matches any character that needs to be escaped.
 * @const {!RegExp}
 * @private
 */
goog.string.internal.ALL_RE_ = /[\x00&<>"']/;


/**
 * Do escaping of whitespace to preserve spatial formatting. We use character
 * entity #160 to make it safer for xml.
 * @param {string} str The string in which to escape whitespace.
 * @param {boolean=} opt_xml Whether to use XML compatible tags.
 * @return {string} An escaped copy of `str`.
 * @see goog.string.whitespaceEscape
 */
goog.string.internal.whitespaceEscape = function(str, opt_xml) {
  'use strict';
  // This doesn't use goog.string.preserveSpaces for backwards compatibility.
  return goog.string.internal.newLineToBr(
      str.replace(/  /g, ' &#160;'), opt_xml);
};


/**
 * Determines whether a string contains a substring.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether `str` contains `subString`.
 * @see goog.string.contains
 */
goog.string.internal.contains = function(str, subString) {
  'use strict';
  return str.indexOf(subString) != -1;
};


/**
 * Determines whether a string contains a substring, ignoring case.
 * @param {string} str The string to search.
 * @param {string} subString The substring to search for.
 * @return {boolean} Whether `str` contains `subString`.
 * @see goog.string.caseInsensitiveContains
 */
goog.string.internal.caseInsensitiveContains = function(str, subString) {
  'use strict';
  return goog.string.internal.contains(
      str.toLowerCase(), subString.toLowerCase());
};


/**
 * Compares two version numbers.
 *
 * @param {string|number} version1 Version of first item.
 * @param {string|number} version2 Version of second item.
 *
 * @return {number}  1 if `version1` is higher.
 *                   0 if arguments are equal.
 *                  -1 if `version2` is higher.
 * @see goog.string.compareVersions
 */
goog.string.internal.compareVersions = function(version1, version2) {
  'use strict';
  let order = 0;
  // Trim leading and trailing whitespace and split the versions into
  // subversions.
  const v1Subs = goog.string.internal.trim(String(version1)).split('.');
  const v2Subs = goog.string.internal.trim(String(version2)).split('.');
  const subCount = Math.max(v1Subs.length, v2Subs.length);

  // Iterate over the subversions, as long as they appear to be equivalent.
  for (let subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
    let v1Sub = v1Subs[subIdx] || '';
    let v2Sub = v2Subs[subIdx] || '';

    do {
      // Split the subversions into pairs of numbers and qualifiers (like 'b').
      // Two different RegExp objects are use to make it clear the code
      // is side-effect free
      const v1Comp = /(\d*)(\D*)(.*)/.exec(v1Sub) || ['', '', '', ''];
      const v2Comp = /(\d*)(\D*)(.*)/.exec(v2Sub) || ['', '', '', ''];
      // Break if there are no more matches.
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }

      // Parse the numeric part of the subversion. A missing number is
      // equivalent to 0.
      const v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      const v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);

      // Compare the subversion components. The number has the highest
      // precedence. Next, if the numbers are equal, a subversion without any
      // qualifier is always higher than a subversion with any qualifier. Next,
      // the qualifiers are compared as strings.
      order = goog.string.internal.compareElements_(v1CompNum, v2CompNum) ||
          goog.string.internal.compareElements_(
              v1Comp[2].length == 0, v2Comp[2].length == 0) ||
          goog.string.internal.compareElements_(v1Comp[2], v2Comp[2]);
      // Stop as soon as an inequality is discovered.

      v1Sub = v1Comp[3];
      v2Sub = v2Comp[3];
    } while (order == 0);
  }

  return order;
};


/**
 * Compares elements of a version number.
 *
 * @param {string|number|boolean} left An element from a version number.
 * @param {string|number|boolean} right An element from a version number.
 *
 * @return {number}  1 if `left` is higher.
 *                   0 if arguments are equal.
 *                  -1 if `right` is higher.
 * @private
 */
goog.string.internal.compareElements_ = function(left, right) {
  'use strict';
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  }
  return 0;
};

//third_party/javascript/closure/html/safeurl.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview The SafeUrl type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.provide('goog.html.SafeUrl');

goog.require('goog.asserts');
goog.require('goog.fs.url');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.require('goog.string.internal');



/**
 * A string that is safe to use in URL context in DOM APIs and HTML documents.
 *
 * A SafeUrl is a string-like object that carries the security type contract
 * that its value as a string will not cause untrusted script execution
 * when evaluated as a hyperlink URL in a browser.
 *
 * Values of this type are guaranteed to be safe to use in URL/hyperlink
 * contexts, such as assignment to URL-valued DOM properties, in the sense that
 * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,
 * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,
 * inside a href attribute). However, appropriate HTML-escaping must still be
 * applied.
 *
 * Note that, as documented in `goog.html.SafeUrl.unwrap`, this type's
 * contract does not guarantee that instances are safe to interpolate into HTML
 * without appropriate escaping.
 *
 * Note also that this type's contract does not imply any guarantees regarding
 * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
 * safe to use in a context where the referred-to resource is interpreted as
 * trusted code, e.g., as the src of a script tag.
 *
 * Instances of this type must be created via the factory methods
 * (`goog.html.SafeUrl.fromConstant`, `goog.html.SafeUrl.sanitize`),
 * etc and not by invoking its constructor. The constructor intentionally takes
 * an extra parameter that cannot be constructed outside of this file and the
 * type is immutable; hence only a default instance corresponding to the empty
 * string can be obtained via constructor invocation.
 *
 * @see goog.html.SafeUrl#fromConstant
 * @see goog.html.SafeUrl#from
 * @see goog.html.SafeUrl#sanitize
 * @final
 * @struct
 * @implements {goog.string.TypedString}
 */
goog.html.SafeUrl = class {
  /**
   * @param {string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG && token !== goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_) {
      throw Error('SafeUrl is not meant to be built directly');
    }

    /**
     * The contained value of this SafeUrl.  The field has a purposely ugly
     * name to make (non-compiled) code that attempts to directly access this
     * field stand out.
     * @const
     * @private {string}
     */
    this.privateDoNotAccessOrElseSafeUrlWrappedValue_ = value;
  }

  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeUrl, use
   * `goog.html.SafeUrl.unwrap`.
   *
   * @return {string}
   * @see goog.html.SafeUrl#unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
  }
};


/**
 * The innocuous string generated by goog.html.SafeUrl.sanitize when passed
 * an unsafe URL.
 *
 * about:invalid is registered in
 * http://www.w3.org/TR/css3-values/#about-invalid.
 * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
 * contain a fragment, which is not to be considered when determining if an
 * about URL is well-known.
 *
 * Using about:invalid seems preferable to using a fixed data URL, since
 * browsers might choose to not report CSP violations on it, as legitimate
 * CSS function calls to attr() can result in this URL being produced. It is
 * also a standard URL which matches exactly the semantics we need:
 * "The about:invalid URI references a non-existent document with a generic
 * error condition. It can be used when a URI is necessary, but the default
 * value shouldn't be resolveable as any type of document".
 *
 * @const {string}
 */
goog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';


/**
 * @override
 * @const
 */
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;


/**
 * Returns this SafeUrl's value as a string.
 *
 * IMPORTANT: In code where it is security relevant that an object's type is
 * indeed `SafeUrl`, use `goog.html.SafeUrl.unwrap` instead of this
 * method. If in doubt, assume that it's security relevant. In particular, note
 * that goog.html functions which return a goog.html type do not guarantee that
 * the returned instance is of the right type.
 *
 * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
 * behavior of browsers when interpreting URLs. Values of SafeUrl objects MUST
 * be appropriately escaped before embedding in a HTML document. Note that the
 * required escaping is context-sensitive (e.g. a different escaping is
 * required for embedding a URL in a style property within a style
 * attribute, as opposed to embedding in a href attribute).
 *
 * @see goog.html.SafeUrl#unwrap
 * @override
 */
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  'use strict';
  return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString();
};

/**
 * Performs a runtime check that the provided object is indeed a SafeUrl
 * object, and returns its value.
 *
 * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
 * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
 * be appropriately escaped before embedding in a HTML document. Note that the
 * required escaping is context-sensitive (e.g. a different escaping is
 * required for embedding a URL in a style property within a style
 * attribute, as opposed to embedding in a href attribute).
 *
 * @param {!goog.html.SafeUrl} safeUrl The object to extract from.
 * @return {string} The SafeUrl object's contained string, unless the run-time
 *     type check fails. In that case, `unwrap` returns an innocuous
 *     string, or, if assertions are enabled, throws
 *     `goog.asserts.AssertionError`.
 */
goog.html.SafeUrl.unwrap = function(safeUrl) {
  'use strict';
  // Perform additional Run-time type-checking to ensure that safeUrl is indeed
  // an instance of the expected type.  This provides some additional protection
  // against security bugs due to application code that disables type checks.
  // Specifically, the following checks are performed:
  // 1. The object is an instance of the expected type.
  // 2. The object is not an instance of a subclass.
  if (safeUrl instanceof goog.html.SafeUrl &&
      safeUrl.constructor === goog.html.SafeUrl) {
    return safeUrl.privateDoNotAccessOrElseSafeUrlWrappedValue_;
  } else {
    goog.asserts.fail(
        'expected object of type SafeUrl, got \'' + safeUrl + '\' of type ' +
        goog.typeOf(safeUrl));
    return 'type_error:SafeUrl';
  }
};


/**
 * Creates a SafeUrl object from a compile-time constant string.
 *
 * Compile-time constant strings are inherently program-controlled and hence
 * trusted.
 *
 * @param {!goog.string.Const} url A compile-time-constant string from which to
 *         create a SafeUrl.
 * @return {!goog.html.SafeUrl} A SafeUrl object initialized to `url`.
 */
goog.html.SafeUrl.fromConstant = function(url) {
  'use strict';
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      goog.string.Const.unwrap(url));
};


/**
 * A pattern that matches Blob or data types that can have SafeUrls created
 * from URL.createObjectURL(blob) or via a data: URI.
 *
 * This has some parameter support (most notably, we haven't implemented the
 * more complex parts like %-encoded characters or non-alphanumerical ones for
 * simplicity's sake). The specs are fairly complex, and they don't
 * always match Chrome's behavior: we settled on a subset where we're confident
 * all parties involved agree.
 *
 * The spec is available at https://mimesniff.spec.whatwg.org/ (and see
 * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of
 * it).
 * @const
 * @private
 */
goog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp(
    // Note: Due to content-sniffing concerns, only add MIME types for
    // media formats.
    '^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|' +
        'font/\\w+|' +
        'image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)|' +
        'video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))' +
        '(?:;\\w+=(?:\\w+|"[\\w;,= ]+"))*$',  // MIME type parameters
    'i');


/**
 * @param {string} mimeType The MIME type to check if safe.
 * @return {boolean} True if the MIME type is safe and creating a Blob via
 *   `SafeUrl.fromBlob()` with that type will not fail due to the type. False
 *   otherwise.
 */
goog.html.SafeUrl.isSafeMimeType = function(mimeType) {
  'use strict';
  return goog.html.SAFE_MIME_TYPE_PATTERN_.test(mimeType);
};


/**
 * Creates a SafeUrl wrapping a blob URL for the given `blob`.
 *
 * The blob URL is created with `URL.createObjectURL`. If the MIME type
 * for `blob` is not of a known safe audio, image or video MIME type,
 * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.
 *
 * Note: Call {@link revokeObjectUrl} on the URL after it's used
 * to prevent memory leaks.
 *
 * @see http://www.w3.org/TR/FileAPI/#url
 * @param {!Blob} blob
 * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped
 *   as a SafeUrl.
 */
goog.html.SafeUrl.fromBlob = function(blob) {
  'use strict';
  var url = goog.html.SafeUrl.isSafeMimeType(blob.type) ?
      goog.fs.url.createObjectUrl(blob) :
      goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Revokes an object URL created for a safe URL created {@link fromBlob()}.
 * @param {!goog.html.SafeUrl} safeUrl SafeUrl wrapping a blob object.
 * @return {void}
 */
goog.html.SafeUrl.revokeObjectUrl = function(safeUrl) {
  'use strict';
  var url = safeUrl.getTypedStringValue();
  if (url !== goog.html.SafeUrl.INNOCUOUS_STRING) {
    goog.fs.url.revokeObjectUrl(url);
  }
};


/**
 * Creates a SafeUrl wrapping a blob URL created for a MediaSource.
 * @param {!MediaSource} mediaSource
 * @return {!goog.html.SafeUrl} The blob URL.
 */
goog.html.SafeUrl.fromMediaSource = function(mediaSource) {
  'use strict';
  goog.asserts.assert(
      'MediaSource' in goog.global, 'No support for MediaSource');
  const url = mediaSource instanceof MediaSource ?
      goog.fs.url.createObjectUrl(mediaSource) :
      goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Matches a base-64 data URL, with the first match group being the MIME type.
 * @const
 * @private
 */
goog.html.DATA_URL_PATTERN_ = /^data:(.*);base64,[a-z0-9+\/]+=*$/i;


/**
 * Attempts to create a SafeUrl wrapping a `data:` URL, after validating it
 * matches a known-safe media MIME type. If it doesn't match, return `null`.
 *
 * @param {string} dataUrl A valid base64 data URL with one of the whitelisted
 *     media MIME types.
 * @return {?goog.html.SafeUrl} A matching safe URL, or `null` if it does not
 *     pass.
 */
goog.html.SafeUrl.tryFromDataUrl = function(dataUrl) {
  'use strict';
  // For defensive purposes, in case users cast around the parameter type.
  dataUrl = String(dataUrl);
  // RFC4648 suggest to ignore CRLF in base64 encoding.
  // See https://tools.ietf.org/html/rfc4648.
  // Remove the CR (%0D) and LF (%0A) from the dataUrl.
  var filteredDataUrl = dataUrl.replace(/(%0A|%0D)/g, '');
  var match = filteredDataUrl.match(goog.html.DATA_URL_PATTERN_);
  // Note: The only risk of XSS here is if the `data:` URL results in a
  // same-origin document. In which case content-sniffing might cause the
  // browser to interpret the contents as html.
  // All modern browsers consider `data:` URL documents to have unique empty
  // origins. Only Firefox for versions prior to v57 behaves differently:
  // https://blog.mozilla.org/security/2017/10/04/treating-data-urls-unique-origins-firefox-57/
  // Older versions of IE don't understand `data:` urls, so it is not an issue.
  if (match) {
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
        filteredDataUrl);
  }
  return null;
};


/**
 * Creates a SafeUrl wrapping a `data:` URL, after validating it matches a
 * known-safe media MIME type. If it doesn't match, return
 * `goog.html.SafeUrl.INNOCUOUS_URL`.
 *
 * @param {string} dataUrl A valid base64 data URL with one of the whitelisted
 *     media MIME types.
 * @return {!goog.html.SafeUrl} A matching safe URL, or
 *     `goog.html.SafeUrl.INNOCUOUS_URL` if it does not pass.
 */
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  'use strict';
  return goog.html.SafeUrl.tryFromDataUrl(dataUrl) ||
      goog.html.SafeUrl.INNOCUOUS_URL;
};


/**
 * Creates a SafeUrl wrapping a tel: URL.
 *
 * @param {string} telUrl A tel URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromTelUrl = function(telUrl) {
  'use strict';
  // There's a risk that a tel: URL could immediately place a call once
  // clicked, without requiring user confirmation. For that reason it is
  // handled in this separate function.
  if (!goog.string.internal.caseInsensitiveStartsWith(telUrl, 'tel:')) {
    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      telUrl);
};


/**
 * Matches a sip/sips URL. We only allow urls that consist of an email address.
 * The characters '?' and '#' are not allowed in the local part of the email
 * address.
 * @const
 * @private
 */
goog.html.SIP_URL_PATTERN_ = new RegExp(
    '^sip[s]?:[+a-z0-9_.!$%&\'*\\/=^`{|}~-]+@([a-z0-9-]+\\.)+[a-z0-9]{2,63}$',
    'i');


/**
 * Creates a SafeUrl wrapping a sip: URL. We only allow urls that consist of an
 * email address. The characters '?' and '#' are not allowed in the local part
 * of the email address.
 *
 * @param {string} sipUrl A sip URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromSipUrl = function(sipUrl) {
  'use strict';
  if (!goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(sipUrl))) {
    sipUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      sipUrl);
};


/**
 * Creates a SafeUrl wrapping a fb-messenger://share URL.
 *
 * @param {string} facebookMessengerUrl A facebook messenger URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromFacebookMessengerUrl = function(facebookMessengerUrl) {
  'use strict';
  if (!goog.string.internal.caseInsensitiveStartsWith(
          facebookMessengerUrl, 'fb-messenger://share')) {
    facebookMessengerUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      facebookMessengerUrl);
};

/**
 * Creates a SafeUrl wrapping a whatsapp://send URL.
 *
 * @param {string} whatsAppUrl A WhatsApp URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromWhatsAppUrl = function(whatsAppUrl) {
  'use strict';
  if (!goog.string.internal.caseInsensitiveStartsWith(
          whatsAppUrl, 'whatsapp://send')) {
    whatsAppUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      whatsAppUrl);
};

/**
 * Creates a SafeUrl wrapping a sms: URL.
 *
 * @param {string} smsUrl A sms URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromSmsUrl = function(smsUrl) {
  'use strict';
  if (!goog.string.internal.caseInsensitiveStartsWith(smsUrl, 'sms:') ||
      !goog.html.SafeUrl.isSmsUrlBodyValid_(smsUrl)) {
    smsUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      smsUrl);
};


/**
 * Validates SMS URL `body` parameter, which is optional and should appear at
 * most once and should be percent-encoded if present. Rejects many malformed
 * bodies, but may spuriously reject some URLs and does not reject all malformed
 * sms: URLs.
 *
 * @param {string} smsUrl A sms URL.
 * @return {boolean} Whether SMS URL has a valid `body` parameter if it exists.
 * @private
 */
goog.html.SafeUrl.isSmsUrlBodyValid_ = function(smsUrl) {
  'use strict';
  var hash = smsUrl.indexOf('#');
  if (hash > 0) {
    smsUrl = smsUrl.substring(0, hash);
  }
  var bodyParams = smsUrl.match(/[?&]body=/gi);
  // "body" param is optional
  if (!bodyParams) {
    return true;
  }
  // "body" MUST only appear once
  if (bodyParams.length > 1) {
    return false;
  }
  // Get the encoded `body` parameter value.
  var bodyValue = smsUrl.match(/[?&]body=([^&]*)/)[1];
  if (!bodyValue) {
    return true;
  }
  try {
    decodeURIComponent(bodyValue);
  } catch (error) {
    return false;
  }
  return /^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(bodyValue);
};


/**
 * Creates a SafeUrl wrapping a ssh: URL.
 *
 * @param {string} sshUrl A ssh URL.
 * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
 *     wrapped as a SafeUrl if it does not pass.
 */
goog.html.SafeUrl.fromSshUrl = function(sshUrl) {
  'use strict';
  if (!goog.string.internal.caseInsensitiveStartsWith(sshUrl, 'ssh://')) {
    sshUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      sshUrl);
};

/**
 * Sanitizes a Chrome extension URL to SafeUrl, given a compile-time-constant
 * extension identifier. Can also be restricted to chrome extensions.
 *
 * @param {string} url The url to sanitize. Should start with the extension
 *     scheme and the extension identifier.
 * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
 *     extension id to accept, as a compile-time constant or an array of those.
 *
 * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
 *     `INNOCUOUS_STRING` if it's not.
 */
goog.html.SafeUrl.sanitizeChromeExtensionUrl = function(url, extensionId) {
  'use strict';
  return goog.html.SafeUrl.sanitizeExtensionUrl_(
      /^chrome-extension:\/\/([^\/]+)\//, url, extensionId);
};

/**
 * Sanitizes a Firefox extension URL to SafeUrl, given a compile-time-constant
 * extension identifier. Can also be restricted to chrome extensions.
 *
 * @param {string} url The url to sanitize. Should start with the extension
 *     scheme and the extension identifier.
 * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
 *     extension id to accept, as a compile-time constant or an array of those.
 *
 * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
 *     `INNOCUOUS_STRING` if it's not.
 */
goog.html.SafeUrl.sanitizeFirefoxExtensionUrl = function(url, extensionId) {
  'use strict';
  return goog.html.SafeUrl.sanitizeExtensionUrl_(
      /^moz-extension:\/\/([^\/]+)\//, url, extensionId);
};

/**
 * Sanitizes a Edge extension URL to SafeUrl, given a compile-time-constant
 * extension identifier. Can also be restricted to chrome extensions.
 *
 * @param {string} url The url to sanitize. Should start with the extension
 *     scheme and the extension identifier.
 * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
 *     extension id to accept, as a compile-time constant or an array of those.
 *
 * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
 *     `INNOCUOUS_STRING` if it's not.
 */
goog.html.SafeUrl.sanitizeEdgeExtensionUrl = function(url, extensionId) {
  'use strict';
  return goog.html.SafeUrl.sanitizeExtensionUrl_(
      /^ms-browser-extension:\/\/([^\/]+)\//, url, extensionId);
};

/**
 * Private helper for converting extension URLs to SafeUrl, given the scheme for
 * that particular extension type. Use the sanitizeFirefoxExtensionUrl,
 * sanitizeChromeExtensionUrl or sanitizeEdgeExtensionUrl unless you're building
 * new helpers.
 *
 * @private
 * @param {!RegExp} scheme The scheme to accept as a RegExp extracting the
 *     extension identifier.
 * @param {string} url The url to sanitize. Should start with the extension
 *     scheme and the extension identifier.
 * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
 *     extension id to accept, as a compile-time constant or an array of those.
 *
 * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
 *     `INNOCUOUS_STRING` if it's not.
 */
goog.html.SafeUrl.sanitizeExtensionUrl_ = function(scheme, url, extensionId) {
  'use strict';
  var matches = scheme.exec(url);
  if (!matches) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  } else {
    var extractedExtensionId = matches[1];
    var acceptedExtensionIds;
    if (extensionId instanceof goog.string.Const) {
      acceptedExtensionIds = [goog.string.Const.unwrap(extensionId)];
    } else {
      acceptedExtensionIds = extensionId.map(function unwrap(x) {
        'use strict';
        return goog.string.Const.unwrap(x);
      });
    }
    if (acceptedExtensionIds.indexOf(extractedExtensionId) == -1) {
      url = goog.html.SafeUrl.INNOCUOUS_STRING;
    }
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};


/**
 * Creates a SafeUrl from TrustedResourceUrl. This is safe because
 * TrustedResourceUrl is more tightly restricted than SafeUrl.
 *
 * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl
 * @return {!goog.html.SafeUrl}
 */
goog.html.SafeUrl.fromTrustedResourceUrl = function(trustedResourceUrl) {
  'use strict';
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
      goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));
};


/**
 * A pattern that recognizes a commonly useful subset of URLs that satisfy
 * the SafeUrl contract.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * @private
 * @const {!RegExp}
 */
goog.html.SAFE_URL_PATTERN_ =
    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;

/**
 * Public version of goog.html.SAFE_URL_PATTERN_. Updating
 * goog.html.SAFE_URL_PATTERN_ doesn't seem to be backward compatible.
 * Namespace is also changed to goog.html.SafeUrl so it can be imported using
 * goog.require('goog.dom.SafeUrl').
 *
 * TODO(bangert): Remove SAFE_URL_PATTERN_
 * @const {!RegExp}
 */
goog.html.SafeUrl.SAFE_URL_PATTERN = goog.html.SAFE_URL_PATTERN_;

/**
 * Attempts to create a SafeUrl object from `url`. The input string is validated
 * to match a pattern of commonly used safe URLs. If validation fails, `null` is
 * returned.
 *
 * `url` may be a URL with the `http:`, `https:`, `mailto:`, `ftp:` or `data`
 * scheme, or a relative URL (i.e., a URL without a scheme; specifically, a
 * scheme-relative, absolute-path-relative, or path-relative URL).
 *
 * @see http://url.spec.whatwg.org/#concept-relative-url
 * @param {string|!goog.string.TypedString} url The URL to validate.
 * @return {?goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl, or null
 *     if validation fails.
 */
goog.html.SafeUrl.trySanitize = function(url) {
  'use strict';
  if (url instanceof goog.html.SafeUrl) {
    return url;
  }
  if (typeof url == 'object' && url.implementsGoogStringTypedString) {
    url = /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();
  } else {
    // For defensive purposes, in case users cast around the parameter type.
    url = String(url);
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    return goog.html.SafeUrl.tryFromDataUrl(url);
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};

/**
 * Creates a SafeUrl object from `url`. If `url` is a
 * `goog.html.SafeUrl` then it is simply returned. Otherwise the input string is
 * validated to match a pattern of commonly used safe URLs. If validation fails,
 * `goog.html.SafeUrl.INNOCUOUS_URL` is returned.
 *
 * `url` may be a URL with the `http:`, `https:`, `mailto:`, `ftp:` or `data`
 * scheme, or a relative URL (i.e., a URL without a scheme; specifically, a
 * scheme-relative, absolute-path-relative, or path-relative URL).
 *
 * @see http://url.spec.whatwg.org/#concept-relative-url
 * @param {string|!goog.string.TypedString} url The URL to validate.
 * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
 */
goog.html.SafeUrl.sanitize = function(url) {
  'use strict';
  return goog.html.SafeUrl.trySanitize(url) || goog.html.SafeUrl.INNOCUOUS_URL;
};

/**
 * Creates a SafeUrl object from `url`. If `url` is a
 * `goog.html.SafeUrl` then it is simply returned. Otherwise the input string is
 * validated to match a pattern of commonly used safe URLs.
 *
 * `url` may be a URL with the http, https, mailto or ftp scheme,
 * or a relative URL (i.e., a URL without a scheme; specifically, a
 * scheme-relative, absolute-path-relative, or path-relative URL).
 *
 * This function asserts (using goog.asserts) that the URL matches this pattern.
 * If it does not, in addition to failing the assert, an innocuous URL will be
 * returned.
 *
 * @see http://url.spec.whatwg.org/#concept-relative-url
 * @param {string|!goog.string.TypedString} url The URL to validate.
 * @param {boolean=} opt_allowDataUrl Whether to allow valid data: URLs.
 * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
 */
goog.html.SafeUrl.sanitizeAssertUnchanged = function(url, opt_allowDataUrl) {
  'use strict';
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else if (typeof url == 'object' && url.implementsGoogStringTypedString) {
    url = /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();
  } else {
    url = String(url);
  }
  if (opt_allowDataUrl && /^data:/i.test(url)) {
    var safeUrl = goog.html.SafeUrl.fromDataUrl(url);
    if (safeUrl.getTypedStringValue() == url) {
      return safeUrl;
    }
  }
  if (!goog.asserts.assert(
          goog.html.SAFE_URL_PATTERN_.test(url),
          '%s does not match the safe URL pattern', url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};

// MOE:begin_strip
/**
 * @define {boolean}
 */
goog.html.SafeUrl.ASSUME_IMPLEMENTS_URL_API_GOOG = goog.define(
    'ASSUME_IMPLEMENTS_URL_API_GOOG',
    // TODO(b/154845327) narrow this down if earlier featureset years allow,
    // if they get defined. FY2020 does NOT include Edge (EdgeHTML), which is
    // good as workarounds are needed for spec compliance and a searchParams
    // polyfill.
    goog.FEATURESET_YEAR >= 2020);

/**
 * @const {boolean} Tests for URL browser API support. e.g. IE doesn't support
 * it.
 * @private
 */
goog.html.SafeUrl.supportsURLAPI = /** @type {boolean} */ ({
  // TODO(b/155106210) Does this work without JSCompiler?
  valueOf() {
    if (goog.html.SafeUrl.ASSUME_IMPLEMENTS_URL_API_GOOG) {
      return true;
    }
    try {
      new URL('s://g');
      return true;
    } catch (e) {
      return false;
    }
  }
}.valueOf());

/**
 * Extracts the scheme from the given URL. If the URL is relative, https: is
 * assumed.
 * @param {string} url The URL to extract the scheme from.
 * @return {string|undefined} the URL scheme.
 */
goog.html.SafeUrl.legacyExtractScheme = function(url) {
  const aTag = /** @type {!HTMLAnchorElement} */ (document.createElement('a'));
  try {
    // We don't use the safe wrapper here because we don't want to sanitize the
    // URL (which would lead to a dependency loop anyway). This is safe because
    // this node is NEVER attached to the DOM.
    aTag.href = url;
  } catch (e) {
    return undefined;
  }
  // Chrome and Firefox resolve relative scheme to https directly,
  // while IE keeps a ':' or empty string protocol.
  const protocol = aTag.protocol;
  return (protocol === ':' || protocol === '') ? 'https:' : protocol;
};
// MOE:end_strip

/**
 * Extracts the scheme from the given URL. If the URL is relative, https: is
 * assumed.
 * @param {string} url The URL to extract the scheme from.
 * @return {string|undefined} the URL scheme.
 */
goog.html.SafeUrl.extractScheme = function(url) {
  // MOE:begin_strip
  // We defer to the browser URL parsing as much as possible to detect
  // javascript: schemes. However, old browsers like IE don't support it.
  if (!goog.html.SafeUrl.supportsURLAPI) {
    return goog.html.SafeUrl.legacyExtractScheme(url);
  }
  // MOE:end_strip
  let parsedUrl;
  try {
    parsedUrl = new URL(url);
  } catch (e) {
    // According to https://url.spec.whatwg.org/#constructors, the URL
    // constructor with one parameter throws if `url` is not absolute. In this
    // case, we are sure that no explicit scheme (javascript: ) is set.
    // This can also be a URL parsing error, but in this case the URL won't be
    // run anyway.
    return 'https:';
  }
  return parsedUrl.protocol;
};

/**
 * Creates a SafeUrl object from `url`. If `url` is a
 * `goog.html.SafeUrl` then it is simply returned. Otherwise javascript: URLs
 * are rejected.
 *
 * This function asserts (using goog.asserts) that the URL scheme is not
 * javascript. If it is, in addition to failing the assert, an innocuous URL
 * will be returned.
 *
 * @see http://url.spec.whatwg.org/#concept-relative-url
 * @param {string|!goog.string.TypedString} url The URL to validate.
 * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
 */
goog.html.SafeUrl.sanitizeJavascriptUrlAssertUnchanged = function(url) {
  'use strict';
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else if (typeof url == 'object' && url.implementsGoogStringTypedString) {
    url = /** @type {!goog.string.TypedString} */ (url).getTypedStringValue();
  } else {
    url = String(url);
  }
  // We don't rely on goog.url here to prevent a dependency cycle.
  const parsedScheme = goog.html.SafeUrl.extractScheme(url);
  if (!goog.asserts.assert(
          parsedScheme !== 'javascript:', '%s is a javascript: URL', url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};

/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @private {!Object}
 * @const
 */
goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_ = {};

/**
 * Package-internal utility method to create SafeUrl instances.
 *
 * @param {string} url The string to initialize the SafeUrl object with.
 * @return {!goog.html.SafeUrl} The initialized SafeUrl object.
 * @package
 */
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(
    url) {
  'use strict';
  return new goog.html.SafeUrl(
      url, goog.html.SafeUrl.CONSTRUCTOR_TOKEN_PRIVATE_);
};


/**
 * `INNOCUOUS_STRING` wrapped in a `SafeUrl`.
 * @const {!goog.html.SafeUrl}
 */
goog.html.SafeUrl.INNOCUOUS_URL =
    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
        goog.html.SafeUrl.INNOCUOUS_STRING);


/**
 * A SafeUrl corresponding to the special about:blank url.
 * @const {!goog.html.SafeUrl}
 */
goog.html.SafeUrl.ABOUT_BLANK =
    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(
        'about:blank');

//third_party/javascript/closure/html/safestyle.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview The SafeStyle type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.module('goog.html.SafeStyle');
goog.module.declareLegacyNamespace();

const Const = goog.require('goog.string.Const');
const SafeUrl = goog.require('goog.html.SafeUrl');
const TypedString = goog.require('goog.string.TypedString');
const {AssertionError, assert, fail} = goog.require('goog.asserts');
const {contains, endsWith} = goog.require('goog.string.internal');

/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @type {!Object}
 * @const
 */
const CONSTRUCTOR_TOKEN_PRIVATE = {};

/**
 * A string-like object which represents a sequence of CSS declarations
 * (`propertyName1: propertyvalue1; propertyName2: propertyValue2; ...`)
 * and that carries the security type contract that its value, as a string,
 * will not cause untrusted script execution (XSS) when evaluated as CSS in a
 * browser.
 *
 * Instances of this type must be created via the factory methods
 * (`SafeStyle.create` or `SafeStyle.fromConstant`)
 * and not by invoking its constructor. The constructor intentionally takes an
 * extra parameter that cannot be constructed outside of this file and the type
 * is immutable; hence only a default instance corresponding to the empty string
 * can be obtained via constructor invocation.
 *
 * SafeStyle's string representation can safely be:
 * <ul>
 *   <li>Interpolated as the content of a *quoted* HTML style attribute.
 *       However, the SafeStyle string *must be HTML-attribute-escaped* before
 *       interpolation.
 *   <li>Interpolated as the content of a {}-wrapped block within a stylesheet.
 *       '<' characters in the SafeStyle string *must be CSS-escaped* before
 *       interpolation. The SafeStyle string is also guaranteed not to be able
 *       to introduce new properties or elide existing ones.
 *   <li>Interpolated as the content of a {}-wrapped block within an HTML
 *       &lt;style&gt; element. '<' characters in the SafeStyle string
 *       *must be CSS-escaped* before interpolation.
 *   <li>Assigned to the style property of a DOM node. The SafeStyle string
 *       should not be escaped before being assigned to the property.
 * </ul>
 *
 * A SafeStyle may never contain literal angle brackets. Otherwise, it could
 * be unsafe to place a SafeStyle into a &lt;style&gt; tag (where it can't
 * be HTML escaped). For example, if the SafeStyle containing
 * `font: 'foo &lt;style/&gt;&lt;script&gt;evil&lt;/script&gt;'` were
 * interpolated within a &lt;style&gt; tag, this would then break out of the
 * style context into HTML.
 *
 * A SafeStyle may contain literal single or double quotes, and as such the
 * entire style string must be escaped when used in a style attribute (if
 * this were not the case, the string could contain a matching quote that
 * would escape from the style attribute).
 *
 * Values of this type must be composable, i.e. for any two values
 * `style1` and `style2` of this type,
 * `SafeStyle.unwrap(style1) +
 * SafeStyle.unwrap(style2)` must itself be a value that satisfies
 * the SafeStyle type constraint. This requirement implies that for any value
 * `style` of this type, `SafeStyle.unwrap(style)` must
 * not end in a "property value" or "property name" context. For example,
 * a value of `background:url("` or `font-` would not satisfy the
 * SafeStyle contract. This is because concatenating such strings with a
 * second value that itself does not contain unsafe CSS can result in an
 * overall string that does. For example, if `javascript:evil())"` is
 * appended to `background:url("}, the resulting string may result in
 * the execution of a malicious script.
 *
 * TODO(mlourenco): Consider whether we should implement UTF-8 interchange
 * validity checks and blacklisting of newlines (including Unicode ones) and
 * other whitespace characters (\t, \f). Document here if so and also update
 * SafeStyle.fromConstant().
 *
 * The following example values comply with this type's contract:
 * <ul>
 *   <li><pre>width: 1em;</pre>
 *   <li><pre>height:1em;</pre>
 *   <li><pre>width: 1em;height: 1em;</pre>
 *   <li><pre>background:url('http://url');</pre>
 * </ul>
 * In addition, the empty string is safe for use in a CSS attribute.
 *
 * The following example values do NOT comply with this type's contract:
 * <ul>
 *   <li><pre>background: red</pre> (missing a trailing semi-colon)
 *   <li><pre>background:</pre> (missing a value and a trailing semi-colon)
 *   <li><pre>1em</pre> (missing an attribute name, which provides context for
 *       the value)
 * </ul>
 *
 * @see SafeStyle#create
 * @see SafeStyle#fromConstant
 * @see http://www.w3.org/TR/css3-syntax/
 * @final
 * @struct
 * @implements {TypedString}
 */
class SafeStyle {
  /**
   * @param {string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG && token !== CONSTRUCTOR_TOKEN_PRIVATE) {
      throw Error('SafeStyle is not meant to be built directly');
    }

    /**
     * The contained value of this SafeStyle.  The field has a purposely
     * ugly name to make (non-compiled) code that attempts to directly access
     * this field stand out.
     * @const
     * @private {string}
     */
    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = value;

    /**
     * @override
     * @const {boolean}
     */
    this.implementsGoogStringTypedString = true;
  }


  /**
   * Creates a SafeStyle object from a compile-time constant string.
   *
   * `style` should be in the format
   * `name: value; [name: value; ...]` and must not have any < or >
   * characters in it. This is so that SafeStyle's contract is preserved,
   * allowing the SafeStyle to correctly be interpreted as a sequence of CSS
   * declarations and without affecting the syntactic structure of any
   * surrounding CSS and HTML.
   *
   * This method performs basic sanity checks on the format of `style`
   * but does not constrain the format of `name` and `value`, except
   * for disallowing tag characters.
   *
   * @param {!Const} style A compile-time-constant string from which
   *     to create a SafeStyle.
   * @return {!SafeStyle} A SafeStyle object initialized to
   *     `style`.
   */
  static fromConstant(style) {
    const styleString = Const.unwrap(style);
    if (styleString.length === 0) {
      return SafeStyle.EMPTY;
    }
    assert(
        endsWith(styleString, ';'),
        `Last character of style string is not ';': ${styleString}`);
    assert(
        contains(styleString, ':'),
        'Style string must contain at least one \':\', to ' +
            'specify a "name: value" pair: ' + styleString);
    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(
        styleString);
  };


  /**
   * Returns this SafeStyle's value as a string.
   *
   * IMPORTANT: In code where it is security relevant that an object's type is
   * indeed `SafeStyle`, use `SafeStyle.unwrap` instead of
   * this method. If in doubt, assume that it's security relevant. In
   * particular, note that goog.html functions which return a goog.html type do
   * not guarantee the returned instance is of the right type. For example:
   *
   * <pre>
   * var fakeSafeHtml = new String('fake');
   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
   * // instanceof goog.html.SafeHtml.
   * </pre>
   *
   * @return {string}
   * @see SafeStyle#unwrap
   * @override
   */
  getTypedStringValue() {
    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  }


  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeStyle, use
   * `SafeStyle.unwrap`.
   *
   * @return {string}
   * @see SafeStyle#unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_.toString();
  }


  /**
   * Performs a runtime check that the provided object is indeed a
   * SafeStyle object, and returns its value.
   *
   * @param {!SafeStyle} safeStyle The object to extract from.
   * @return {string} The safeStyle object's contained string, unless
   *     the run-time type check fails. In that case, `unwrap` returns an
   *     innocuous string, or, if assertions are enabled, throws
   *     `AssertionError`.
   */
  static unwrap(safeStyle) {
    // Perform additional Run-time type-checking to ensure that
    // safeStyle is indeed an instance of the expected type.  This
    // provides some additional protection against security bugs due to
    // application code that disables type checks.
    // Specifically, the following checks are performed:
    // 1. The object is an instance of the expected type.
    // 2. The object is not an instance of a subclass.
    if (safeStyle instanceof SafeStyle && safeStyle.constructor === SafeStyle) {
      return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
    } else {
      fail(
          `expected object of type SafeStyle, got '${safeStyle}` +
          '\' of type ' + goog.typeOf(safeStyle));
      return 'type_error:SafeStyle';
    }
  }


  /**
   * Package-internal utility method to create SafeStyle instances.
   *
   * @param {string} style The string to initialize the SafeStyle object with.
   * @return {!SafeStyle} The initialized SafeStyle object.
   * @package
   */
  static createSafeStyleSecurityPrivateDoNotAccessOrElse(style) {
    return new SafeStyle(style, CONSTRUCTOR_TOKEN_PRIVATE);
  }

  /**
   * Creates a new SafeStyle object from the properties specified in the map.
   * @param {!SafeStyle.PropertyMap} map Mapping of property names to
   *     their values, for example {'margin': '1px'}. Names must consist of
   *     [-_a-zA-Z0-9]. Values might be strings consisting of
   *     [-,.'"%_!# a-zA-Z0-9[\]], where ", ', and [] must be properly balanced.
   *     We also allow simple functions like rgb() and url() which sanitizes its
   *     contents. Other values must be wrapped in Const. URLs might
   *     be passed as SafeUrl which will be wrapped into url(""). We
   *     also support array whose elements are joined with ' '. Null value
   * causes skipping the property.
   * @return {!SafeStyle}
   * @throws {!Error} If invalid name is provided.
   * @throws {!AssertionError} If invalid value is provided. With
   *     disabled assertions, invalid value is replaced by
   *     SafeStyle.INNOCUOUS_STRING.
   */
  static create(map) {
    let style = '';
    for (let name in map) {
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name
      if (Object.prototype.hasOwnProperty.call(map, name)) {
        if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
          throw new Error(`Name allows only [-_a-zA-Z0-9], got: ${name}`);
        }
        let value = map[name];
        if (value == null) {
          continue;
        }
        if (Array.isArray(value)) {
          value = value.map(sanitizePropertyValue).join(' ');
        } else {
          value = sanitizePropertyValue(value);
        }
        style += `${name}:${value};`;
      }
    }
    if (!style) {
      return SafeStyle.EMPTY;
    }
    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
  };

  /**
   * Creates a new SafeStyle object by concatenating the values.
   * @param {...(!SafeStyle|!Array<!SafeStyle>)} var_args
   *     SafeStyles to concatenate.
   * @return {!SafeStyle}
   */
  static concat(var_args) {
    let style = '';

    /**
     * @param {!SafeStyle|!Array<!SafeStyle>} argument
     */
    const addArgument = argument => {
      if (Array.isArray(argument)) {
        argument.forEach(addArgument);
      } else {
        style += SafeStyle.unwrap(argument);
      }
    };

    Array.prototype.forEach.call(arguments, addArgument);
    if (!style) {
      return SafeStyle.EMPTY;
    }
    return SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
  };
}

/**
 * A SafeStyle instance corresponding to the empty string.
 * @const {!SafeStyle}
 */
SafeStyle.EMPTY = SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');


/**
 * The innocuous string generated by SafeStyle.create when passed
 * an unsafe value.
 * @const {string}
 */
SafeStyle.INNOCUOUS_STRING = 'zClosurez';


/**
 * A single property value.
 * @typedef {string|!Const|!SafeUrl}
 */
SafeStyle.PropertyValue;


/**
 * Mapping of property names to their values.
 * We don't support numbers even though some values might be numbers (e.g.
 * line-height or 0 for any length). The reason is that most numeric values need
 * units (e.g. '1px') and allowing numbers could cause users forgetting about
 * them.
 * @typedef {!Object<string, ?SafeStyle.PropertyValue|
 *     ?Array<!SafeStyle.PropertyValue>>}
 */
SafeStyle.PropertyMap;



/**
 * Checks and converts value to string.
 * @param {!SafeStyle.PropertyValue} value
 * @return {string}
 */
function sanitizePropertyValue(value) {
  if (value instanceof SafeUrl) {
    const url = SafeUrl.unwrap(value);
    return 'url("' + url.replace(/</g, '%3c').replace(/[\\"]/g, '\\$&') + '")';
  }
  const result = value instanceof Const ?
      Const.unwrap(value) :
      sanitizePropertyValueString(String(value));
  // These characters can be used to change context and we don't want that even
  // with const values.
  if (/[{;}]/.test(result)) {
    throw new AssertionError('Value does not allow [{;}], got: %s.', [result]);
  }
  return result;
}


/**
 * Checks string value.
 * @param {string} value
 * @return {string}
 */
function sanitizePropertyValueString(value) {
  // Some CSS property values permit nested functions. We allow one level of
  // nesting, and all nested functions must also be in the FUNCTIONS_RE_ list.
  const valueWithoutFunctions = value.replace(FUNCTIONS_RE, '$1')
                                    .replace(FUNCTIONS_RE, '$1')
                                    .replace(URL_RE, 'url');
  if (!VALUE_RE.test(valueWithoutFunctions)) {
    fail(
        `String value allows only ${VALUE_ALLOWED_CHARS}` +
        ' and simple functions, got: ' + value);
    return SafeStyle.INNOCUOUS_STRING;
  } else if (COMMENT_RE.test(value)) {
    fail(`String value disallows comments, got: ${value}`);
    return SafeStyle.INNOCUOUS_STRING;
  } else if (!hasBalancedQuotes(value)) {
    fail(`String value requires balanced quotes, got: ${value}`);
    return SafeStyle.INNOCUOUS_STRING;
  } else if (!hasBalancedSquareBrackets(value)) {
    fail(
        'String value requires balanced square brackets and one' +
        ' identifier per pair of brackets, got: ' + value);
    return SafeStyle.INNOCUOUS_STRING;
  }
  return sanitizeUrl(value);
}


/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 * @param {string} value Untrusted CSS property value.
 * @return {boolean} True if property value is safe with respect to quote
 *     balancedness.
 */
function hasBalancedQuotes(value) {
  let outsideSingle = true;
  let outsideDouble = true;
  for (let i = 0; i < value.length; i++) {
    const c = value.charAt(i);
    if (c == '\'' && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else if (c == '"' && outsideSingle) {
      outsideDouble = !outsideDouble;
    }
  }
  return outsideSingle && outsideDouble;
}


/**
 * Checks that square brackets ([ and ]) are properly balanced inside a string,
 * and that the content in the square brackets is one ident-token;
 * see https://www.w3.org/TR/css-syntax-3/#ident-token-diagram.
 * For practicality, and in line with other restrictions posed on SafeStyle
 * strings, we restrict the character set allowable in the ident-token to
 * [-_a-zA-Z0-9].
 * @param {string} value Untrusted CSS property value.
 * @return {boolean} True if property value is safe with respect to square
 *     bracket balancedness.
 */
function hasBalancedSquareBrackets(value) {
  let outside = true;
  const tokenRe = /^[-_a-zA-Z0-9]$/;
  for (let i = 0; i < value.length; i++) {
    const c = value.charAt(i);
    if (c == ']') {
      if (outside) return false;  // Unbalanced ].
      outside = true;
    } else if (c == '[') {
      if (!outside) return false;  // No nesting.
      outside = false;
    } else if (!outside && !tokenRe.test(c)) {
      return false;
    }
  }
  return outside;
}


/**
 * Characters allowed in VALUE_RE.
 * @type {string}
 */
const VALUE_ALLOWED_CHARS = '[-+,."\'%_!#/ a-zA-Z0-9\\[\\]]';


/**
 * Regular expression for safe values.
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure
 * they're balanced.
 * Square brackets ([ and ]) are allowed, but a check must be done elsewhere
 * to ensure they're balanced. The content inside a pair of square brackets must
 * be one alphanumeric identifier.
 * ',' allows multiple values to be assigned to the same property
 * (e.g. background-attachment or font-family) and hence could allow
 * multiple values to get injected, but that should pose no risk of XSS.
 * The expression checks only for XSS safety, not for CSS validity.
 * @const {!RegExp}
 */
const VALUE_RE = new RegExp(`^${VALUE_ALLOWED_CHARS}+\$`);


/**
 * Regular expression for url(). We support URLs allowed by
 * https://www.w3.org/TR/css-syntax-3/#url-token-diagram without using escape
 * sequences. Use percent-encoding if you need to use special characters like
 * backslash.
 * @const {!RegExp}
 */
const URL_RE = new RegExp(
    '\\b(url\\([ \t\n]*)(' +
        '\'[ -&(-\\[\\]-~]*\'' +  // Printable characters except ' and \.
        '|"[ !#-\\[\\]-~]*"' +    // Printable characters except " and \.
        '|[!#-&*-\\[\\]-~]*' +    // Printable characters except [ "'()\\].
        ')([ \t\n]*\\))',
    'g');

/**
 * Names of functions allowed in FUNCTIONS_RE.
 * @const {!Array<string>}
 */
const ALLOWED_FUNCTIONS = [
  'calc',
  'cubic-bezier',
  'fit-content',
  'hsl',
  'hsla',
  'linear-gradient',
  'matrix',
  'minmax',
  'radial-gradient',
  'repeat',
  'rgb',
  'rgba',
  '(rotate|scale|translate)(X|Y|Z|3d)?',
  'steps',
  'var',
];


/**
 * Regular expression for simple functions.
 * @const {!RegExp}
 */
const FUNCTIONS_RE = new RegExp(
    '\\b(' + ALLOWED_FUNCTIONS.join('|') + ')' +
        '\\([-+*/0-9a-zA-Z.%#\\[\\], ]+\\)',
    'g');


/**
 * Regular expression for comments. These are disallowed in CSS property values.
 * @const {!RegExp}
 */
const COMMENT_RE = /\/\*/;


/**
 * Sanitize URLs inside url().
 * NOTE: We could also consider using CSS.escape once that's available in the
 * browsers. However, loosely matching URL e.g. with url\(.*\) and then escaping
 * the contents would result in a slightly different language than CSS leading
 * to confusion of users. E.g. url(")") is valid in CSS but it would be invalid
 * as seen by our parser. On the other hand, url(\) is invalid in CSS but our
 * parser would be fine with it.
 * @param {string} value Untrusted CSS property value.
 * @return {string}
 */
function sanitizeUrl(value) {
  return value.replace(URL_RE, (match, before, url, after) => {
    let quote = '';
    url = url.replace(/^(['"])(.*)\1$/, (match, start, inside) => {
      quote = start;
      return inside;
    });
    const sanitized = SafeUrl.sanitize(url).getTypedStringValue();
    return before + quote + sanitized + quote + after;
  });
}


exports = SafeStyle;

;return exports;});

//third_party/javascript/closure/html/safestylesheet.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview The SafeStyleSheet type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.module('goog.html.SafeStyleSheet');
goog.module.declareLegacyNamespace();

const Const = goog.require('goog.string.Const');
const SafeStyle = goog.require('goog.html.SafeStyle');
const TypedString = goog.require('goog.string.TypedString');
const googObject = goog.require('goog.object');
const {assert, fail} = goog.require('goog.asserts');
const {contains} = goog.require('goog.string.internal');

/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @const {!Object}
 */
const CONSTRUCTOR_TOKEN_PRIVATE = {};

/**
 * A string-like object which represents a CSS style sheet and that carries the
 * security type contract that its value, as a string, will not cause untrusted
 * script execution (XSS) when evaluated as CSS in a browser.
 *
 * Instances of this type must be created via the factory method
 * `SafeStyleSheet.fromConstant` and not by invoking its constructor. The
 * constructor intentionally takes an extra parameter that cannot be constructed
 * outside of this file and the type is immutable; hence only a default instance
 * corresponding to the empty string can be obtained via constructor invocation.
 *
 * A SafeStyleSheet's string representation can safely be interpolated as the
 * content of a style element within HTML. The SafeStyleSheet string should
 * not be escaped before interpolation.
 *
 * Values of this type must be composable, i.e. for any two values
 * `styleSheet1` and `styleSheet2` of this type,
 * `SafeStyleSheet.unwrap(styleSheet1) + SafeStyleSheet.unwrap(styleSheet2)`
 * must itself be a value that satisfies the SafeStyleSheet type constraint.
 * This requirement implies that for any value `styleSheet` of this type,
 * `SafeStyleSheet.unwrap(styleSheet1)` must end in
 * "beginning of rule" context.
 *
 * A SafeStyleSheet can be constructed via security-reviewed unchecked
 * conversions. In this case producers of SafeStyleSheet must ensure themselves
 * that the SafeStyleSheet does not contain unsafe script. Note in particular
 * that `&lt;` is dangerous, even when inside CSS strings, and so should
 * always be forbidden or CSS-escaped in user controlled input. For example, if
 * `&lt;/style&gt;&lt;script&gt;evil&lt;/script&gt;"` were interpolated
 * inside a CSS string, it would break out of the context of the original
 * style element and `evil` would execute. Also note that within an HTML
 * style (raw text) element, HTML character references, such as
 * `&amp;lt;`, are not allowed. See
 * http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements
 * (similar considerations apply to the style element).
 *
 * @see SafeStyleSheet#fromConstant
 * @final
 * @implements {TypedString}
 */
class SafeStyleSheet {
  /**
   * @param {string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG && token !== CONSTRUCTOR_TOKEN_PRIVATE) {
      throw Error('SafeStyleSheet is not meant to be built directly');
    }

    /**
     * The contained value of this SafeStyleSheet.  The field has a purposely
     * ugly name to make (non-compiled) code that attempts to directly access
     * this field stand out.
     * @const
     * @private {string}
     */
    this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = value;

    /**
     * @override
     * @const
     */
    this.implementsGoogStringTypedString = true;
  }

  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeStyleSheet, use
   * `SafeStyleSheet.unwrap`.
   *
   * @return {string}
   * @see SafeStyleSheet#unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_.toString();
  }

  /**
   * Creates a style sheet consisting of one selector and one style definition.
   * Use {@link SafeStyleSheet.concat} to create longer style sheets.
   * This function doesn't support @import, @media and similar constructs.
   * @param {string} selector CSS selector, e.g. '#id' or 'tag .class, #id'. We
   *     support CSS3 selectors: https://w3.org/TR/css3-selectors/#selectors.
   * @param {!SafeStyle.PropertyMap|!SafeStyle} style Style
   *     definition associated with the selector.
   * @return {!SafeStyleSheet}
   * @throws {!Error} If invalid selector is provided.
   */
  static createRule(selector, style) {
    if (contains(selector, '<')) {
      throw new Error(`Selector does not allow '<', got: ${selector}`);
    }

    // Remove strings.
    const selectorToCheck =
        selector.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, '');

    // Check characters allowed in CSS3 selectors.
    if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=\\^$|]+$/.test(selectorToCheck)) {
      throw new Error(
          'Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=\\^$|] and ' +
          'strings, got: ' + selector);
    }

    // Check balanced () and [].
    if (!SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {
      throw new Error(
          '() and [] in selector must be balanced, got: ' + selector);
    }

    if (!(style instanceof SafeStyle)) {
      style = SafeStyle.create(style);
    }
    const styleSheet =
        `${selector}{` + SafeStyle.unwrap(style).replace(/</g, '\\3C ') + '}';
    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(
        styleSheet);
  }

  // MOE:begin_strip
  /**
   * Creates a style sheet consisting of one selector and one style definition.
   * Use {@link SafeStyleSheet.concat} to create longer style sheets.
   * This function doesn't support @import, @media and similar constructs.
   * @param {string} selector CSS selector, e.g. '#id' or 'tag .class, #id'. We
   *     support CSS3 selectors: https://w3.org/TR/css3-selectors/#selectors.
   * @param {!SafeStyle.PropertyMap|!SafeStyle} style Style
   *     definition associated with the selector.
   * @return {!SafeStyleSheet}
   * @throws {!Error} If invalid selector is provided.
   * @deprecated For migration purpose only.
   */
  static createRuleLegacy(selector, style) {
    if (contains(selector, '<')) {
      throw new Error(`Selector does not allow '<', got: ${selector}`);
    }

    // Remove strings.
    const selectorToCheck =
        selector.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, '');

    // Check characters allowed in CSS3 selectors.
    if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=\\^$|]+$/.test(selectorToCheck)) {
      throw new Error(
          'Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=\\^$|] and ' +
          'strings, got: ' + selector);
    }

    // Check balanced () and [].
    if (!SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {
      throw new Error(
          '() and [] in selector must be balanced, got: ' + selector);
    }

    if (!(style instanceof SafeStyle)) {
      style = SafeStyle.create(style);
    }
    const styleSheet =
        `${selector}{` + SafeStyle.unwrap(style).replace(/</g, '\\3C ') + '}';
    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(
        styleSheet);
  }
  // MOE:end_strip

  /**
   * Checks if a string has balanced () and [] brackets.
   * @param {string} s String to check.
   * @return {boolean}
   * @private
   */
  static hasBalancedBrackets_(s) {
    const brackets = {'(': ')', '[': ']'};
    const expectedBrackets = [];
    for (let i = 0; i < s.length; i++) {
      const ch = s[i];
      if (brackets[ch]) {
        expectedBrackets.push(brackets[ch]);
      } else if (googObject.contains(brackets, ch)) {
        if (expectedBrackets.pop() != ch) {
          return false;
        }
      }
    }
    return expectedBrackets.length == 0;
  }

  /**
   * Creates a new SafeStyleSheet object by concatenating values.
   * @param {...(!SafeStyleSheet|!Array<!SafeStyleSheet>)}
   *     var_args Values to concatenate.
   * @return {!SafeStyleSheet}
   */
  static concat(var_args) {
    let result = '';

    /**
     * @param {!SafeStyleSheet|!Array<!SafeStyleSheet>}
     *     argument
     */
    const addArgument = argument => {
      if (Array.isArray(argument)) {
        argument.forEach(addArgument);
      } else {
        result += SafeStyleSheet.unwrap(argument);
      }
    };

    Array.prototype.forEach.call(arguments, addArgument);
    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(
        result);
  }

  /**
   * Creates a SafeStyleSheet object from a compile-time constant string.
   *
   * `styleSheet` must not have any &lt; characters in it, so that
   * the syntactic structure of the surrounding HTML is not affected.
   *
   * @param {!Const} styleSheet A compile-time-constant string from
   *     which to create a SafeStyleSheet.
   * @return {!SafeStyleSheet} A SafeStyleSheet object initialized to
   *     `styleSheet`.
   */
  static fromConstant(styleSheet) {
    const styleSheetString = Const.unwrap(styleSheet);
    if (styleSheetString.length === 0) {
      return SafeStyleSheet.EMPTY;
    }
    // > is a valid character in CSS selectors and there's no strict need to
    // block it if we already block <.
    assert(
        !contains(styleSheetString, '<'),
        `Forbidden '<' character in style sheet string: ${styleSheetString}`);
    return SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(
        styleSheetString);
  }

  /**
   * Returns this SafeStyleSheet's value as a string.
   *
   * IMPORTANT: In code where it is security relevant that an object's type is
   * indeed `SafeStyleSheet`, use `SafeStyleSheet.unwrap`
   * instead of this method. If in doubt, assume that it's security relevant. In
   * particular, note that goog.html functions which return a goog.html type do
   * not guarantee the returned instance is of the right type. For example:
   *
   * <pre>
   * var fakeSafeHtml = new String('fake');
   * fakeSafeHtml.__proto__ = goog.html.SafeHtml.prototype;
   * var newSafeHtml = goog.html.SafeHtml.htmlEscape(fakeSafeHtml);
   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
   * // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml
   * // instanceof goog.html.SafeHtml.
   * </pre>
   *
   * @see SafeStyleSheet#unwrap
   * @override
   */
  getTypedStringValue() {
    return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  }

  /**
   * Performs a runtime check that the provided object is indeed a
   * SafeStyleSheet object, and returns its value.
   *
   * @param {!SafeStyleSheet} safeStyleSheet The object to extract from.
   * @return {string} The safeStyleSheet object's contained string, unless
   *     the run-time type check fails. In that case, `unwrap` returns an
   *     innocuous string, or, if assertions are enabled, throws
   *     `asserts.AssertionError`.
   */
  static unwrap(safeStyleSheet) {
    // Perform additional Run-time type-checking to ensure that
    // safeStyleSheet is indeed an instance of the expected type.  This
    // provides some additional protection against security bugs due to
    // application code that disables type checks.
    // Specifically, the following checks are performed:
    // 1. The object is an instance of the expected type.
    // 2. The object is not an instance of a subclass.
    if (safeStyleSheet instanceof SafeStyleSheet &&
        safeStyleSheet.constructor === SafeStyleSheet) {
      return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
    } else {
      fail(
          'expected object of type SafeStyleSheet, got \'' + safeStyleSheet +
          '\' of type ' + goog.typeOf(safeStyleSheet));
      return 'type_error:SafeStyleSheet';
    }
  }

  /**
   * Package-internal utility method to create SafeStyleSheet instances.
   *
   * @param {string} styleSheet The string to initialize the SafeStyleSheet
   *     object with.
   * @return {!SafeStyleSheet} The initialized SafeStyleSheet object.
   * @package
   */
  static createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet) {
    return new SafeStyleSheet(styleSheet, CONSTRUCTOR_TOKEN_PRIVATE);
  }
}

/**
 * A SafeStyleSheet instance corresponding to the empty string.
 * @const {!SafeStyleSheet}
 */
SafeStyleSheet.EMPTY =
    SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse('');


exports = SafeStyleSheet;

;return exports;});

//third_party/javascript/closure/labs/useragent/useragent.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Defines for goog.labs.userAgent.
 */

goog.module('goog.labs.userAgent');
goog.module.declareLegacyNamespace();

const flags = goog.require('goog.flags');

/**
 * @define {string} Optional runtime override for the USE_CLIENT_HINTS flag.
 * If this is set (for example, to 'foo.bar') then any value of USE_CLIENT_HINTS
 * will be overridden by `globalThis.foo.bar` if it is non-null.
 * This flag will be removed in December 2021.
 */
const USE_CLIENT_HINTS_OVERRIDE =
    goog.define('goog.labs.userAgent.USE_CLIENT_HINTS_OVERRIDE', '');

/**
 * @define {boolean} If true, use navigator.userAgentData.  Note: this overrides
 * the `USE_USER_AGENT_CLIENT_HINTS` runtime flag.  Please prefer the flag when
 * possible.
 */
const USE_CLIENT_HINTS =
    goog.define('goog.labs.userAgent.USE_CLIENT_HINTS', false);

let forceClientHintsInTests = false;

/**
 * Sets whether to use client hints APIs in tests for codepaths that
 *  - were originally implemented as checks against the navigator.userAgent
 *    string.
 *  - have an alternative implementation that uses Client Hints APIs.
 *
 * See the jsdoc on useClientHints for cases where this flag will be
 * ineffective, and the Client Hints APIs would be used regardless.
 * DO NOT call this function in production code - it will cause de-optimization.
 * @param {boolean} use Whether or not to use Client Hints API codepaths in
 *     goog.labs.useragent.* modules.
 */
exports.setUseClientHintsForTesting = (use) => {
  forceClientHintsInTests = use;
};

/** @const {boolean} */
const useClientHintsRuntimeOverride = USE_CLIENT_HINTS_OVERRIDE ?
    !!goog.getObjectByName(USE_CLIENT_HINTS_OVERRIDE) :
    false;

/**
 * Whether to use UserAgent-Client Hints API surfaces in parts of the
 * labs.userAgent package that previously only relied on the navigator.userAgent
 * string. Newer labs.userAgent API surfaces may ignore the result of this
 * function as they are considered opt-in API surfaces.
 * @const {function():boolean}
 */
exports.useClientHints = () => {
  return flags.USE_USER_AGENT_CLIENT_HINTS || USE_CLIENT_HINTS ||
      useClientHintsRuntimeOverride || forceClientHintsInTests;
};

;return exports;});

//third_party/javascript/closure/labs/useragent/util.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Utilities used by goog.labs.userAgent tools. These functions
 * should not be used outside of goog.labs.userAgent.*.
 *
 */

goog.module('goog.labs.userAgent.util');
goog.module.declareLegacyNamespace();

const {caseInsensitiveContains, contains} = goog.require('goog.string.internal');
const {useClientHints} = goog.require('goog.labs.userAgent');

/**
 * @const {boolean} If true, use navigator.userAgentData without check.
 * TODO(b/266827038): FEATURESET_YEAR >= 2024 if it supports mobile and all the
 * brands we need.  See https://caniuse.com/mdn-api_navigator_useragentdata.
 */
const ASSUME_CLIENT_HINTS_SUPPORT = false;

/**
 * Gets the native userAgent string from navigator if it exists.
 * If navigator or navigator.userAgent string is missing, returns an empty
 * string.
 * @return {string}
 */
function getNativeUserAgentString() {
  const navigator = getNavigator();
  if (navigator) {
    const userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return '';
}

/**
 * Gets the native userAgentData object from navigator if it exists.
 * If navigator.userAgentData object is missing returns null.
 * @return {?NavigatorUAData}
 */
function getNativeUserAgentData() {
  const navigator = getNavigator();
  // TODO(b/195343593): Use navigator?.userAgent ?? null once it's supported.
  if (navigator) {
    return navigator.userAgentData || null;
  }
  return null;
}

/**
 * Getter for the native navigator.
 * @return {!Navigator}
 */
function getNavigator() {
  return goog.global.navigator;
}

/**
 * A possible override for applications which wish to not check
 * navigator.userAgent but use a specified value for detection instead.
 * @type {?string}
 */
let userAgentInternal = null;

/**
 * A possible override for applications which wish to not check
 * navigator.userAgentData but use a specified value for detection instead.
 * @type {?NavigatorUAData}
 */
let userAgentDataInternal = getNativeUserAgentData();

/**
 * Override the user agent string with the given value.
 * This should only be used for testing within the goog.labs.userAgent
 * namespace.
 * Pass `null` to use the native browser object instead.
 * @param {?string=} userAgent The userAgent override.
 * @return {void}
 */
function setUserAgent(userAgent = undefined) {
  userAgentInternal =
      typeof userAgent === 'string' ? userAgent : getNativeUserAgentString();
}

/** @return {string} The user agent string. */
function getUserAgent() {
  return userAgentInternal == null ? getNativeUserAgentString() :
                                     userAgentInternal;
}

/**
 * Override the user agent data object with the given value.
 * This should only be used for testing within the goog.labs.userAgent
 * namespace.
 * Pass `null` to specify the absence of userAgentData. Note that this behavior
 * is different from setUserAgent.
 * @param {?NavigatorUAData} userAgentData The userAgentData override.
 */
function setUserAgentData(userAgentData) {
  userAgentDataInternal = userAgentData;
}

/**
 * If the user agent data object was overridden using setUserAgentData,
 * reset it so that it uses the native browser object instead, if it exists.
 */
function resetUserAgentData() {
  userAgentDataInternal = getNativeUserAgentData();
}

/** @return {?NavigatorUAData} Navigator.userAgentData if exist */
function getUserAgentData() {
  return userAgentDataInternal;
}

/**
 * Checks if any string in userAgentData.brands matches str.
 * Returns false if userAgentData is not supported.
 * @param {string} str
 * @return {boolean} Whether any brand string from userAgentData contains the
 *     given string.
 */
function matchUserAgentDataBrand(str) {
  if (!useClientHints()) return false;
  const data = getUserAgentData();
  if (!data) return false;
  return data.brands.some(({brand}) => brand && contains(brand, str));
}

/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string.
 */
function matchUserAgent(str) {
  const userAgent = getUserAgent();
  return contains(userAgent, str);
}

/**
 * @param {string} str
 * @return {boolean} Whether the user agent contains the given string, ignoring
 *     case.
 */
function matchUserAgentIgnoreCase(str) {
  const userAgent = getUserAgent();
  return caseInsensitiveContains(userAgent, str);
}

/**
 * Parses the user agent into tuples for each section.
 * @param {string} userAgent
 * @return {!Array<!Array<string>>} Tuples of key, version, and the contents of
 *     the parenthetical.
 */
function extractVersionTuples(userAgent) {
  // Matches each section of a user agent string.
  // Example UA:
  // Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
  // AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405
  // This has three version tuples: Mozilla, AppleWebKit, and Mobile.

  const versionRegExp = new RegExp(
      // Key. Note that a key may have a space.
      // (i.e. 'Mobile Safari' in 'Mobile Safari/5.0')
      '([A-Z][\\w ]+)' +

          '/' +                // slash
          '([^\\s]+)' +        // version (i.e. '5.0b')
          '\\s*' +             // whitespace
          '(?:\\((.*?)\\))?',  // parenthetical info. parentheses not matched.
      'g');

  const data = [];
  let match;

  // Iterate and collect the version tuples.  Each iteration will be the
  // next regex match.
  while (match = versionRegExp.exec(userAgent)) {
    data.push([
      match[1],  // key
      match[2],  // value
      // || undefined as this is not undefined in IE7 and IE8
      match[3] || undefined  // info
    ]);
  }

  return data;
}

exports = {
  ASSUME_CLIENT_HINTS_SUPPORT,
  extractVersionTuples,
  getNativeUserAgentString,
  getUserAgent,
  getUserAgentData,
  matchUserAgent,
  matchUserAgentDataBrand,
  matchUserAgentIgnoreCase,
  resetUserAgentData,
  setUserAgent,
  setUserAgentData,
};

;return exports;});

//third_party/javascript/closure/labs/useragent/highentropy/highentropyvalue.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Provides helper classes and objects to work with High Entropy
 * user agent values.
 */

goog.module('goog.labs.userAgent.highEntropy.highEntropyValue');

const util = goog.require('goog.labs.userAgent.util');
const {compareVersions} = goog.require('goog.string.internal');

/**
 * Represents a value that can be asynchronously loaded.
 * @interface
 * @template VALUE_TYPE
 */
class AsyncValue {
  /**
   * Get the value represented by this AsyncValue instance, if it was
   * previously requested.
   * @return {VALUE_TYPE|undefined}
   */
  getIfLoaded() {}

  /**
   * Request the value represented by this AsyncValue instance.
   * @return {!Promise<VALUE_TYPE>}
   */
  load() {}
}
exports.AsyncValue = AsyncValue;

/**
 * Represents a high-entropy value.
 * High-entropy values must be specifically requested from the Promise-based
 * Client Hints API.
 * @template VALUE_TYPE The type of the value wrapped by this HighEntropyValue
 *     instance.
 * @implements {AsyncValue<VALUE_TYPE>}
 */
class HighEntropyValue {
  /**
   * Constructs a new HighEntropyValue instance.
   * @param {string} key The name of the high-entropy value, used when
   * requesting it from the browser.
   */
  constructor(key) {
    /**
     * The key used to request the high-entropy value from the browser.
     * @const {string}
     * @private
     */
    this.key_ = key;

    /**
     * The value represented by this HighEntropyValue instance. If it hasn't
     * been successfully requested yet, its value will be undefined.
     * @type {VALUE_TYPE|undefined}
     * @protected
     */
    this.value_ = undefined;

    /**
     * The high-entropy value request. If it hasn't been requested yet, this
     * value will be undefined.
     * @type {!Promise<VALUE_TYPE>|undefined}
     * @private
     */
    this.promise_ = undefined;

    this.pending_ = false;
  }

  /**
   * @return {VALUE_TYPE|undefined}
   * @override
   */
  getIfLoaded() {
    const userAgentData = util.getUserAgentData();
    if (!userAgentData) {
      return undefined;
    }
    return this.value_;
  }

  /**
   * @return {!Promise<VALUE_TYPE>}
   * @override
   */
  async load() {
    const userAgentData = util.getUserAgentData();
    if (!userAgentData) return undefined;
    if (!this.promise_) {
      this.pending_ = true;
      this.promise_ = (async () => {
        try {
          const dataValues =
              await userAgentData.getHighEntropyValues([this.key_]);
          this.value_ =
              /** @type {!Object<string, VALUE_TYPE>} */ (
                  dataValues)[this.key_];
          return this.value_;
        } finally {
          this.pending_ = false;
        }
      })();
    }
    return await this.promise_;
  }

  resetForTesting() {
    if (this.pending_) {
      // There is a pending request that may set this.value_ at any time.
      // Therefore, it can't be guaranteed that this object is actually in a
      // clean state.
      throw new Error('Unsafe call to resetForTesting');
    }
    this.promise_ = undefined;
    this.value_ = undefined;
    this.pending_ = false;
  }
}
exports.HighEntropyValue = HighEntropyValue;

/**
 * An object that wraps a version string.
 * This allows for easy version comparisons.
 */
class Version {
  /**
   * @param {string} versionString The underlying version string.
   */
  constructor(versionString) {
    /**
     * @const {string}
     * @private
     */
    this.versionString_ = versionString;
  }

  /**
   * Returns the underlying version string.
   * @return {string}
   */
  toVersionStringForLogging() {
    return this.versionString_;
  }

  /**
   * Returns true if the underlying version string is equal to or greater than
   * the given version.
   * @param {string} version The version to compare against.
   * @return {boolean}
   */
  isAtLeast(version) {
    return compareVersions(this.versionString_, version) >= 0;
  }
}
exports.Version = Version;

;return exports;});

//third_party/javascript/closure/labs/useragent/highentropy/highentropydata.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Provides access to high-entropy user agent values.
 */

goog.module('goog.labs.userAgent.highEntropy.highEntropyData');

const {HighEntropyValue} = goog.require('goog.labs.userAgent.highEntropy.highEntropyValue');

/**
 * @type {!HighEntropyValue<!Array<!NavigatorUABrandVersion>|undefined>}
 */
const fullVersionList = new HighEntropyValue('fullVersionList');
exports.fullVersionList = fullVersionList;

/**
 * @type {!HighEntropyValue<string>}
 */
const platformVersion = new HighEntropyValue('platformVersion');
exports.platformVersion = platformVersion;
;return exports;});

//third_party/javascript/closure/labs/useragent/browser.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Closure user agent detection (Browser).
 * @see <a href="http://www.useragentstring.com/">User agent strings</a>
 * For more information on rendering engine, platform, or device see the other
 * sub-namespaces in goog.labs.userAgent, goog.labs.userAgent.platform,
 * goog.labs.userAgent.device respectively.)
 */

goog.module('goog.labs.userAgent.browser');
goog.module.declareLegacyNamespace();

const util = goog.require('goog.labs.userAgent.util');
const {AsyncValue, Version} = goog.require('goog.labs.userAgent.highEntropy.highEntropyValue');
const {assert, assertExists} = goog.require('goog.asserts');
const {compareVersions} = goog.require('goog.string.internal');
const {fullVersionList} = goog.require('goog.labs.userAgent.highEntropy.highEntropyData');
const {useClientHints} = goog.require('goog.labs.userAgent');

// TODO(nnaze): Refactor to remove excessive exclusion logic in matching
// functions.

/**
 * A browser brand represents an opaque string that is used for making
 * brand-specific version checks in userAgentData.
 * @enum {string}
 */
const Brand = {
  /**
   * The browser brand for Android Browser.
   * Do not depend on the value of this string. Because Android Browser has not
   * implemented userAgentData yet, the value of this string is not guaranteed
   * to stay the same in future revisions.
   */
  ANDROID_BROWSER: 'Android Browser',
  /**
   * The browser brand for Chromium, including Chromium-based Edge and Opera.
   */
  CHROMIUM: 'Chromium',
  /**
   * The browser brand for Edge.
   * This brand can be used to get the version of both EdgeHTML and
   * Chromium-based Edge.
   */
  EDGE: 'Microsoft Edge',
  /**
   * The browser brand for Firefox.
   * Do not depend on the value of this string. Because Firefox has not
   * implemented userAgentData yet, the value of this string is not guaranteed
   * to stay the same in future revisions.
   */
  FIREFOX: 'Firefox',
  /**
   * The browser brand for Internet Explorer.
   * Do not depend on the value of this string. Because IE will never support
   * userAgentData, the value of this string should be treated as opaque (it's
   * used internally for legacy-userAgent fallback).
   */
  IE: 'Internet Explorer',
  /**
   * The browser brand for Opera.
   * This brand can be used to get the version of both Presto- and
   * Chromium-based Opera.
   */
  OPERA: 'Opera',
  /**
   * The browser brand for Safari.
   * Do not depend on the value of this string. Because Safari has not
   * implemented userAgentData yet, the value of this string is not guaranteed
   * to stay the same in future revisions.
   */
  SAFARI: 'Safari',
  /**
   * The browser brand for Silk.
   * See
   * https://docs.aws.amazon.com/silk/latest/developerguide/what-is-silk.html
   * Do not depend on the value of this string. Because Silk does not
   * identify itself in userAgentData yet, the value of this string is not
   * guaranteed to stay the same in future revisions.
   */
  SILK: 'Silk',
};
exports.Brand = Brand;

/**
 * @param {boolean=} ignoreClientHintsFlag Iff truthy, the `useClientHints`
 *     function will not be called when evaluating if User-Agent Client Hints
 *     Brand data can be used. For existing labs.userAgent API surfaces with
 *     widespread use, this should be a falsy value so that usage of the Client
 *     Hints APIs can be gated behind flags / experiment rollouts.
 * @return {boolean} Whether to use navigator.userAgentData to determine
 * browser's brand.
 */
function useUserAgentDataBrand(ignoreClientHintsFlag = false) {
  if (util.ASSUME_CLIENT_HINTS_SUPPORT) return true;
  // High-entropy API surfaces should not be gated behind the useClientHints
  // check (as in production it is gated behind a define).
  if (!ignoreClientHintsFlag && !useClientHints()) return false;
  const userAgentData = util.getUserAgentData();
  return !!userAgentData && userAgentData.brands.length > 0;
}

/**
 * @return {boolean} Whether this browser is likely to have the fullVersionList
 * high-entropy Client Hint.
 */
function hasFullVersionList() {
  // https://chromiumdash.appspot.com/commits?commit=1eb643c3057e64ff4d22468432ad16c4cab12879&platform=Linux
  // indicates that for all platforms Chromium 98 shipped this feature.
  // See also
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Full-Version-List#browser_compatibility
  return isAtLeast(Brand.CHROMIUM, 98);
}

/**
 * @return {boolean} Whether the user's browser is Opera. Note: Chromium based
 *     Opera (Opera 15+) is detected as Chrome to avoid unnecessary special
 *     casing.
 */
function matchOpera() {
  if (useUserAgentDataBrand()) {
    // Pre-Chromium Edge doesn't support navigator.userAgentData.
    return false;
  }
  return util.matchUserAgent('Opera');
}

/** @return {boolean} Whether the user's browser is IE. */
function matchIE() {
  if (useUserAgentDataBrand()) {
    // IE doesn't support navigator.userAgentData.
    return false;
  }
  return util.matchUserAgent('Trident') || util.matchUserAgent('MSIE');
}

/**
 * @return {boolean} Whether the user's browser is Edge. This refers to
 *     EdgeHTML based Edge.
 */
function matchEdgeHtml() {
  if (useUserAgentDataBrand()) {
    // Pre-Chromium Edge doesn't support navigator.userAgentData.
    return false;
  }
  return util.matchUserAgent('Edge');
}

/** @return {boolean} Whether the user's browser is Chromium based Edge. */
function matchEdgeChromium() {
  if (useUserAgentDataBrand()) {
    return util.matchUserAgentDataBrand(Brand.EDGE);
  }
  return util.matchUserAgent('Edg/');
}

/** @return {boolean} Whether the user's browser is Chromium based Opera. */
function matchOperaChromium() {
  if (useUserAgentDataBrand()) {
    return util.matchUserAgentDataBrand(Brand.OPERA);
  }
  return util.matchUserAgent('OPR');
}

/** @return {boolean} Whether the user's browser is Firefox. */
function matchFirefox() {
  // Firefox doesn't support navigator.userAgentData yet, so use
  // navigator.userAgent.
  return util.matchUserAgent('Firefox') || util.matchUserAgent('FxiOS');
}

/** @return {boolean} Whether the user's browser is Safari. */
function matchSafari() {
  // Apple-based browsers don't support navigator.userAgentData yet, so use
  // navigator.userAgent.
  return util.matchUserAgent('Safari') &&
      !(matchChrome() || matchCoast() || matchOpera() || matchEdgeHtml() ||
        matchEdgeChromium() || matchOperaChromium() || matchFirefox() ||
        isSilk() || util.matchUserAgent('Android'));
}

/**
 * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based
 *     iOS browser).
 */
function matchCoast() {
  if (useUserAgentDataBrand()) {
    // Coast doesn't support navigator.userAgentData.
    return false;
  }
  return util.matchUserAgent('Coast');
}

/** @return {boolean} Whether the user's browser is iOS Webview. */
function matchIosWebview() {
  // Apple-based browsers don't support navigator.userAgentData yet, so use
  // navigator.userAgent.
  // iOS Webview does not show up as Chrome or Safari.
  return (util.matchUserAgent('iPad') || util.matchUserAgent('iPhone')) &&
      !matchSafari() && !matchChrome() && !matchCoast() && !matchFirefox() &&
      util.matchUserAgent('AppleWebKit');
}

/**
 * @return {boolean} Whether the user's browser is any Chromium browser. This
 *     returns true for Chrome, Opera 15+, and Edge Chromium.
 */
function matchChrome() {
  if (useUserAgentDataBrand()) {
    return util.matchUserAgentDataBrand(Brand.CHROMIUM);
  }
  return ((util.matchUserAgent('Chrome') || util.matchUserAgent('CriOS')) &&
          !matchEdgeHtml()) ||
      isSilk();
}

/** @return {boolean} Whether the user's browser is the Android browser. */
function matchAndroidBrowser() {
  // Android can appear in the user agent string for Chrome on Android.
  // This is not the Android standalone browser if it does.
  return util.matchUserAgent('Android') &&
      !(isChrome() || isFirefox() || isOpera() || isSilk());
}

/** @return {boolean} Whether the user's browser is Opera. */
const isOpera = matchOpera;
exports.isOpera = isOpera;

/** @return {boolean} Whether the user's browser is IE. */
const isIE = matchIE;
exports.isIE = isIE;

/** @return {boolean} Whether the user's browser is EdgeHTML based Edge. */
const isEdge = matchEdgeHtml;
exports.isEdge = isEdge;

/** @return {boolean} Whether the user's browser is Chromium based Edge. */
const isEdgeChromium = matchEdgeChromium;
exports.isEdgeChromium = isEdgeChromium;

/** @return {boolean} Whether the user's browser is Chromium based Opera. */
const isOperaChromium = matchOperaChromium;
exports.isOperaChromium = isOperaChromium;

/** @return {boolean} Whether the user's browser is Firefox. */
const isFirefox = matchFirefox;
exports.isFirefox = isFirefox;

/** @return {boolean} Whether the user's browser is Safari. */
const isSafari = matchSafari;
exports.isSafari = isSafari;

/**
 * @return {boolean} Whether the user's browser is Coast (Opera's Webkit-based
 *     iOS browser).
 */
const isCoast = matchCoast;
exports.isCoast = isCoast;

/** @return {boolean} Whether the user's browser is iOS Webview. */
const isIosWebview = matchIosWebview;
exports.isIosWebview = isIosWebview;

/**
 * @return {boolean} Whether the user's browser is any Chromium based browser (
 *     Chrome, Blink-based Opera (15+) and Edge Chromium).
 */
const isChrome = matchChrome;
exports.isChrome = isChrome;

/** @return {boolean} Whether the user's browser is the Android browser. */
const isAndroidBrowser = matchAndroidBrowser;
exports.isAndroidBrowser = isAndroidBrowser;

/**
 * For more information, see:
 * http://docs.aws.amazon.com/silk/latest/developerguide/user-agent.html
 * @return {boolean} Whether the user's browser is Silk.
 */
function isSilk() {
  // As of Silk 93, Silk does not identify itself in userAgentData.brands.
  // When Silk changes this behavior, update this method to call
  // matchUserAgentDataBrand (akin to isChrome, etc.)
  return util.matchUserAgent('Silk');
}
exports.isSilk = isSilk;

/**
 * A helper function that returns a function mapping a list of candidate
 * version tuple keys to the first version string present under a key.
 * Ex:
 * <code>
 * // Arg extracted from "Foo/1.2.3 Bar/0.2021"
 * const mapVersion = createVersionMap([["Foo", "1.2.3"], ["Bar", "0.2021"]]);
 * mapVersion(["Bar", "Foo"]); // returns "0.2021"
 * mapVersion(["Baz", "Foo"]); // returns "1.2.3"
 * mapVersion(["Baz", "???"]); // returns ""
 * </code>
 * @param {!Array<!Array<string>>} versionTuples Version tuples pre-extracted
 *     from a user agent string.
 * @return {function(!Array<string>): string} The version string, or empty
 * string if it doesn't exist under the given key.
 */
function createVersionMap(versionTuples) {
  // Construct a map for easy lookup.
  const versionMap = {};
  versionTuples.forEach((tuple) => {
    // Note that the tuple is of length three, but we only care about the
    // first two.
    const key = tuple[0];
    const value = tuple[1];
    versionMap[key] = value;
  });

  // Gives the value with the first key it finds, otherwise empty string.
  return (keys) => versionMap[keys.find((key) => key in versionMap)] || '';
}

/**
 * Returns the browser version.
 *
 * Note that for browsers with multiple brands, this function assumes a primary
 * brand and returns the version for that brand.
 *
 * Additionally, this function is not userAgentData-aware and will return
 * incorrect values when the User Agent string is frozen. The current status of
 * User Agent string freezing is available here:
 * https://www.chromestatus.com/feature/5704553745874944
 *
 * To mitigate both of these potential issues, use
 * getVersionStringForLogging() or fullVersionOf() instead.
 *
 * @return {string} The browser version or empty string if version cannot be
 *     determined. Note that for Internet Explorer, this returns the version of
 *     the browser, not the version of the rendering engine. (IE 8 in
 *     compatibility mode will return 8.0 rather than 7.0. To determine the
 *     rendering engine version, look at document.documentMode instead. See
 *     http://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx for more
 *     details.)
 */
function getVersion() {
  const userAgentString = util.getUserAgent();

  // Special case IE since IE's version is inside the parenthesis and
  // without the '/'.
  if (isIE()) {
    return getIEVersion(userAgentString);
  }

  const versionTuples = util.extractVersionTuples(userAgentString);
  const lookUpValueWithKeys = createVersionMap(versionTuples);

  // Check Opera before Chrome since Opera 15+ has "Chrome" in the string.
  // See
  // http://my.opera.com/ODIN/blog/2013/07/15/opera-user-agent-strings-opera-15-and-beyond
  if (isOpera()) {
    // Opera 10 has Version/10.0 but Opera/9.8, so look for "Version" first.
    // Opera uses 'OPR' for more recent UAs.
    return lookUpValueWithKeys(['Version', 'Opera']);
  }

  // Check Edge before Chrome since it has Chrome in the string.
  if (isEdge()) {
    return lookUpValueWithKeys(['Edge']);
  }

  // Check Chromium Edge before Chrome since it has Chrome in the string.
  if (isEdgeChromium()) {
    return lookUpValueWithKeys(['Edg']);
  }

  // Check Silk before Chrome since it may have Chrome in its string and be
  // treated as Chrome.
  if (isSilk()) {
    return lookUpValueWithKeys(['Silk']);
  }

  if (isChrome()) {
    return lookUpValueWithKeys(['Chrome', 'CriOS', 'HeadlessChrome']);
  }

  // Usually products browser versions are in the third tuple after "Mozilla"
  // and the engine.
  const tuple = versionTuples[2];
  return tuple && tuple[1] || '';
}
exports.getVersion = getVersion;

/**
 * Returns whether the current browser's version is at least as high as the
 * given one.
 *
 * Note that for browsers with multiple brands, this function assumes a primary
 * brand and checks the version for that brand.
 *
 * Additionally, this function is not userAgentData-aware and will return
 * incorrect values when the User Agent string is frozen. The current status of
 * User Agent string freezing is available here:
 * https://www.chromestatus.com/feature/5704553745874944
 *
 * To mitigate both of these potential issues, use isAtLeast()/isAtMost() or
 * fullVersionOf() instead.
 *
 * @param {string|number} version The version to check.
 * @return {boolean} Whether the browser version is higher or the same as the
 *     given version.
 * @deprecated Use isAtLeast()/isAtMost() instead.
 */
function isVersionOrHigher(version) {
  return compareVersions(getVersion(), version) >= 0;
}
exports.isVersionOrHigher = isVersionOrHigher;

/**
 * A helper function to determine IE version. More information:
 * http://msdn.microsoft.com/en-us/library/ie/bg182625(v=vs.85).aspx#uaString
 * http://msdn.microsoft.com/en-us/library/hh869301(v=vs.85).aspx
 * http://blogs.msdn.com/b/ie/archive/2010/03/23/introducing-ie9-s-user-agent-string.aspx
 * http://blogs.msdn.com/b/ie/archive/2009/01/09/the-internet-explorer-8-user-agent-string-updated-edition.aspx
 * @param {string} userAgent the User-Agent.
 * @return {string}
 */
function getIEVersion(userAgent) {
  // IE11 may identify itself as MSIE 9.0 or MSIE 10.0 due to an IE 11 upgrade
  // bug. Example UA:
  // Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; rv:11.0)
  // like Gecko.
  // See http://www.whatismybrowser.com/developers/unknown-user-agent-fragments.
  const rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }

  let version = '';
  const msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    // IE in compatibility mode usually identifies itself as MSIE 7.0; in this
    // case, use the Trident version to determine the version of IE. For more
    // details, see the links above.
    const tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == '7.0') {
      if (tridentVersion && tridentVersion[1]) {
        switch (tridentVersion[1]) {
          case '4.0':
            version = '8.0';
            break;
          case '5.0':
            version = '9.0';
            break;
          case '6.0':
            version = '10.0';
            break;
          case '7.0':
            version = '11.0';
            break;
        }
      } else {
        version = '7.0';
      }
    } else {
      version = msie[1];
    }
  }
  return version;
}

/**
 * A helper function to return the navigator.userAgent-supplied full version
 * number of the current browser or an empty string, based on whether the
 * current browser is the one specified.
 * @param {string} browser The brand whose version should be returned.
 * @return {string}
 */
function getFullVersionFromUserAgentString(browser) {
  const userAgentString = util.getUserAgent();
  // Special case IE since IE's version is inside the parenthesis and
  // without the '/'.
  if (browser === Brand.IE) {
    return isIE() ? getIEVersion(userAgentString) : '';
  }

  const versionTuples = util.extractVersionTuples(userAgentString);
  const lookUpValueWithKeys = createVersionMap(versionTuples);
  switch (browser) {
    case Brand.OPERA:
      // Opera 10 has Version/10.0 but Opera/9.8, so look for "Version"
      // first. Opera uses 'OPR' for more recent UAs.
      if (isOpera()) {
        return lookUpValueWithKeys(['Version', 'Opera']);
      } else if (isOperaChromium()) {
        return lookUpValueWithKeys(['OPR']);
      }
      break;
    case Brand.EDGE:
      if (isEdge()) {
        return lookUpValueWithKeys(['Edge']);
      } else if (isEdgeChromium()) {
        return lookUpValueWithKeys(['Edg']);
      }
      break;
    case Brand.CHROMIUM:
      if (isChrome()) {
        return lookUpValueWithKeys(['Chrome', 'CriOS', 'HeadlessChrome']);
      }
      break;
  }

  // For the following browsers, the browser version is in the third tuple after
  // "Mozilla" and the engine.
  if ((browser === Brand.FIREFOX && isFirefox()) ||
      (browser === Brand.SAFARI && isSafari()) ||
      (browser === Brand.ANDROID_BROWSER && isAndroidBrowser()) ||
      (browser === Brand.SILK && isSilk())) {
    const tuple = versionTuples[2];
    return tuple && tuple[1] || '';
  }

  return '';
}

/**
 * Returns the major version of the given browser brand, or NaN if the current
 * browser is not the given brand.
 * Note that the major version number may be different depending on which
 * browser is specified. The returned value can be used to make browser version
 * comparisons using comparison operators.
 * @private
 * @param {!Brand} browser The brand whose version should be returned.
 * @return {number} The major version number associated with the current
 * browser under the given brand, or NaN if the current browser doesn't match
 * the given brand.
 */
function versionOf_(browser) {
  let versionParts;
  // Silk currently does not identify itself in its userAgentData.brands array,
  // so if checking its version, always fall back to the user agent string.
  if (useUserAgentDataBrand() && browser !== Brand.SILK) {
    const data = util.getUserAgentData();
    const matchingBrand = data.brands.find(({brand}) => brand === browser);
    if (!matchingBrand || !matchingBrand.version) {
      return NaN;
    }
    versionParts = matchingBrand.version.split('.');
  } else {
    const fullVersion = getFullVersionFromUserAgentString(browser);
    if (fullVersion === '') {
      return NaN;
    }
    versionParts = fullVersion.split('.');
  }
  if (versionParts.length === 0) {
    return NaN;
  }
  const majorVersion = versionParts[0];
  return Number(majorVersion);  // Returns NaN if it is not parseable.
}

/**
 * Returns true if the current browser matches the given brand and is at least
 * the given major version. The major version must be a whole number (i.e.
 * decimals should not be used to represent a minor version).
 * @param {!Brand} brand The brand whose version should be returned.
 * @param {number} majorVersion The major version number to compare against.
 *     This must be a whole number.
 * @return {boolean} Whether the current browser both matches the given brand
 *     and is at least the given version.
 */
function isAtLeast(brand, majorVersion) {
  assert(
      Math.floor(majorVersion) === majorVersion,
      'Major version must be an integer');
  return versionOf_(brand) >= majorVersion;
}
exports.isAtLeast = isAtLeast;

/**
 * Returns true if the current browser matches the given brand and is at most
 * the given version. The major version must be a whole number (i.e. decimals
 * should not be used to represent a minor version).
 * @param {!Brand} brand The brand whose version should be returned.
 * @param {number} majorVersion The major version number to compare against.
 *     This must be a whole number.
 * @return {boolean} Whether the current browser both matches the given brand
 *     and is at most the given version.
 */
function isAtMost(brand, majorVersion) {
  assert(
      Math.floor(majorVersion) === majorVersion,
      'Major version must be an integer');
  return versionOf_(brand) <= majorVersion;
}
exports.isAtMost = isAtMost;

/**
 * Loads the high-entropy browser brand/version data and wraps the correct
 * version string in a Version object.
 * @implements {AsyncValue<!Version>}
 */
class HighEntropyBrandVersion {
  /**
   * @param {string} brand The brand whose version is retrieved in this
   *     container.
   * @param {boolean} useUach Whether to attempt to use the User-Agent Client
   *     Hints (UACH) API surface.
   * @param {string} fallbackVersion The fallback version derived from the
   *     userAgent string.
   */
  constructor(brand, useUach, fallbackVersion) {
    /** @private @const {string} */
    this.brand_ = brand;

    /** @private @const {!Version} */
    this.version_ = new Version(fallbackVersion);

    /** @private @const {boolean} */
    this.useUach_ = useUach;
  }

  /**
   * @return {!Version|undefined}
   * @override
   */
  getIfLoaded() {
    if (this.useUach_) {
      const loadedVersionList = fullVersionList.getIfLoaded();
      if (loadedVersionList !== undefined) {
        const matchingBrand =
            loadedVersionList.find(({brand}) => this.brand_ === brand);
        // We assumed in fullVersionOf that if the fullVersionList is defined
        // the brands must match. Double-check this here.
        assertExists(matchingBrand);
        return new Version(matchingBrand.version);
      }
      // Fallthrough to fallback on Pre-UACH implementation
    }
    // We want to make sure the loading semantics of the Pre-UACH implementation
    // match those of the UACH implementation. Loading must happen before any
    // data can be retrieved from getIfLoaded.
    // For HighEntropyBrandVersion, loading can either be done by calling #load
    // or by calling the module-local loadFullVersions function.
    if (preUachHasLoaded) {
      return this.version_;
    }
    return;
  }

  /**
   * @return {!Promise<!Version>}
   * @override
   */
  async load() {
    if (this.useUach_) {
      const loadedVersionList = await fullVersionList.load();
      if (loadedVersionList !== undefined) {
        const matchingBrand =
            loadedVersionList.find(({brand}) => this.brand_ === brand);
        assertExists(matchingBrand);
        return new Version(matchingBrand.version);
      }
      // Fallthrough to fallback on Pre-UACH implementation
    } else {
      // Await something so that calling load with or without UACH API
      // availability results in waiting at least one macrotask before allowing
      // access to the cached version information.
      await 0;
    }
    // Regardless of whether we are using UACH APIs, we can now allow access to
    // the fallback case
    preUachHasLoaded = true;
    return this.version_;
  }
}

/**
 * Whether full version data should be considered available when using UACH
 * fallback implementations. This is flipped to true when either
 * loadFullVersions or HighEntropyBrandVersion.prototype.load are called,
 * matching the global singleton semantics of the UACH codepaths.
 */
let preUachHasLoaded = false;

/**
 * Requests all full browser versions to be cached.  When the returned promise
 * resolves, subsequent calls to `fullVersionOf(...).getIfLoaded()` will return
 * a value.
 *
 * This method should be avoided in favor of directly awaiting
 * `fullVersionOf(...).load()` where it is used.
 *
 * @return {!Promise<void>}
 */
async function loadFullVersions() {
  if (useUserAgentDataBrand(true)) {
    await fullVersionList.load();
  }
  preUachHasLoaded = true;
}
exports.loadFullVersions = loadFullVersions;

/**
 * Resets module-local caches used by functionality in this module.
 * This is only for use by goog.labs.userAgent.testUtil.resetUserAgent (and
 * labs.userAgent tests).
 * @package
 */
exports.resetForTesting = () => {
  preUachHasLoaded = false;
  fullVersionList.resetForTesting();
};


/**
 * Returns an object that provides access to the full version string of the
 * current browser -- or undefined, based on whether the current browser matches
 * the requested browser brand. Note that the full version string is a
 * high-entropy value, and must be asynchronously loaded before it can be
 * accessed synchronously.
 * @param {!Brand} browser The brand whose version should be returned.
 * @return {!AsyncValue<!Version>|undefined} An object that can be used
 *     to get or load the full version string as a high-entropy value, or
 * undefined if the current browser doesn't match the given brand.
 */
function fullVersionOf(browser) {
  let fallbackVersionString = '';
  // If we are reasonably certain now that the browser we are on has the
  // fullVersionList high-entropy hint, then we can skip computing the fallback
  // value as we won't end up using it.
  if (!hasFullVersionList()) {
    fallbackVersionString = getFullVersionFromUserAgentString(browser);
  }
  // Silk has the UACH API surface, but currently does not identify itself in
  // the userAgentData.brands array. Fallback to using userAgent string version
  // for Silk.
  const useUach = browser !== Brand.SILK && useUserAgentDataBrand(true);
  if (useUach) {
    const data = util.getUserAgentData();
    // Operate under the assumption that the low-entropy and high-entropy lists
    // of brand/version pairs contain an identical set of brands. Therefore, if
    // the low-entropy list doesn't contain the given brand, return undefined.
    if (!data.brands.find(({brand}) => brand === browser)) {
      return undefined;
    }
  } else if (fallbackVersionString === '') {
    return undefined;
  }
  return new HighEntropyBrandVersion(browser, useUach, fallbackVersionString);
}
exports.fullVersionOf = fullVersionOf;


/**
 * Returns a version string for the current browser or undefined, based on
 * whether the current browser is the one specified.
 * This value should ONLY be used for logging/debugging purposes. Do not use it
 * to branch code paths. For comparing versions, use isAtLeast()/isAtMost() or
 * fullVersionOf() instead.
 * @param {!Brand} browser The brand whose version should be returned.
 * @return {string} The version as a string.
 */
function getVersionStringForLogging(browser) {
  if (useUserAgentDataBrand(true)) {
    const fullVersionObj = fullVersionOf(browser);
    if (fullVersionObj) {
      const fullVersion = fullVersionObj.getIfLoaded();
      if (fullVersion) {
        return fullVersion.toVersionStringForLogging();
      }
      // No full version, return the major version instead.
      const data = util.getUserAgentData();
      const matchingBrand = data.brands.find(({brand}) => brand === browser);
      // Checking for the existence of matchingBrand is not necessary because
      // the existence of fullVersionObj implies that there is already a
      // matching brand.
      assertExists(matchingBrand);
      return matchingBrand.version;
    }
    // If fullVersionObj is undefined, this doesn't mean that the full version
    // is unavailable, but rather that the current browser doesn't match the
    // input `browser` argument.
    return '';
  } else {
    return getFullVersionFromUserAgentString(browser);
  }
}
exports.getVersionStringForLogging = getVersionStringForLogging;

;return exports;});

//third_party/javascript/closure/html/safehtml.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */


/**
 * @fileoverview The SafeHtml type and its builders.
 *
 * TODO(xtof): Link to document stating type contract.
 */

goog.module('goog.html.SafeHtml');
goog.module.declareLegacyNamespace();

const Const = goog.require('goog.string.Const');
const SafeScript = goog.require('goog.html.SafeScript');
const SafeStyle = goog.require('goog.html.SafeStyle');
const SafeStyleSheet = goog.require('goog.html.SafeStyleSheet');
const SafeUrl = goog.require('goog.html.SafeUrl');
const TagName = goog.require('goog.dom.TagName');
const TrustedResourceUrl = goog.require('goog.html.TrustedResourceUrl');
const TypedString = goog.require('goog.string.TypedString');
const asserts = goog.require('goog.asserts');
const browser = goog.require('goog.labs.userAgent.browser');
const googArray = goog.require('goog.array');
const googObject = goog.require('goog.object');
const internal = goog.require('goog.string.internal');
const tags = goog.require('goog.dom.tags');
const trustedtypes = goog.require('goog.html.trustedtypes');


/**
 * Token used to ensure that object is created only from this file. No code
 * outside of this file can access this token.
 * @type {!Object}
 * @const
 */
const CONSTRUCTOR_TOKEN_PRIVATE = {};

/**
 * A string that is safe to use in HTML context in DOM APIs and HTML documents.
 *
 * A SafeHtml is a string-like object that carries the security type contract
 * that its value as a string will not cause untrusted script execution when
 * evaluated as HTML in a browser.
 *
 * Values of this type are guaranteed to be safe to use in HTML contexts,
 * such as, assignment to the innerHTML DOM property, or interpolation into
 * a HTML template in HTML PC_DATA context, in the sense that the use will not
 * result in a Cross-Site-Scripting vulnerability.
 *
 * Instances of this type must be created via the factory methods
 * (`SafeHtml.create`, `SafeHtml.htmlEscape`),
 * etc and not by invoking its constructor. The constructor intentionally takes
 * an extra parameter that cannot be constructed outside of this file and the
 * type is immutable; hence only a default instance corresponding to the empty
 * string can be obtained via constructor invocation.
 *
 * Creating SafeHtml objects HAS SIDE-EFFECTS due to calling Trusted Types Web
 * API.
 *
 * Note that there is no `SafeHtml.fromConstant`. The reason is that
 * the following code would create an unsafe HTML:
 *
 * ```
 * SafeHtml.concat(
 *     SafeHtml.fromConstant(Const.from('<script>')),
 *     SafeHtml.htmlEscape(userInput),
 *     SafeHtml.fromConstant(Const.from('<\/script>')));
 * ```
 *
 * There's `goog.dom.constHtmlToNode` to create a node from constant strings
 * only.
 *
 * @see SafeHtml.create
 * @see SafeHtml.htmlEscape
 * @final
 * @struct
 * @implements {TypedString}
 */
class SafeHtml {
  /**
   * @private
   * @param {!TrustedHTML|string} value
   * @param {!Object} token package-internal implementation detail.
   */
  constructor(value, token) {
    if (goog.DEBUG && token !== CONSTRUCTOR_TOKEN_PRIVATE) {
      throw Error('SafeHtml is not meant to be built directly');
    }

    /**
     * The contained value of this SafeHtml.  The field has a purposely ugly
     * name to make (non-compiled) code that attempts to directly access this
     * field stand out.
     * @const
     * @private {!TrustedHTML|string}
     */
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = value;

    /**
     * @override
     * @const {boolean}
     */
    this.implementsGoogStringTypedString = true;
  }


  /**
   * Returns this SafeHtml's value as string.
   *
   * IMPORTANT: In code where it is security relevant that an object's type is
   * indeed `SafeHtml`, use `SafeHtml.unwrap` instead of
   * this method. If in doubt, assume that it's security relevant. In
   * particular, note that goog.html functions which return a goog.html type do
   * not guarantee that the returned instance is of the right type. For example:
   *
   * <pre>
   * var fakeSafeHtml = new String('fake');
   * fakeSafeHtml.__proto__ = SafeHtml.prototype;
   * var newSafeHtml = SafeHtml.htmlEscape(fakeSafeHtml);
   * // newSafeHtml is just an alias for fakeSafeHtml, it's passed through by
   * // SafeHtml.htmlEscape() as fakeSafeHtml
   * // instanceof SafeHtml.
   * </pre>
   *
   * @return {string}
   * @see SafeHtml.unwrap
   * @override
   */
  getTypedStringValue() {
    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
  }


  /**
   * Returns a string-representation of this value.
   *
   * To obtain the actual string value wrapped in a SafeHtml, use
   * `SafeHtml.unwrap`.
   *
   * @return {string}
   * @see SafeHtml.unwrap
   * @override
   */
  toString() {
    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString();
  }

  /**
   * Performs a runtime check that the provided object is indeed a SafeHtml
   * object, and returns its value.
   * @param {!SafeHtml} safeHtml The object to extract from.
   * @return {string} The SafeHtml object's contained string, unless the
   *     run-time type check fails. In that case, `unwrap` returns an innocuous
   *     string, or, if assertions are enabled, throws
   *     `asserts.AssertionError`.
   */
  static unwrap(safeHtml) {
    return SafeHtml.unwrapTrustedHTML(safeHtml).toString();
  }


  /**
   * Unwraps value as TrustedHTML if supported or as a string if not.
   * @param {!SafeHtml} safeHtml
   * @return {!TrustedHTML|string}
   * @see SafeHtml.unwrap
   */
  static unwrapTrustedHTML(safeHtml) {
    // Perform additional run-time type-checking to ensure that safeHtml is
    // indeed an instance of the expected type.  This provides some additional
    // protection against security bugs due to application code that disables
    // type checks. Specifically, the following checks are performed:
    // 1. The object is an instance of the expected type.
    // 2. The object is not an instance of a subclass.
    if (safeHtml instanceof SafeHtml && safeHtml.constructor === SafeHtml) {
      return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
    } else {
      asserts.fail(
          `expected object of type SafeHtml, got '${safeHtml}' of type ` +
          goog.typeOf(safeHtml));
      return 'type_error:SafeHtml';
    }
  }

  /**
   * Returns HTML-escaped text as a SafeHtml object.
   *
   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
   *     the parameter is of type SafeHtml it is returned directly (no escaping
   *     is done).
   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.
   */
  static htmlEscape(textOrHtml) {
    if (textOrHtml instanceof SafeHtml) {
      return textOrHtml;
    }
    const textIsObject = typeof textOrHtml == 'object';
    let textAsString;
    if (textIsObject &&
        /** @type {?} */ (textOrHtml).implementsGoogStringTypedString) {
      textAsString =
          /** @type {!TypedString} */ (textOrHtml).getTypedStringValue();
    } else {
      textAsString = String(textOrHtml);
    }
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        internal.htmlEscape(textAsString));
  }


  /**
   * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
   * &lt;br&gt;.
   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
   *     the parameter is of type SafeHtml it is returned directly (no escaping
   *     is done).
   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.
   */
  static htmlEscapePreservingNewlines(textOrHtml) {
    if (textOrHtml instanceof SafeHtml) {
      return textOrHtml;
    }
    const html = SafeHtml.htmlEscape(textOrHtml);
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        internal.newLineToBr(SafeHtml.unwrap(html)));
  }


  /**
   * Returns HTML-escaped text as a SafeHtml object, with newlines changed to
   * &lt;br&gt; and escaping whitespace to preserve spatial formatting.
   * Character entity #160 is used to make it safer for XML.
   * @param {!SafeHtml.TextOrHtml_} textOrHtml The text to escape. If
   *     the parameter is of type SafeHtml it is returned directly (no escaping
   *     is done).
   * @return {!SafeHtml} The escaped text, wrapped as a SafeHtml.
   */
  static htmlEscapePreservingNewlinesAndSpaces(textOrHtml) {
    if (textOrHtml instanceof SafeHtml) {
      return textOrHtml;
    }
    const html = SafeHtml.htmlEscape(textOrHtml);
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        internal.whitespaceEscape(SafeHtml.unwrap(html)));
  }

  /**
   * Converts an arbitrary string into an HTML comment by HTML-escaping the
   * contents and embedding the result between HTML comment markers.
   *
   * Escaping is needed because Internet Explorer supports conditional comments
   * and so may render HTML markup within comments.
   *
   * @param {string} text
   * @return {!SafeHtml}
   */
  static comment(text) {
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        '<!--' + internal.htmlEscape(text) + '-->');
  }

  /**
   * Creates a SafeHtml content consisting of a tag with optional attributes and
   * optional content.
   *
   * For convenience tag names and attribute names are accepted as regular
   * strings, instead of Const. Nevertheless, you should not pass
   * user-controlled values to these parameters. Note that these parameters are
   * syntactically validated at runtime, and invalid values will result in
   * an exception.
   *
   * Example usage:
   *
   * SafeHtml.create('br');
   * SafeHtml.create('div', {'class': 'a'});
   * SafeHtml.create('p', {}, 'a');
   * SafeHtml.create('p', {}, SafeHtml.create('br'));
   *
   * SafeHtml.create('span', {
   *   'style': {'margin': '0'}
   * });
   *
   * To guarantee SafeHtml's type contract is upheld there are restrictions on
   * attribute values and tag names.
   *
   * - For attributes which contain script code (on*), a Const is
   *   required.
   * - For attributes which contain style (style), a SafeStyle or a
   *   SafeStyle.PropertyMap is required.
   * - For attributes which are interpreted as URLs (e.g. src, href) a
   *   SafeUrl, Const or string is required. If a string
   *   is passed, it will be sanitized with SafeUrl.sanitize().
   * - For tags which can load code or set security relevant page metadata,
   *   more specific SafeHtml.create*() functions must be used. Tags
   *   which are not supported by this function are applet, base, embed, iframe,
   *   link, math, meta, object, script, style, svg, and template.
   *
   * @param {!TagName|string} tagName The name of the tag. Only tag names
   *     consisting of [a-zA-Z0-9-] are allowed. Tag names documented above are
   *     disallowed.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping
   *     from attribute names to their values. Only attribute names consisting
   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the
   *     attribute to be omitted.
   * @param {!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put
   * inside the tag. This must be empty for void tags like <br>. Array elements
   * are concatenated.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid tag name, attribute name, or attribute value is
   *     provided.
   * @throws {!asserts.AssertionError} If content for void tag is provided.
   * @deprecated Use a recommended templating system like Lit instead.
   *     More information: go/goog.html-readme // LINE-INTERNAL
   */
  static create(tagName, attributes = undefined, content = undefined) {
    SafeHtml.verifyTagName(String(tagName));
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        String(tagName), attributes, content);
  }


  /**
   * Verifies if the tag name is valid and if it doesn't change the context.
   * E.g. STRONG is fine but SCRIPT throws because it changes context. See
   * SafeHtml.create for an explanation of allowed tags.
   * @param {string} tagName
   * @return {void}
   * @throws {!Error} If invalid tag name is provided.
   * @package
   */
  static verifyTagName(tagName) {
    if (!VALID_NAMES_IN_TAG.test(tagName)) {
      throw new Error(
          SafeHtml.ENABLE_ERROR_MESSAGES ? `Invalid tag name <${tagName}>.` :
                                           '');
    }
    if (tagName.toUpperCase() in NOT_ALLOWED_TAG_NAMES) {
      throw new Error(
          SafeHtml.ENABLE_ERROR_MESSAGES ?

              `Tag name <${tagName}> is not allowed for SafeHtml.` :
              '');
    }
  }


  /**
   * Creates a SafeHtml representing an iframe tag.
   *
   * This by default restricts the iframe as much as possible by setting the
   * sandbox attribute to the empty string. If the iframe requires less
   * restrictions, set the sandbox attribute as tight as possible, but do not
   * rely on the sandbox as a security feature because it is not supported by
   * older browsers. If a sandbox is essential to security (e.g. for third-party
   * frames), use createSandboxIframe which checks for browser support.
   *
   * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox
   *
   * @param {?TrustedResourceUrl=} src The value of the src
   *     attribute. If null or undefined src will not be set.
   * @param {?SafeHtml=} srcdoc The value of the srcdoc attribute.
   *     If null or undefined srcdoc will not be set.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping
   *     from attribute names to their values. Only attribute names consisting
   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the
   *     attribute to be omitted.
   * @param {!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put
   * inside the tag. Array elements are concatenated.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid tag name, attribute name, or attribute value is
   *     provided. If attributes
   * contains the src or srcdoc attributes.
   */
  static createIframe(
      src = undefined, srcdoc = undefined, attributes = undefined,
      content = undefined) {
    if (src) {
      // Check whether this is really TrustedResourceUrl.
      TrustedResourceUrl.unwrap(src);
    }

    const fixedAttributes = {};
    fixedAttributes['src'] = src || null;
    fixedAttributes['srcdoc'] = srcdoc && SafeHtml.unwrap(srcdoc);
    const defaultAttributes = {'sandbox': ''};
    const combinedAttrs = SafeHtml.combineAttributes(
        fixedAttributes, defaultAttributes, attributes);
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'iframe', combinedAttrs, content);
  }


  /**
   * Creates a SafeHtml representing a sandboxed iframe tag.
   *
   * The sandbox attribute is enforced in its most restrictive mode, an empty
   * string. Consequently, the security requirements for the src and srcdoc
   * attributes are relaxed compared to SafeHtml.createIframe. This function
   * will throw on browsers that do not support the sandbox attribute, as
   * determined by SafeHtml.canUseSandboxIframe.
   *
   * The SafeHtml returned by this function can trigger downloads with no
   * user interaction on Chrome (though only a few, further attempts are
   * blocked). Firefox and IE will block all downloads from the sandbox.
   *
   * @see https://developer.mozilla.org/en/docs/Web/HTML/Element/iframe#attr-sandbox
   * @see https://lists.w3.org/Archives/Public/public-whatwg-archive/2013Feb/0112.html
   *
   * @param {string|!SafeUrl=} src The value of the src
   *     attribute. If null or undefined src will not be set.
   * @param {string=} srcdoc The value of the srcdoc attribute.
   *     If null or undefined srcdoc will not be set. Will not be sanitized.
   * @param {!Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping
   *     from attribute names to their values. Only attribute names consisting
   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the
   *     attribute to be omitted.
   * @param {!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>=} content Content to HTML-escape and put
   * inside the tag. Array elements are concatenated.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid tag name, attribute name, or attribute value is
   *     provided. If attributes
   * contains the src, srcdoc or sandbox attributes. If browser does not support
   * the sandbox attribute on iframe.
   */
  static createSandboxIframe(
      src = undefined, srcdoc = undefined, attributes = undefined,
      content = undefined) {
    if (!SafeHtml.canUseSandboxIframe()) {
      throw new Error(
          SafeHtml.ENABLE_ERROR_MESSAGES ?
              'The browser does not support sandboxed iframes.' :
              '');
    }

    const fixedAttributes = {};
    if (src) {
      // Note that sanitize is a no-op on SafeUrl.
      fixedAttributes['src'] = SafeUrl.unwrap(SafeUrl.sanitize(src));
    } else {
      fixedAttributes['src'] = null;
    }
    fixedAttributes['srcdoc'] = srcdoc || null;
    fixedAttributes['sandbox'] = '';
    const combinedAttrs =
        SafeHtml.combineAttributes(fixedAttributes, {}, attributes);
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'iframe', combinedAttrs, content);
  }


  /**
   * Checks if the user agent supports sandboxed iframes.
   * @return {boolean}
   */
  static canUseSandboxIframe() {
    return goog.global['HTMLIFrameElement'] &&
        ('sandbox' in goog.global['HTMLIFrameElement'].prototype);
  }


  /**
   * Creates a SafeHtml representing a script tag with the src attribute.
   * @param {!TrustedResourceUrl} src The value of the src
   * attribute.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=}
   * attributes
   *     Mapping from attribute names to their values. Only attribute names
   *     consisting of [a-zA-Z0-9-] are allowed. Value of null or undefined
   *     causes the attribute to be omitted.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid attribute name or value is provided. If
   *     attributes  contains the
   * src attribute.
   */
  static createScriptSrc(src, attributes = undefined) {
    // TODO(mlourenco): The charset attribute should probably be blocked. If
    // its value is attacker controlled, the script contains attacker controlled
    // sub-strings (even if properly escaped) and the server does not set
    // charset then XSS is likely possible.
    // https://html.spec.whatwg.org/multipage/scripting.html#dom-script-charset

    // Check whether this is really TrustedResourceUrl.
    TrustedResourceUrl.unwrap(src);

    const fixedAttributes = {'src': src};
    const defaultAttributes = {};
    const combinedAttrs = SafeHtml.combineAttributes(
        fixedAttributes, defaultAttributes, attributes);
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'script', combinedAttrs);
  }

  /**
   * Creates a SafeHtml representing a script tag. Does not allow the language,
   * src, text or type attributes to be set.
   * @param {!SafeScript|!Array<!SafeScript>}
   *     script Content to put inside the tag. Array elements are
   *     concatenated.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping
   *     from attribute names to their values. Only attribute names consisting
   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the
   *     attribute to be omitted.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid attribute name or attribute value is provided.
   *     If attributes  contains the
   *     language, src or text attribute.
   * @deprecated Use safevalues.scriptToHtml instead.
   * MOE:begin_intracomment_strip
   * @package
   * MOE:end_intracomment_strip
   */
  static createScript(script, attributes = undefined) {
    for (let attr in attributes) {
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name
      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {
        const attrLower = attr.toLowerCase();
        if (attrLower == 'language' || attrLower == 'src' ||
            attrLower == 'text') {
          throw new Error(
              SafeHtml.ENABLE_ERROR_MESSAGES ?
                  `Cannot set "${attrLower}" attribute` :
                  '');
        }
      }
    }

    let content = '';
    script = googArray.concat(script);
    for (let i = 0; i < script.length; i++) {
      content += SafeScript.unwrap(script[i]);
    }
    // Convert to SafeHtml so that it's not HTML-escaped. This is safe because
    // as part of its contract, SafeScript should have no dangerous '<'.
    const htmlContent =
        SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content);
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'script', attributes, htmlContent);
  }


  /**
   * Creates a SafeHtml representing a style tag. The type attribute is set
   * to "text/css".
   * @param {!SafeStyleSheet|!Array<!SafeStyleSheet>}
   *     styleSheet Content to put inside the tag. Array elements are
   *     concatenated.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Mapping
   *     from attribute names to their values. Only attribute names consisting
   *     of [a-zA-Z0-9-] are allowed. Value of null or undefined causes the
   *     attribute to be omitted.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   * @throws {!Error} If invalid attribute name or attribute value is provided.
   *     If attributes  contains the
   *     type attribute.
   */
  static createStyle(styleSheet, attributes = undefined) {
    const fixedAttributes = {'type': 'text/css'};
    const defaultAttributes = {};
    const combinedAttrs = SafeHtml.combineAttributes(
        fixedAttributes, defaultAttributes, attributes);

    let content = '';
    styleSheet = googArray.concat(styleSheet);
    for (let i = 0; i < styleSheet.length; i++) {
      content += SafeStyleSheet.unwrap(styleSheet[i]);
    }
    // Convert to SafeHtml so that it's not HTML-escaped. This is safe because
    // as part of its contract, SafeStyleSheet should have no dangerous '<'.
    const htmlContent =
        SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content);
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'style', combinedAttrs, htmlContent);
  }


  /**
   * Creates a SafeHtml representing a meta refresh tag.
   * @param {!SafeUrl|string} url Where to redirect. If a string is
   *     passed, it will be sanitized with SafeUrl.sanitize().
   * @param {number=} secs Number of seconds until the page should be
   *     reloaded. Will be set to 0 if unspecified.
   * @return {!SafeHtml} The SafeHtml content with the tag.
   */
  static createMetaRefresh(url, secs = undefined) {
    // Note that sanitize is a no-op on SafeUrl.
    let unwrappedUrl = SafeUrl.unwrap(SafeUrl.sanitize(url));

    if (browser.isIE() || browser.isEdge()) {
      // IE/EDGE can't parse the content attribute if the url contains a
      // semicolon. We can fix this by adding quotes around the url, but then we
      // can't parse quotes in the URL correctly. Also, it seems that IE/EDGE
      // did not unescape semicolons in these URLs at some point in the past. We
      // take a best-effort approach.
      //
      // If the URL has semicolons (which may happen in some cases, see
      // http://www.w3.org/TR/1999/REC-html401-19991224/appendix/notes.html#h-B.2
      // for instance), wrap it in single quotes to protect the semicolons.
      // If the URL has semicolons and single quotes, url-encode the single
      // quotes as well.
      //
      // This is imperfect. Notice that both ' and ; are reserved characters in
      // URIs, so this could do the wrong thing, but at least it will do the
      // wrong thing in only rare cases.
      if (internal.contains(unwrappedUrl, ';')) {
        unwrappedUrl = '\'' + unwrappedUrl.replace(/'/g, '%27') + '\'';
      }
    }
    const attributes = {
      'http-equiv': 'refresh',
      'content': (secs || 0) + '; url=' + unwrappedUrl,
    };

    // This function will handle the HTML escaping for attributes.
    return SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
        'meta', attributes);
  }

  /**
   * Creates a new SafeHtml object by joining the parts with separator.
   * @param {!SafeHtml.TextOrHtml_} separator
   * @param {!Array<!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>>} parts Parts to join. If a part
   *     contains an array then each member of this array is also joined with
   * the separator.
   * @return {!SafeHtml}
   */
  static join(separator, parts) {
    const separatorHtml = SafeHtml.htmlEscape(separator);
    const content = [];

    /**
     * @param {!SafeHtml.TextOrHtml_|
     *     !Array<!SafeHtml.TextOrHtml_>} argument
     */
    const addArgument = (argument) => {
      if (Array.isArray(argument)) {
        argument.forEach(addArgument);
      } else {
        const html = SafeHtml.htmlEscape(argument);
        content.push(SafeHtml.unwrap(html));
      }
    };

    parts.forEach(addArgument);
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        content.join(SafeHtml.unwrap(separatorHtml)));
  }


  /**
   * Creates a new SafeHtml object by concatenating values.
   * @param {...(!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>)} var_args Values to concatenate.
   * @return {!SafeHtml}
   */
  static concat(var_args) {
    return SafeHtml.join(SafeHtml.EMPTY, Array.prototype.slice.call(arguments));
  }

  /**
   * Package-internal utility method to create SafeHtml instances.
   *
   * @param {string} html The string to initialize the SafeHtml object with.
   * @return {!SafeHtml} The initialized SafeHtml object.
   * @package
   */
  static createSafeHtmlSecurityPrivateDoNotAccessOrElse(html) {
    /** @noinline */
    const noinlineHtml = html;
    const policy = trustedtypes.getPolicyPrivateDoNotAccessOrElse();
    const trustedHtml = policy ? policy.createHTML(noinlineHtml) : noinlineHtml;
    return new SafeHtml(trustedHtml, CONSTRUCTOR_TOKEN_PRIVATE);
  }


  /**
   * Like create() but does not restrict which tags can be constructed.
   *
   * @param {string} tagName Tag name. Set or validated by caller.
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes
   * @param {(!SafeHtml.TextOrHtml_|
   *     !Array<!SafeHtml.TextOrHtml_>)=} content
   * @return {!SafeHtml}
   * @throws {!Error} If invalid or unsafe attribute name or value is provided.
   * @throws {!asserts.AssertionError} If content for void tag is provided.
   * @package
   */
  static createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(
      tagName, attributes = undefined, content = undefined) {
    let result = `<${tagName}`;
    result += SafeHtml.stringifyAttributes(tagName, attributes);

    if (content == null) {
      content = [];
    } else if (!Array.isArray(content)) {
      content = [content];
    }

    if (tags.isVoidTag(tagName.toLowerCase())) {
      asserts.assert(
          !content.length, `Void tag <${tagName}> does not allow content.`);
      result += '>';
    } else {
      const html = SafeHtml.concat(content);
      result += '>' + SafeHtml.unwrap(html) + '</' + tagName + '>';
    }

    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result);
  }


  /**
   * Creates a string with attributes to insert after tagName.
   * @param {string} tagName
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes
   * @return {string} Returns an empty string if there are no attributes,
   *     returns a string starting with a space otherwise.
   * @throws {!Error} If attribute value is unsafe for the given tag and
   *     attribute.
   * @package
   */
  static stringifyAttributes(tagName, attributes = undefined) {
    let result = '';
    if (attributes) {
      for (let name in attributes) {
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name
        if (Object.prototype.hasOwnProperty.call(attributes, name)) {
          if (!VALID_NAMES_IN_TAG.test(name)) {
            throw new Error(
                SafeHtml.ENABLE_ERROR_MESSAGES ?
                    `Invalid attribute name "${name}".` :
                    '');
          }
          const value = attributes[name];
          if (value == null) {
            continue;
          }
          result += ' ' + getAttrNameAndValue(tagName, name, value);
        }
      }
    }
    return result;
  }


  /**
   * @param {!Object<string, ?SafeHtml.AttributeValue>} fixedAttributes
   * @param {!Object<string, string>} defaultAttributes
   * @param {?Object<string, ?SafeHtml.AttributeValue>=} attributes  Optional
   *     attributes passed to create*().
   * @return {!Object<string, ?SafeHtml.AttributeValue>}
   * @throws {!Error} If attributes contains an attribute with the same name as
   *     an attribute in fixedAttributes.
   * @package
   */
  static combineAttributes(
      fixedAttributes, defaultAttributes, attributes = undefined) {
    const combinedAttributes = {};

    for (const name in fixedAttributes) {
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty#Using_hasOwnProperty_as_a_property_name
      if (Object.prototype.hasOwnProperty.call(fixedAttributes, name)) {
        asserts.assert(name.toLowerCase() == name, 'Must be lower case');
        combinedAttributes[name] = fixedAttributes[name];
      }
    }
    for (const name in defaultAttributes) {
      if (Object.prototype.hasOwnProperty.call(defaultAttributes, name)) {
        asserts.assert(name.toLowerCase() == name, 'Must be lower case');
        combinedAttributes[name] = defaultAttributes[name];
      }
    }

    if (attributes) {
      for (const name in attributes) {
        if (Object.prototype.hasOwnProperty.call(attributes, name)) {
          const nameLower = name.toLowerCase();
          if (nameLower in fixedAttributes) {
            throw new Error(
                SafeHtml.ENABLE_ERROR_MESSAGES ?
                    `Cannot override "${nameLower}" attribute, got "` + name +
                        '" with value "' + attributes[name] + '"' :
                    '');
          }
          if (nameLower in defaultAttributes) {
            delete combinedAttributes[nameLower];
          }
          combinedAttributes[name] = attributes[name];
        }
      }
    }

    return combinedAttributes;
  }
}


/**
 * @define {boolean} Whether to strip out error messages or to leave them in.
 */
SafeHtml.ENABLE_ERROR_MESSAGES =
    goog.define('goog.html.SafeHtml.ENABLE_ERROR_MESSAGES', goog.DEBUG);


/**
 * Whether the `style` attribute is supported. Set to false to avoid the byte
 * weight of `SafeStyle` where unneeded. An error will be thrown if
 * the `style` attribute is used.
 * @define {boolean}
 */
SafeHtml.SUPPORT_STYLE_ATTRIBUTE =
    goog.define('goog.html.SafeHtml.SUPPORT_STYLE_ATTRIBUTE', true);


/**
 * Shorthand for union of types that can sensibly be converted to strings
 * or might already be SafeHtml (as SafeHtml is a TypedString).
 * @private
 * @typedef {string|number|boolean|!TypedString}
 */
SafeHtml.TextOrHtml_;


/**
 * Coerces an arbitrary object into a SafeHtml object.
 *
 * If `textOrHtml` is already of type `SafeHtml`, the same
 * object is returned. Otherwise, `textOrHtml` is coerced to string, and
 * HTML-escaped.
 *
 * @param {!SafeHtml.TextOrHtml_} textOrHtml The text or SafeHtml to
 *     coerce.
 * @return {!SafeHtml} The resulting SafeHtml object.
 * @deprecated Use SafeHtml.htmlEscape.
 */
SafeHtml.from = SafeHtml.htmlEscape;


/**
 * @const
 */
const VALID_NAMES_IN_TAG = /^[a-zA-Z0-9-]+$/;


/**
 * Set of attributes containing URL as defined at
 * http://www.w3.org/TR/html5/index.html#attributes-1.
 * @const {!Object<string,boolean>}
 */
const URL_ATTRIBUTES = googObject.createSet(
    'action', 'cite', 'data', 'formaction', 'href', 'manifest', 'poster',
    'src');


/**
 * Tags which are unsupported via create(). They might be supported via a
 * tag-specific create method. These are tags which might require a
 * TrustedResourceUrl in one of their attributes or a restricted type for
 * their content.
 * @const {!Object<string,boolean>}
 */
const NOT_ALLOWED_TAG_NAMES = googObject.createSet(
    TagName.APPLET, TagName.BASE, TagName.EMBED, TagName.IFRAME, TagName.LINK,
    TagName.MATH, TagName.META, TagName.OBJECT, TagName.SCRIPT, TagName.STYLE,
    TagName.SVG, TagName.TEMPLATE);


/**
 * @typedef {string|number|!TypedString|
 *     !SafeStyle.PropertyMap|undefined|null}
 */
SafeHtml.AttributeValue;


/**
 * @param {string} tagName The tag name.
 * @param {string} name The attribute name.
 * @param {!SafeHtml.AttributeValue} value The attribute value.
 * @return {string} A "name=value" string.
 * @throws {!Error} If attribute value is unsafe for the given tag and
 *     attribute.
 * @private
 */
function getAttrNameAndValue(tagName, name, value) {
  // If it's goog.string.Const, allow any valid attribute name.
  if (value instanceof Const) {
    value = Const.unwrap(value);
  } else if (name.toLowerCase() == 'style') {
    if (SafeHtml.SUPPORT_STYLE_ATTRIBUTE) {
      value = getStyleValue(value);
    } else {
      throw new Error(
          SafeHtml.ENABLE_ERROR_MESSAGES ? 'Attribute "style" not supported.' :
                                           '');
    }
  } else if (/^on/i.test(name)) {
    // TODO(jakubvrana): Disallow more attributes with a special meaning.
    throw new Error(
        SafeHtml.ENABLE_ERROR_MESSAGES ? `Attribute "${name}` +
                '" requires goog.string.Const value, "' + value + '" given.' :
                                         '');
    // URL attributes handled differently according to tag.
  } else if (name.toLowerCase() in URL_ATTRIBUTES) {
    if (value instanceof TrustedResourceUrl) {
      value = TrustedResourceUrl.unwrap(value);
    } else if (value instanceof SafeUrl) {
      value = SafeUrl.unwrap(value);
    } else if (typeof value === 'string') {
      value = SafeUrl.sanitize(value).getTypedStringValue();
    } else {
      throw new Error(
          SafeHtml.ENABLE_ERROR_MESSAGES ?
              `Attribute "${name}" on tag "${tagName}` +
                  '" requires goog.html.SafeUrl, goog.string.Const, or' +
                  ' string, value "' + value + '" given.' :
              '');
    }
  }

  // Accept SafeUrl, TrustedResourceUrl, etc. for attributes which only require
  // HTML-escaping.
  if (/** @type {?} */ (value).implementsGoogStringTypedString) {
    // Ok to call getTypedStringValue() since there's no reliance on the type
    // contract for security here.
    value =
        /** @type {!TypedString} */ (value).getTypedStringValue();
  }

  asserts.assert(
      typeof value === 'string' || typeof value === 'number',
      'String or number value expected, got ' + (typeof value) +
          ' with value: ' + value);
  return `${name}="` + internal.htmlEscape(String(value)) + '"';
}


/**
 * Gets value allowed in "style" attribute.
 * @param {!SafeHtml.AttributeValue} value It could be SafeStyle or a
 *     map which will be passed to SafeStyle.create.
 * @return {string} Unwrapped value.
 * @throws {!Error} If string value is given.
 * @private
 */
function getStyleValue(value) {
  if (!goog.isObject(value)) {
    throw new Error(
        SafeHtml.ENABLE_ERROR_MESSAGES ?
            'The "style" attribute requires goog.html.SafeStyle or map ' +
                'of style properties, ' + (typeof value) + ' given: ' + value :
            '');
  }
  if (!(value instanceof SafeStyle)) {
    // Process the property bag into a style object.
    value = SafeStyle.create(value);
  }
  return SafeStyle.unwrap(value);
}


/**
 * A SafeHtml instance corresponding to the HTML doctype: "<!DOCTYPE html>".
 * @const {!SafeHtml}
 */
SafeHtml.DOCTYPE_HTML = /** @type {!SafeHtml} */ ({
  // NOTE: this compiles to nothing, but hides the possible side effect of
  // SafeHtml creation (due to calling trustedTypes.createPolicy) from the
  // compiler so that the entire call can be removed if the result is not used.
  // MOE:begin_strip
  // TODO(b/155299094): Refactor after adding compiler support.
  // MOE:end_strip
  valueOf: function() {
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(
        '<!DOCTYPE html>');
  },
}.valueOf());

/**
 * A SafeHtml instance corresponding to the empty string.
 * @const {!SafeHtml}
 */
SafeHtml.EMPTY = new SafeHtml(
    (goog.global.trustedTypes && goog.global.trustedTypes.emptyHTML) || '',
    CONSTRUCTOR_TOKEN_PRIVATE);

/**
 * A SafeHtml instance corresponding to the <br> tag.
 * @const {!SafeHtml}
 */
SafeHtml.BR = /** @type {!SafeHtml} */ ({
  // NOTE: this compiles to nothing, but hides the possible side effect of
  // SafeHtml creation (due to calling trustedTypes.createPolicy) from the
  // compiler so that the entire call can be removed if the result is not used.
  // MOE:begin_strip
  // TODO(b/155299094): Refactor after adding compiler support.
  // MOE:end_strip
  valueOf: function() {
    return SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse('<br>');
  },
}.valueOf());


exports = SafeHtml;

;return exports;});

//third_party/javascript/closure/html/internals.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview File that re-exports the internals of goog.html types so that
 * they can be used in safevalues for compatibility purposes.
 * DO NOT OPENSOURCE
 */

goog.module('goog.html.internals');

const SafeHtml = goog.require('goog.html.SafeHtml');
const SafeScript = goog.require('goog.html.SafeScript');
const SafeStyle = goog.require('goog.html.SafeStyle');
const SafeStyleSheet = goog.require('goog.html.SafeStyleSheet');
const SafeUrl = goog.require('goog.html.SafeUrl');
const TrustedResourceUrl = goog.require('goog.html.TrustedResourceUrl');

exports.createSafeHtml =
    SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse;
exports.createSafeScript =
    SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse;
exports.createSafeStyle =
    SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse;
exports.createSafeStyleSheet =
    SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse;
exports.createSafeUrl = SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse;
exports.createTrustedResourceUrl =
    TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse;

;return exports;});

//third_party/javascript/closure/log/log.js
/**
 * @license
 * Copyright The Closure Library Authors.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * @fileoverview Basic strippable logging definitions.
 * @see http://go/closurelogging
 */

goog.provide('goog.log');
goog.provide('goog.log.Level');
goog.provide('goog.log.LogBuffer');
goog.provide('goog.log.LogRecord');
goog.provide('goog.log.Logger');

goog.require('goog.asserts');
goog.require('goog.debug');


/**
 * A message value that can be handled by a goog.log.Logger.
 *
 * Functions are treated like callbacks, but are only called when the event's
 * log level is enabled. This is useful for logging messages that are expensive
 * to construct.
 *
 * @typedef {string|function(): string}
 */
goog.log.Loggable;

/** @define {boolean} Whether logging is enabled. */
goog.log.ENABLED = goog.define('goog.log.ENABLED', goog.debug.LOGGING_ENABLED);

/** @const */
goog.log.ROOT_LOGGER_NAME = '';


// TODO(b/170408987): Make goog.log.Level an enum.
/**
 * The goog.log.Level class defines a set of standard logging levels that
 * can be used to control logging output.  The logging goog.log.Level objects
 * are ordered and are specified by ordered integers.  Enabling logging
 * at a given level also enables logging at all higher levels.
 * <p>
 * Clients should normally use the predefined goog.log.Level constants such
 * as goog.log.Level.SEVERE.
 * <p>
 * The levels in descending order are:
 * <ul>
 * <li>SEVERE (highest value)
 * <li>WARNING
 * <li>INFO
 * <li>CONFIG
 * <li>FINE
 * <li>FINER
 * <li>FINEST  (lowest value)
 * </ul>
 * In addition there is a level OFF that can be used to turn
 * off logging, and a level ALL that can be used to enable
 * logging of all messages.
 *
 * @final
 */
goog.log.Level = class Level {
  /**
   * @param {string} name The name of the level.
   * @param {number} value The numeric value of the level.
   */
  constructor(name, value) {
    /**
     * The name of the level
     * @type {string}
     * @const
     */
    this.name = name;

    /**
     * The numeric value of the level
     * @type {number}
     */
    this.value = value;
  }

  /**
   * @return {string} String representation of the logger level.
   * @override
   */
  toString() {
    return this.name;
  }
};


/**
 * OFF is a special level that can be used to turn off logging.
 * This level is initialized to <CODE>Infinity</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.OFF = new goog.log.Level('OFF', Infinity);


/**
 * SHOUT is a message level for extra debugging loudness.
 * This level is initialized to <CODE>1200</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.SHOUT = new goog.log.Level('SHOUT', 1200);


/**
 * SEVERE is a message level indicating a serious failure.
 * This level is initialized to <CODE>1000</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.SEVERE = new goog.log.Level('SEVERE', 1000);


/**
 * WARNING is a message level indicating a potential problem.
 * This level is initialized to <CODE>900</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.WARNING = new goog.log.Level('WARNING', 900);


/**
 * INFO is a message level for informational messages.
 * This level is initialized to <CODE>800</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.INFO = new goog.log.Level('INFO', 800);


/**
 * CONFIG is a message level for static configuration messages.
 * This level is initialized to <CODE>700</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.CONFIG = new goog.log.Level('CONFIG', 700);


/**
 * FINE is a message level providing tracing information.
 * This level is initialized to <CODE>500</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.FINE = new goog.log.Level('FINE', 500);


/**
 * FINER indicates a fairly detailed tracing message.
 * This level is initialized to <CODE>400</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.FINER = new goog.log.Level('FINER', 400);

/**
 * FINEST indicates a highly detailed tracing message.
 * This level is initialized to <CODE>300</CODE>.
 * @type {!goog.log.Level}
 */

goog.log.Level.FINEST = new goog.log.Level('FINEST', 300);


/**
 * ALL indicates that all messages should be logged.
 * This level is initialized to <CODE>0</CODE>.
 * @type {!goog.log.Level}
 */
goog.log.Level.ALL = new goog.log.Level('ALL', 0);


/**
 * The predefined levels.
 * @type {!Array<!goog.log.Level>}
 * @final
 */
goog.log.Level.PREDEFINED_LEVELS = [
  goog.log.Level.OFF, goog.log.Level.SHOUT, goog.log.Level.SEVERE,
  goog.log.Level.WARNING, goog.log.Level.INFO, goog.log.Level.CONFIG,
  goog.log.Level.FINE, goog.log.Level.FINER, goog.log.Level.FINEST,
  goog.log.Level.ALL
];


/**
 * A lookup map used to find the level object based on the name or value of
 * the level object.
 * @type {?Object}
 * @private
 */
goog.log.Level.predefinedLevelsCache_ = null;


/**
 * Creates the predefined levels cache and populates it.
 * @private
 */
goog.log.Level.createPredefinedLevelsCache_ = function() {
  goog.log.Level.predefinedLevelsCache_ = {};
  for (let i = 0, level; level = goog.log.Level.PREDEFINED_LEVELS[i]; i++) {
    goog.log.Level.predefinedLevelsCache_[level.value] = level;
    goog.log.Level.predefinedLevelsCache_[level.name] = level;
  }
};


/**
 * Gets the predefined level with the given name.
 * @param {string} name The name of the level.
 * @return {!goog.log.Level|null} The level, or null if none found.
 */
goog.log.Level.getPredefinedLevel = function(name) {
  if (!goog.log.Level.predefinedLevelsCache_) {
    goog.log.Level.createPredefinedLevelsCache_();
  }

  return goog.log.Level.predefinedLevelsCache_[name] || null;
};


/**
 * Gets the highest predefined level <= #value.
 * @param {number} value goog.log.Level value.
 * @return {!goog.log.Level|null} The level, or null if none found.
 */
goog.log.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.log.Level.predefinedLevelsCache_) {
    goog.log.Level.createPredefinedLevelsCache_();
  }

  if (value in /** @type {!Object} */ (goog.log.Level.predefinedLevelsCache_)) {
    return goog.log.Level.predefinedLevelsCache_[value];
  }

  for (let i = 0; i < goog.log.Level.PREDEFINED_LEVELS.length; ++i) {
    let level = goog.log.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};


/** @interface */
goog.log.Logger = class Logger {
  /**
   * Gets the name of the Logger.
   * @return {string}
   * @public
   */
  getName() {}
};


/**
 * Only for compatibility with goog.debug.Logger.Level, which is how many users
 * access Level.
 * TODO(kelvinjin): Remove these definitions.
 * @final
 */
goog.log.Logger.Level = goog.log.Level;


/**
 * A buffer for log records. The purpose of this is to improve
 * logging performance by re-using old objects when the buffer becomes full and
 * to eliminate the need for each app to implement their own log buffer. The
 * disadvantage to doing this is that log handlers cannot maintain references to
 * log records and expect that they are not overwriten at a later point.
 * @final
 */
goog.log.LogBuffer = class LogBuffer {
  /**
   * @param {number=} capacity The capacity of this LogBuffer instance.
   */
  constructor(capacity) {
    /**
     * The buffer's capacity.
     * @type {number}
     * @private
     */
    this.capacity_ =
        typeof capacity === 'number' ? capacity : goog.log.LogBuffer.CAPACITY;

    /**
     * The array to store the records.
     * @type {!Array<!goog.log.LogRecord|undefined>}
     * @private
     */
    this.buffer_;

    /**
     * The index of the most recently added record, or -1 if there are no
     * records.
     * @type {number}
     * @private
     */
    this.curIndex_;

    /**
     * Whether the buffer is at capacity.
     * @type {boolean}
     * @private
     */
    this.isFull_;

    this.clear();
  }


  /**
   * Adds a log record to the buffer, possibly overwriting the oldest record.
   * @param {!goog.log.Level} level One of the level identifiers.
   * @param {string} msg The string message.
   * @param {string} loggerName The name of the source logger.
   * @return {!goog.log.LogRecord} The log record.
   */
  addRecord(level, msg, loggerName) {
    if (!this.isBufferingEnabled()) {
      return new goog.log.LogRecord(level, msg, loggerName);
    }
    const curIndex = (this.curIndex_ + 1) % this.capacity_;
    this.curIndex_ = curIndex;
    if (this.isFull_) {
      const ret = this.buffer_[curIndex];
      ret.reset(level, msg, loggerName);
      return ret;
    }
    this.isFull_ = curIndex == this.capacity_ - 1;
    return this.buffer_[curIndex] =
               new goog.log.LogRecord(level, msg, loggerName);
  }

  /**
   * Calls the given function for each buffered log record, starting with the
   * oldest one.
   * TODO(kelvinjin): Make this a [Symbol.iterator] once all usages of
   * goog.debug.LogBuffer can be deleted.
   * @param {!goog.log.LogRecordHandler} func The function to call.
   */
  forEachRecord(func) {
    const buffer = this.buffer_;
    // Corner case: no records.
    if (!buffer[0]) {
      return;
    }
    const curIndex = this.curIndex_;
    let i = this.isFull_ ? curIndex : -1;
    do {
      i = (i + 1) % this.capacity_;
      func(/** @type {!goog.log.LogRecord} */ (buffer[i]));
    } while (i !== curIndex);
  }

  /**
   * @return {boolean} Whether the log buffer is enabled.
   */
  isBufferingEnabled() {
    return this.capacity_ > 0;
  }

  /**
   * @return {boolean} Return whether the log buffer is full.
   */
  isFull() {
    return this.isFull_;
  }

  /**
   * Removes all buffered log records.
   */
  clear() {
    this.buffer_ = new Array(this.capacity_);
    this.curIndex_ = -1;
    this.isFull_ = false;
  }
};


/**
 * @type {!goog.log.LogBuffer|undefined}
 * @private
 */
goog.log.LogBuffer.instance_;


/**
 * @define {number} The number of log records to buffer. 0 means disable
 * buffering.
 */
goog.log.LogBuffer.CAPACITY = goog.define('goog.debug.LogBuffer.CAPACITY', 0);


/**
 * A static method that always returns the same instance of goog.log.LogBuffer.
 * @return {!goog.log.LogBuffer} The goog.log.LogBuffer singleton instance.
 */
goog.log.LogBuffer.getInstance = function() {
  if (!goog.log.LogBuffer.instance_) {
    goog.log.LogBuffer.instance_ =
        new goog.log.LogBuffer(goog.log.LogBuffer.CAPACITY);
  }
  return goog.log.LogBuffer.instance_;
};


/**
 * Whether the log buffer is enabled.
 * @return {boolean}
 */
goog.log.LogBuffer.isBufferingEnabled = function() {
  return goog.log.LogBuffer.getInstance().isBufferingEnabled();
};


/**
 * LogRecord objects are used to pass logging requests between the logging
 * framework and individual log handlers. These objects should not be
 * constructed or reset by application code.
 */
goog.log.LogRecord = class LogRecord {
  /**
   * @param {?goog.log.Level} level One of the level identifiers.
   * @param {string} msg The string message.
   * @param {string} loggerName The name of the source logger.
   * @param {number=} time Time this log record was created if other than
   *     now. If 0, we use #goog.now.
   * @param {number=} sequenceNumber Sequence number of this log record.
   *     This should only be passed in when restoring a log record from
   *     persistence.
   */
  constructor(level, msg, loggerName, time, sequenceNumber) {
    /**
     * Level of the LogRecord.
     * @type {!goog.log.Level}
     * @private
     */
    this.level_;

    /**
     * Name of the logger that created the record.
     * @type {string}
     * @private
     */
    this.loggerName_;

    /**
     * Message associated with the record
     * @type {string}
     * @private
     */
    this.msg_;

    /**
     * Time the LogRecord was created.
     * @type {number}
     * @private
     */
    this.time_;

    /**
     * Sequence number for the LogRecord. Each record has a unique sequence
     * number that is greater than all log records created before it.
     * @type {number}
     * @private
     */
    this.sequenceNumber_;

    /**
     * Exception associated with the record
     * @type {*}
     * @private
     */
    this.exception_ = undefined;

    this.reset(
        level || goog.log.Level.OFF, msg, loggerName, time, sequenceNumber);
  };

  /**
   * Sets all fields of the log record.
   * @param {!goog.log.Level} level One of the level identifiers.
   * @param {string} msg The string message.
   * @param {string} loggerName The name of the source logger.
   * @param {number=} time Time this log record was created if other than
   *     now. If 0, we use #goog.now.
   * @param {number=} sequenceNumber Sequence number of this log record.
   *     This should only be passed in when restoring a log record from
   *     persistence.
   */
  reset(level, msg, loggerName, time, sequenceNumber) {
    this.time_ = time || goog.now();
    this.level_ = level;
    this.msg_ = msg;
    this.loggerName_ = loggerName;
    this.exception_ = undefined;
    this.sequenceNumber_ = typeof sequenceNumber === 'number' ?
        sequenceNumber :
        goog.log.LogRecord.nextSequenceNumber_;
  };


  /**
   * Gets the source Logger's name.
   *
   * @return {string} source logger name (may be null).
   */
  getLoggerName() {
    return this.loggerName_;
  };


  /**
   * Sets the source Logger's name.
   *
   * @param {string} name The logger name.
   */
  setLoggerName(name) {
    this.loggerName_ = name;
  };


  /**
   * Gets the exception that is part of the log record.
   *
   * @return {*} the exception.
   */
  getException() {
    return this.exception_;
  };


  /**
   * Sets the exception that is part of the log record.
   * @param {*} exception the exception.
   */
  setException(exception) {
    this.exception_ = exception;
  };


  /**
   * Gets the logging message level, for example Level.SEVERE.
   * @return {!goog.log.Level} the logging message level.
   */
  getLevel() {
    return this.level_;
  };


  /**
   * Sets the logging message level, for example Level.SEVERE.
   * @param {!goog.log.Level} level the logging message level.
   */
  setLevel(level) {
    this.level_ = level;
  };


  /**
   * Gets the "raw" log message, before localization or formatting.
   * @return {string} the raw message string.
   */
  getMessage() {
    return this.msg_;
  };


  /**
   * Sets the "raw" log message, before localization or formatting.
   *
   * @param {string} msg the raw message string.
   */
  setMessage(msg) {
    this.msg_ = msg;
  };


  /**
   * Gets event time in milliseconds since 1970.
   * @return {number} event time in millis since 1970.
   */
  getMillis() {
    return this.time_;
  };


  /**
   * Sets event time in milliseconds since 1970.
   * @param {number} time event time in millis since 1970.
   */
  setMillis(time) {
    this.time_ = time;
  };


  /**
   * Gets the sequence number. Sequence numbers are normally assigned when a
   * LogRecord is constructed or reset in incrementally increasing order.
   * @return {number}
   */
  getSequenceNumber() {
    return this.sequenceNumber_;
  };
};


/**
 * A sequence counter for assigning increasing sequence numbers to LogRecord
 * objects.
 * @type {number}
 * @private
 */
goog.log.LogRecord.nextSequenceNumber_ = 0;


/**
 * A type that describes a function that handles logs.
 * @typedef {function(!goog.log.LogRecord): ?}
 */
goog.log.LogRecordHandler;


/**
 * A LogRegistryEntry_ contains data about a Logger.
 * @final
 */
goog.log.LogRegistryEntry_ = class LogRegistryEntry_ {
  /**
   * @param {string} name
   * @param {!goog.log.LogRegistryEntry_|null=} parent
   */
  constructor(name, parent = null) {
    /**
     * The minimum log level that a message must be for it to be logged by the
     * Logger corresponding to this LogRegistryEntry_. If null, the parent's
     * log level is used instead.
     * @type {?goog.log.Level}
     */
    this.level = null;

    /**
     * A list of functions that will be called when the Logger corresponding to
     * this LogRegistryEntry_ is used to log a message.
     * @type {!Array<!goog.log.LogRecordHandler>}
     */
    this.handlers = [];

    /**
     * A reference to LogRegistryEntry_ objects that correspond to the direct
     * ancestor of the Logger represented by this LogRegistryEntry_ object
     * (via name, treated as a dot-separated namespace).
     * @type {!goog.log.LogRegistryEntry_|null}
     */
    this.parent = parent || null;

    /**
     * A list of references to LogRegistryEntry_ objects that correspond to the
     * direct descendants of the Logger represented by this LogRegistryEntry_
     * object (via name, treated as a dot-separated namespace).
     * @type {!Array<!goog.log.LogRegistryEntry_>}
     */
    this.children = [];

    /**
     * A reference to the Logger itself.
     * @type {!goog.log.Logger}
     */
    this.logger = /** @type {!goog.log.Logger} */ ({getName: () => name});
  }

  /**
   * Returns the effective level of the logger based on its ancestors' levels.
   * @return {!goog.log.Level} The level.
   */
  getEffectiveLevel() {
    if (this.level) {
      return this.level;
    } else if (this.parent) {
      return this.parent.getEffectiveLevel();
    }
    goog.asserts.fail('Root logger has no level set.');
    return goog.log.Level.OFF;
  };

  /**
   * Calls the log handlers associated with this Logger, followed by those of
   * its parents, etc. until the root Logger's associated log handlers are
   * called.
   * @param {!goog.log.LogRecord} logRecord The log record to pass to each
   *     handler.
   */
  publish(logRecord) {
    let target = this;
    while (target) {
      target.handlers.forEach(handler => {
        handler(logRecord);
      });
      target = target.parent;
    }
  }
};


/**
 * A LogRegistry_ owns references to all loggers, and is responsible for storing
 * all the internal state needed for loggers to operate correctly.
 *
 * @final
 */
goog.log.LogRegistry_ = class LogRegistry_ {
  constructor() {
    /**
     * Per-log information retained by this LogRegistry_.
     * @type {!Object<string, !goog.log.LogRegistryEntry_>}
     */
    this.entries = {};

    // The root logger.
    const rootLogRegistryEntry =
        new goog.log.LogRegistryEntry_(goog.log.ROOT_LOGGER_NAME);
    rootLogRegistryEntry.level = goog.log.Level.CONFIG;
    this.entries[goog.log.ROOT_LOGGER_NAME] = rootLogRegistryEntry;
  }

  /**
   * Gets the LogRegistry_ entry under the given name, creating the entry if one
   * doesn't already exist.
   * @param {string} name The name to look up.
   * @param {?goog.log.Level=} level If provided, override the default logging
   *     level of the returned Logger with the provided level.
   * @return {!goog.log.LogRegistryEntry_}
   */
  getLogRegistryEntry(name, level) {
    const entry = this.entries[name];
    if (entry) {
      if (level !== undefined) {
        entry.level = level;
      }
      return entry;
    } else {
      // The logger and its associated registry entry needs to be created.

      // Get its parent first.
      const lastDotIndex = name.lastIndexOf('.');
      const parentName = name.slice(0, Math.max(lastDotIndex, 0));
      const parentLogRegistryEntry = this.getLogRegistryEntry(parentName);

      // Now create the new entry, linking it with its parent.
      const logRegistryEntry =
          new goog.log.LogRegistryEntry_(name, parentLogRegistryEntry);
      this.entries[name] = logRegistryEntry;
      parentLogRegistryEntry.children.push(logRegistryEntry);

      if (level !== undefined) {
        logRegistryEntry.level = level;
      }

      return logRegistryEntry;
    }
  }

  /**
   * Get a list of all loggers.
   * @return {!Array<!goog.log.Logger>}
   */
  getAllLoggers() {
    return Object.keys(this.entries)
        .map(loggerName => this.entries[loggerName].logger);
  }
};

/**
 * A static method that always returns the same instance of LogRegistry_.
 * @return {!goog.log.LogRegistry_} The LogRegistry_ singleton instance.
 */
goog.log.LogRegistry_.getInstance = function() {
  if (!goog.log.LogRegistry_.instance_) {
    goog.log.LogRegistry_.instance_ = new goog.log.LogRegistry_();
  }
  return /** @type {!goog.log.LogRegistry_} */ (
      goog.log.LogRegistry_.instance_);
};

/**
 * @type {!goog.log.LogRegistry_|undefined}
 * @private
 */
goog.log.LogRegistry_.instance_;


/**
 * Finds or creates a logger for a named subsystem. If a logger has already been
 * created with the given name it is returned. Otherwise, a new logger is
 * created. If a new logger is created, it will be configured to send logging
 * output to its parent's handlers.
 *
 * @param {string} name A name for the logger. This should be a dot-separated
 *     name and should normally be based on the package name or class name of
 *     the subsystem, such as goog.net.BrowserChannel.
 * @param {?goog.log.Level=} level If provided, override the default logging
 *     level with the provided level. This parameter is deprecated; prefer using
 *     goog.log.setLevel to set the logger's level instead.
 *     TODO(b/170974948): Delete this parameter.
 * @return {!goog.log.Logger|null} The named logger, or null if logging is
 *     disabled.
 */
goog.log.getLogger = function(name, level) {
  if (goog.log.ENABLED) {
    const loggerEntry =
        goog.log.LogRegistry_.getInstance().getLogRegistryEntry(name, level);
    return loggerEntry.logger;
  } else {
    return null;
  }
};


/**
 * Returns the root logger.
 *
 * @return {!goog.log.Logger|null} The root logger, or null if logging is
 *     disabled.
 */
goog.log.getRootLogger = function() {
  // MOE:begin_strip
  // NOTE: This intentionally doesn't call goog.log.getLogger to prevent
  // ROOT_LOGGER_NAME from getting replaced during compilation, as correct
  // behavior hinges on it remaining an empty string.
  // MOE:end_strip
  if (goog.log.ENABLED) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        goog.log.ROOT_LOGGER_NAME);
    return loggerEntry.logger;
  } else {
    return null;
  }
};


// TODO(johnlenz): try to tighten the types to these functions.
/**
 * Adds a handler to the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.LogRecordHandler} handler Handler function to
 *     add.
 */
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    loggerEntry.handlers.push(handler);
  }
};


/**
 * Removes a handler from the logger. This doesn't use the event system because
 * we want to be able to add logging to the event system.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.LogRecordHandler} handler Handler function to
 *     remove.
 * @return {boolean} Whether the handler was removed.
 */
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    const indexOfHandler = loggerEntry.handlers.indexOf(handler);
    if (indexOfHandler !== -1) {
      loggerEntry.handlers.splice(indexOfHandler, 1);
      return true;
    }
  }
  return false;
};


/**
 * Set the log level specifying which message levels will be logged by this
 * logger. Message levels lower than this value will be discarded.
 * The level value goog.log.Level.OFF can be used to turn off logging. If the
 * new level is null, it means that this node should inherit its level from its
 * nearest ancestor with a specific (non-null) level value.
 *
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.Level|null} level The new level.
 */
goog.log.setLevel = function(logger, level) {
  if (goog.log.ENABLED && logger) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    loggerEntry.level = level;
  }
};


/**
 * Gets the log level specifying which message levels will be logged by this
 * logger. Message levels lower than this value will be discarded.
 * The level value goog.log.Level.OFF can be used to turn off logging. If the
 * level is null, it means that this node should inherit its level from its
 * nearest ancestor with a specific (non-null) level value.
 *
 * @param {?goog.log.Logger} logger
 * @return {!goog.log.Level|null} The level.
 */
goog.log.getLevel = function(logger) {
  if (goog.log.ENABLED && logger) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    return loggerEntry.level;
  }
  return null;
};


/**
 * Returns the effective level of the logger based on its ancestors' levels.
 * @param {?goog.log.Logger} logger
 * @return {!goog.log.Level} The level.
 */
goog.log.getEffectiveLevel = function(logger) {
  if (goog.log.ENABLED && logger) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    return loggerEntry.getEffectiveLevel();
  }
  return goog.log.Level.OFF;
};


/**
 * Checks if a message of the given level would actually be logged by this
 * logger. This check is based on the goog.log.Loggers effective level, which
 * may be inherited from its parent.
 * @param {?goog.log.Logger} logger
 * @param {?goog.log.Level} level The level to check.
 * @return {boolean} Whether the message would be logged.
 */
goog.log.isLoggable = function(logger, level) {
  if (goog.log.ENABLED && logger && level) {
    return level.value >= goog.log.getEffectiveLevel(logger).value;
  }
  return false;
};


/**
 * Gets a list of all loggers.
 * @return {!Array<!goog.log.Logger>}
 */
goog.log.getAllLoggers = function() {
  if (goog.log.ENABLED) {
    return goog.log.LogRegistry_.getInstance().getAllLoggers();
  }
  return [];
};


/**
 * Creates a log record. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * TODO(kelvinjin): Delete this method from the public API.
 * @param {?goog.log.Logger} logger
 * @param {?goog.log.Level} level One of the level identifiers.
 * @param {string} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 * @return {!goog.log.LogRecord}
 */
goog.log.getLogRecord = function(logger, level, msg, exception = undefined) {
  const logRecord = goog.log.LogBuffer.getInstance().addRecord(
      level || goog.log.Level.OFF, msg, logger.getName());
  logRecord.setException(exception);
  return logRecord;
};


/**
 * Logs a goog.log.LogRecord. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * TODO(kelvinjin): Delete this method from the public API.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.LogRecord} logRecord A log record to log.
 */
goog.log.publishLogRecord = function(logger, logRecord) {
  if (goog.log.ENABLED && logger &&
      goog.log.isLoggable(logger, logRecord.getLevel())) {
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    loggerEntry.publish(logRecord);
  }
};


/**
 * Logs a message. If the logger is currently enabled for the
 * given message level then the given message is forwarded to all the
 * registered output Handler objects.
 * TODO(b/170975192): The level parameter should be made required.
 * @param {?goog.log.Logger} logger
 * @param {?goog.log.Level} level One of the level identifiers.
 * @param {!goog.log.Loggable} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 */
goog.log.log = function(logger, level, msg, exception = undefined) {
  if (goog.log.ENABLED && logger && goog.log.isLoggable(logger, level)) {
    level = level || goog.log.Level.OFF;
    const loggerEntry = goog.log.LogRegistry_.getInstance().getLogRegistryEntry(
        logger.getName());
    // Message callbacks can be useful when a log message is expensive to build.
    if (typeof msg === 'function') {
      msg = msg();
    }
    const logRecord = goog.log.LogBuffer.getInstance().addRecord(
        level, msg, logger.getName());
    logRecord.setException(exception);
    // Publish logs.
    loggerEntry.publish(logRecord);
  }
};


/**
 * Logs a message at the goog.log.Level.SEVERE level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.Loggable} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 */
goog.log.error = function(logger, msg, exception = undefined) {
  if (goog.log.ENABLED && logger) {
    goog.log.log(logger, goog.log.Level.SEVERE, msg, exception);
  }
};


/**
 * Logs a message at the goog.log.Level.WARNING level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.Loggable} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 */
goog.log.warning = function(logger, msg, exception = undefined) {
  if (goog.log.ENABLED && logger) {
    goog.log.log(logger, goog.log.Level.WARNING, msg, exception);
  }
};


/**
 * Logs a message at the goog.log.Level.INFO level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.Loggable} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 */
goog.log.info = function(logger, msg, exception = undefined) {
  if (goog.log.ENABLED && logger) {
    goog.log.log(logger, goog.log.Level.INFO, msg, exception);
  }
};


/**
 * Logs a message at the goog.log.Level.FINE level.
 * If the logger is currently enabled for the given message level then the
 * given message is forwarded to all the registered output Handler objects.
 * @param {?goog.log.Logger} logger
 * @param {!goog.log.Loggable} msg The message to log.
 * @param {*=} exception An exception associated with the message.
 */
goog.log.fine = function(logger, msg, exception = undefined) {
  if (goog.log.ENABLED && logger) {
    goog.log.log(logger, goog.log.Level.FINE, msg, exception);
  }
};

//third_party/javascript/safevalues/builders/sensitive_attributes.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/sensitive_attributes.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
// AUTOGENERATED. DO NOT EDIT.
goog.module('google3.third_party.javascript.safevalues.builders.sensitive_attributes');
var module = module || { id: 'third_party/javascript/safevalues/builders/sensitive_attributes.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Security sensitive attribute names that should not be set through
 * `setAttribute` or similar functions.
 * @type {!Array<?>}
 */
exports.SECURITY_SENSITIVE_ATTRIBUTES = (/** @type {!Array<?>} */ ([
    'src',
    'srcdoc',
    'codebase',
    'data',
    'href',
    'rel',
    'action',
    'formaction',
    'sandbox',
    'cite',
    'poster',
    'icon',
]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc2l0aXZlX2F0dHJpYnV0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvYnVpbGRlcnMvc2Vuc2l0aXZlX2F0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdhLFFBQUEsNkJBQTZCLEdBQUcsMkJBQUE7SUFDM0MsS0FBSztJQUNMLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixLQUFLO0lBQ0wsUUFBUTtJQUNSLFlBQVk7SUFDWixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0NBQ1AsRUFBUyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLy8gQVVUT0dFTkVSQVRFRC4gRE8gTk9UIEVESVQuXG5cbi8qKlxuICogU2VjdXJpdHkgc2Vuc2l0aXZlIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IHNob3VsZCBub3QgYmUgc2V0IHRocm91Z2hcbiAqIGBzZXRBdHRyaWJ1dGVgIG9yIHNpbWlsYXIgZnVuY3Rpb25zLlxuICovXG5leHBvcnQgY29uc3QgU0VDVVJJVFlfU0VOU0lUSVZFX0FUVFJJQlVURVMgPSBbXG4gICdzcmMnLFxuICAnc3JjZG9jJyxcbiAgJ2NvZGViYXNlJyxcbiAgJ2RhdGEnLFxuICAnaHJlZicsXG4gICdyZWwnLFxuICAnYWN0aW9uJyxcbiAgJ2Zvcm1hY3Rpb24nLFxuICAnc2FuZGJveCcsXG4gICdjaXRlJyxcbiAgJ3Bvc3RlcicsXG4gICdpY29uJyxcbl0gYXMgY29uc3Q7XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/environment/dev.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/environment/dev.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
// BEGIN-INTERNAL
goog.module('google3.third_party.javascript.safevalues.environment.dev');
var module = module || { id: 'third_party/javascript/safevalues/environment/dev.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Whether we are in development mode. Used for stripping out unnecessary error
 * messages and security checks from production binaries. This will be rewritten
 * to use process.env.NODE_ENV in open-source.
 * @type {boolean}
 */
exports.DEV_MODE = goog.DEBUG;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2Vudmlyb25tZW50L2Rldi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlhLFFBQUEsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5cbi8vIEJFR0lOLUlOVEVSTkFMXG4vKipcbiAqIFdoZXRoZXIgd2UgYXJlIGluIGRldmVsb3BtZW50IG1vZGUuIFVzZWQgZm9yIHN0cmlwcGluZyBvdXQgdW5uZWNlc3NhcnkgZXJyb3JcbiAqIG1lc3NhZ2VzIGFuZCBzZWN1cml0eSBjaGVja3MgZnJvbSBwcm9kdWN0aW9uIGJpbmFyaWVzLiBUaGlzIHdpbGwgYmUgcmV3cml0dGVuXG4gKiB0byB1c2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgaW4gb3Blbi1zb3VyY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBERVZfTU9ERSA9IGdvb2cuREVCVUc7XG4vLyBFTkQtSU5URVJOQUxcblxuLy8gQkVHSU4tRVhURVJOQUxcbi8vIC8qKlxuLy8gICogRW5zdXJlIHByb2Nlc3MuZW52Lk5PREVfRU5WIGlzIHNldCBldmVuIHdoZW4gbm90IHJ1bm5pbmcgdW5kZXIgV2VicGFjayBvclxuLy8gICogTm9kZS4gVGVyc2VyIHdpbGwgc3RyaXAgdGhpcyBvdXQgb2YgcHJvZHVjdGlvbiBiaW5hcmllcy5cbi8vICAqL1xuLy8gLyojX19QVVJFX18qLyAoKCkgPT4ge1xuLy8gICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4vLyAgICAgKHdpbmRvdy5wcm9jZXNzIGFzIHVua25vd24pID0ge1xuLy8gICAgICAgZW52OiB7XG4vLyAgICAgICAgIE5PREVfRU5WOiAnZGV2ZWxvcG1lbnQnXG4vLyAgICAgICB9XG4vLyAgICAgfTtcbi8vICAgfVxuLy8gfSkoKTtcbi8vIEVORC1FWFRFUk5BTFxuIl19
;return exports;});

//third_party/javascript/safevalues/internals/secrets.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/secrets.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.secrets');
var module = module || { id: 'third_party/javascript/safevalues/internals/secrets.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
/**
 * A secret token that must be passed to safe type constructors. It is only
 * accessible from within safevalues, ensuring that unrestricted safe type
 * creation is only possible within safevalues. In particular, this prevents
 * forgery such as `safeHtmlValue.constructor('javascript:evil')`.
 * @type {*}
 */
exports.secretToken = {};
/**
 * Asserts that the given token matches the secret safevalues token. An
 * exception is thrown if that is not the case.
 * @param {!Object} token
 * @return {void}
 */
function ensureTokenIsValid(token) {
    if (dev_1.DEV_MODE) {
        if (token !== exports.secretToken) {
            throw new Error('Bad secret');
        }
    }
}
exports.ensureTokenIsValid = ensureTokenIsValid;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9pbnRlcm5hbHMvc2VjcmV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUE0Qzs7Ozs7Ozs7QUFRL0IsUUFBQSxXQUFXLEdBQUcsRUFBRTs7Ozs7OztBQU03QixTQUFnQixrQkFBa0IsQ0FBQyxLQUFhO0lBQzlDLElBQUksY0FBUSxFQUFFO1FBQ1osSUFBSSxLQUFLLEtBQUssbUJBQVcsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7QUFDSCxDQUFDO0FBTkQsZ0RBTUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7REVWX01PREV9IGZyb20gJy4uL2Vudmlyb25tZW50L2Rldic7XG5cbi8qKlxuICogQSBzZWNyZXQgdG9rZW4gdGhhdCBtdXN0IGJlIHBhc3NlZCB0byBzYWZlIHR5cGUgY29uc3RydWN0b3JzLiBJdCBpcyBvbmx5XG4gKiBhY2Nlc3NpYmxlIGZyb20gd2l0aGluIHNhZmV2YWx1ZXMsIGVuc3VyaW5nIHRoYXQgdW5yZXN0cmljdGVkIHNhZmUgdHlwZVxuICogY3JlYXRpb24gaXMgb25seSBwb3NzaWJsZSB3aXRoaW4gc2FmZXZhbHVlcy4gSW4gcGFydGljdWxhciwgdGhpcyBwcmV2ZW50c1xuICogZm9yZ2VyeSBzdWNoIGFzIGBzYWZlSHRtbFZhbHVlLmNvbnN0cnVjdG9yKCdqYXZhc2NyaXB0OmV2aWwnKWAuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNyZXRUb2tlbiA9IHt9O1xuXG4vKipcbiAqIEFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gdG9rZW4gbWF0Y2hlcyB0aGUgc2VjcmV0IHNhZmV2YWx1ZXMgdG9rZW4uIEFuXG4gKiBleGNlcHRpb24gaXMgdGhyb3duIGlmIHRoYXQgaXMgbm90IHRoZSBjYXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlVG9rZW5Jc1ZhbGlkKHRva2VuOiBvYmplY3QpIHtcbiAgaWYgKERFVl9NT0RFKSB7XG4gICAgaWYgKHRva2VuICE9PSBzZWNyZXRUb2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCYWQgc2VjcmV0Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/internals/attribute_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/attribute_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.attribute_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/attribute_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_secrets_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.secrets");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const secrets_1 = goog.require('google3.third_party.javascript.safevalues.internals.secrets');
/**
 * A prefix with which an attribute is safe to set using plain strings.
 * @abstract
 */
class SafeAttributePrefix {
}
exports.SafeAttributePrefix = SafeAttributePrefix;
/* istanbul ignore if */
if (false) {
    /**
     * @const {?}
     * @private
     */
    SafeAttributePrefix.prototype.brand;
}
/**
 * Implementation for `SafeAttributePrefix`
 * @extends {SafeAttributePrefix}
 */
class AttributePrefixImpl extends SafeAttributePrefix {
    /**
     * @public
     * @param {string} attrPrefix
     * @param {!Object} token
     */
    constructor(attrPrefix, token) {
        super();
        (0, secrets_1.ensureTokenIsValid)(token);
        this.privateDoNotAccessOrElseWrappedAttrPrefix = attrPrefix;
    }
    /**
     * @public
     * @return {string}
     */
    toString() {
        return this.privateDoNotAccessOrElseWrappedAttrPrefix;
    }
}
/* istanbul ignore if */
if (false) {
    /**
     * @const {string}
     * @public
     */
    AttributePrefixImpl.prototype.privateDoNotAccessOrElseWrappedAttrPrefix;
}
/**
 * Builds a new `SafeAttribute` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 * @param {string} attrPrefix
 * @return {!SafeAttributePrefix}
 */
function createAttributePrefixInternal(attrPrefix) {
    return new AttributePrefixImpl(attrPrefix, secrets_1.secretToken);
}
exports.createAttributePrefixInternal = createAttributePrefixInternal;
/**
 * Returns the string value of the passed `SafeAttributePrefix` object while
 * ensuring it has the correct type.
 * @param {!SafeAttributePrefix} value
 * @return {string}
 */
function unwrapAttributePrefix(value) {
    if (value instanceof AttributePrefixImpl) {
        return (/** @type {!AttributePrefixImpl} */ (value)).privateDoNotAccessOrElseWrappedAttrPrefix;
    }
    else {
        /** @type {string} */
        let message = '';
        if (dev_1.DEV_MODE) {
            message = 'Unexpected type when unwrapping SafeAttributePrefix';
        }
        throw new Error(message);
    }
}
exports.unwrapAttributePrefix = unwrapAttributePrefix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlX2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvaW50ZXJuYWxzL2F0dHJpYnV0ZV9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUE0QztBQUU1Qyw4RkFBMEQ7Ozs7O0FBRzFELE1BQXNCLG1CQUFtQjtDQUl4QztBQUpELGtEQUlDOzs7Ozs7O0lBREMsb0NBQStCOzs7Ozs7QUFJakMsTUFBTSxtQkFBb0IsU0FBUSxtQkFBbUI7Ozs7OztJQUduRCxZQUFZLFVBQWtCLEVBQUUsS0FBYTtRQUMzQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUEsNEJBQWtCLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLHlDQUF5QyxHQUFHLFVBQVUsQ0FBQztJQUM5RCxDQUFDOzs7OztJQUVRLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7Ozs7Ozs7SUFYQyx3RUFBMkQ7Ozs7Ozs7OztBQWtCN0QsU0FBZ0IsNkJBQTZCLENBQUMsVUFBa0I7SUFFOUQsT0FBTyxJQUFJLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxxQkFBVyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUhELHNFQUdDOzs7Ozs7O0FBTUQsU0FBZ0IscUJBQXFCLENBQUMsS0FBMEI7SUFDOUQsSUFBSSxLQUFLLFlBQVksbUJBQW1CLEVBQUU7UUFDeEMsT0FBTyxzQ0FBQSxLQUFLLEVBQUEsQ0FBQyx5Q0FBeUMsQ0FBQztLQUN4RDtTQUFNOztZQUNELE9BQU8sR0FBRyxFQUFFO1FBQ2hCLElBQUksY0FBUSxFQUFFO1lBQ1osT0FBTyxHQUFHLHFEQUFxRCxDQUFDO1NBQ2pFO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUMxQjtBQUNILENBQUM7QUFWRCxzREFVQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtERVZfTU9ERX0gZnJvbSAnLi4vZW52aXJvbm1lbnQvZGV2JztcblxuaW1wb3J0IHtlbnN1cmVUb2tlbklzVmFsaWQsIHNlY3JldFRva2VufSBmcm9tICcuL3NlY3JldHMnO1xuXG4vKiogQSBwcmVmaXggd2l0aCB3aGljaCBhbiBhdHRyaWJ1dGUgaXMgc2FmZSB0byBzZXQgdXNpbmcgcGxhaW4gc3RyaW5ncy4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTYWZlQXR0cmlidXRlUHJlZml4IHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmJhbi10cy1zdXBwcmVzc2lvbnMgIC8vIExJTkUtSU5URVJOQUxcbiAgLy8gQHRzLWlnbm9yZTogZXJyb3IgVFM2MTMzOiAnYnJhbmQnIGlzIGRlY2xhcmVkIGJ1dCBpdHMgdmFsdWUgaXMgbmV2ZXIgcmVhZC5cbiAgcHJpdmF0ZSByZWFkb25seSBicmFuZCE6IG5ldmVyOyAgLy8gVG8gcHJldmVudCBzdHJ1Y3R1cmFsIHR5cGluZy5cbn1cblxuLyoqIEltcGxlbWVudGF0aW9uIGZvciBgU2FmZUF0dHJpYnV0ZVByZWZpeGAgKi9cbmNsYXNzIEF0dHJpYnV0ZVByZWZpeEltcGwgZXh0ZW5kcyBTYWZlQXR0cmlidXRlUHJlZml4IHtcbiAgcmVhZG9ubHkgcHJpdmF0ZURvTm90QWNjZXNzT3JFbHNlV3JhcHBlZEF0dHJQcmVmaXg6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihhdHRyUHJlZml4OiBzdHJpbmcsIHRva2VuOiBvYmplY3QpIHtcbiAgICBzdXBlcigpO1xuICAgIGVuc3VyZVRva2VuSXNWYWxpZCh0b2tlbik7XG4gICAgdGhpcy5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VXcmFwcGVkQXR0clByZWZpeCA9IGF0dHJQcmVmaXg7XG4gIH1cblxuICBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnByaXZhdGVEb05vdEFjY2Vzc09yRWxzZVdyYXBwZWRBdHRyUHJlZml4O1xuICB9XG59XG5cbi8qKlxuICogQnVpbGRzIGEgbmV3IGBTYWZlQXR0cmlidXRlYCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcsIHdpdGhvdXQgZW5mb3JjaW5nXG4gKiBzYWZldHkgZ3VhcmFudGVlcy4gVGhpcyBzaG91bGRuJ3QgYmUgZXhwb3NlZCB0byBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzLCBhbmRcbiAqIG11c3Qgb25seSBiZSB1c2VkIGFzIGEgc3RlcCB0b3dhcmRzIHNhZmUgYnVpbGRlcnMgb3Igc2FmZSBjb25zdGFudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdHRyaWJ1dGVQcmVmaXhJbnRlcm5hbChhdHRyUHJlZml4OiBzdHJpbmcpOlxuICAgIFNhZmVBdHRyaWJ1dGVQcmVmaXgge1xuICByZXR1cm4gbmV3IEF0dHJpYnV0ZVByZWZpeEltcGwoYXR0clByZWZpeCwgc2VjcmV0VG9rZW4pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyB2YWx1ZSBvZiB0aGUgcGFzc2VkIGBTYWZlQXR0cmlidXRlUHJlZml4YCBvYmplY3Qgd2hpbGVcbiAqIGVuc3VyaW5nIGl0IGhhcyB0aGUgY29ycmVjdCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwQXR0cmlidXRlUHJlZml4KHZhbHVlOiBTYWZlQXR0cmlidXRlUHJlZml4KTogc3RyaW5nIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXR0cmlidXRlUHJlZml4SW1wbCkge1xuICAgIHJldHVybiB2YWx1ZS5wcml2YXRlRG9Ob3RBY2Nlc3NPckVsc2VXcmFwcGVkQXR0clByZWZpeDtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgbWVzc2FnZSA9ICdVbmV4cGVjdGVkIHR5cGUgd2hlbiB1bndyYXBwaW5nIFNhZmVBdHRyaWJ1dGVQcmVmaXgnO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/internals/string_literal.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/string_literal.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
goog.module('google3.third_party.javascript.safevalues.internals.string_literal');
var module = module || { id: 'third_party/javascript/safevalues/internals/string_literal.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * An object of type TemplateStringsArray represents the literal part(s) of a
 * template literal. This function checks if a TemplateStringsArray object is
 * actually from a template literal.
 *
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @param {number} numExprs The number of embedded expressions
 * @return {void}
 */
function assertIsTemplateObject(templateObj, numExprs) {
    if (!isTemplateObject(templateObj) || (numExprs + 1) !== templateObj.length) {
        throw new TypeError(`
    ############################## ERROR ##############################

    It looks like you are trying to call a template tag function (fn\`...\`)
    using the normal function syntax (fn(...)), which is not supported.

    The functions in the safevalues library are not designed to be called
    like normal functions, and doing so invalidates the security guarantees
    that safevalues provides.

    If you are stuck and not sure how to proceed, please reach out to us
    instead through:
     - go/ise-hardening-yaqs (preferred) // LINE-INTERNAL
     - g/ise-hardening // LINE-INTERNAL
     - https://github.com/google/safevalues/issues

    ############################## ERROR ##############################`);
    }
}
exports.assertIsTemplateObject = assertIsTemplateObject;
// BEGIN-INTERNAL
// TODO(gweg): OSS this once the failure is resolved.
/**
 * Checks if `templateObj` and its raw property are frozen.
 * @param {!TemplateStringsArray} templateObj
 * @return {boolean}
 */
function checkFrozen(templateObj) {
    return Object.isFrozen(templateObj) && Object.isFrozen(templateObj.raw);
}
/**
 * Examples of code that uses tagged template literals. We use this function
 * below to both check if these examples are frozen and if the code is getting
 * transpiled.
 *
 * We use multiple examples here in case the compiler transpiles sometimes but
 * not all.
 * @return {boolean}
 */
function checkFrozenExamples() {
    return checkFrozen `` && checkFrozen `\0` && checkFrozen `\n` &&
        checkFrozen `\u0000`;
}
/**
 * This value tells us if the code is transpiled, in which case we don't
 * check certain things that transpilers typically don't support. The
 * transpilation turns it into a function call that takes an array.
 * @type {boolean}
 */
const isTranspiled = checkFrozenExamples.toString().indexOf('[') !== -1 ||
    ((/**
     * @return {string}
     */
    () => ``)).toString().indexOf('`') === -1;
/**
 * This value tells us if `TemplateStringsArray` are typically frozen in the
 * current environment.
 * @type {boolean}
 */
const frozenTSA = checkFrozenExamples();
// END-INTERNAL
// BEGIN-EXTERNAL
// /**
//  * This check will tell us if the code is transpiled, in which case we don't
//  * check certain things that transpilers typically don't support.
//  */
// const isTranspiled = (() => ``).toString().indexOf('`') === -1;
//
// /** Checks if `templateObj` and its raw property are frozen. */
// function checkFrozen(templateObj: TemplateStringsArray): boolean {
//   return Object.isFrozen(templateObj) && Object.isFrozen(templateObj.raw);
// }
// END-EXTERNAL
/**
 * Polyfill of https://github.com/tc39/proposal-array-is-template-object
 * @param {!TemplateStringsArray} templateObj
 * @return {boolean}
 */
function isTemplateObject(templateObj) {
    /*
     * ############################## WARNING ##############################
     *
     * If you are reading this code to understand how to create a value
     * that satifsies this check, STOP and read this paragraph.
     *
     * This function is there to ensure that our tagged template functions are
     * always called using the tag syntax fn`...`, rather than the normal
     * function syntax fn(...). Bypassing this check invalidates the guarantees
     * that safevalues provides and will result in security issues in your code.
     *
     * If you are stuck and not sure how to proceed, please reach out to us
     * instead through:
     *  - go/ise-hardening-yaqs (preferred) // LINE-INTERNAL
     *  - g/ise-hardening // LINE-INTERNAL
     *  - https://github.com/google/safevalues/issues
     *
     * ############################## WARNING ##############################
     */
    if (!Array.isArray(templateObj) || !Array.isArray(templateObj.raw)) {
        return false;
    }
    if (templateObj.length !== (/** @type {!Array<?>} */ (templateObj.raw)).length) {
        return false;
    }
    if (!isTranspiled && templateObj === templateObj.raw) {
        // Sometimes transpilers use the same array to save on codesize if the
        // template has no special characters that would cause the values in each
        // array to be different.
        return false;
    }
    // BEGIN-EXTERNAL
    // if ((!isTranspiled || checkFrozen``) && !checkFrozen(templateObj)) {
    //   // Transpilers typically don't freeze `TemplateStringsArray` objects, but
    //   // we expect that if they did, they would do it consistently, so we also
    //   // dynamically check if they do.
    //   return false;
    // }
    // END-EXTERNAL
    // BEGIN-INTERNAL
    if ((!isTranspiled || frozenTSA) && !checkFrozen(templateObj)) {
        // Transpilers typically don't freeze `TemplateStringsArray` objects, but we
        // expect that if they did, they would do it consistently, so we also
        // dynamically check if they do.
        return false;
    }
    // END-INTERNAL
    return true;
}
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/builders/attribute_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/attribute_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.attribute_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/attribute_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_attribute_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.attribute_impl");
const tsickle_string_literal_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
const tsickle_sensitive_attributes_4 = goog.requireType("google3.third_party.javascript.safevalues.builders.sensitive_attributes");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const attribute_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.attribute_impl');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
const sensitive_attributes_1 = goog.require('google3.third_party.javascript.safevalues.builders.sensitive_attributes');
/**
 * Creates a SafeAttributePrefix object from a template literal with no
 * interpolations for attributes that share a common prefix guaranteed to be not
 * security sensitive.
 *
 * The template literal is a prefix that makes it obvious this attribute is not
 * security sensitive. If it doesn't, this function will throw.
 * @param {!TemplateStringsArray} templ
 * @return {!tsickle_attribute_impl_2.SafeAttributePrefix}
 */
function safeAttrPrefix(templ) {
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templ, 0);
    }
    /** @type {string} */
    const attrPrefix = templ[0].toLowerCase();
    if (dev_1.DEV_MODE) {
        if (attrPrefix.indexOf('on') === 0 || 'on'.indexOf(attrPrefix) === 0) {
            throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +
                `to be safe as it is also a prefix for event handler attributes` +
                `Please use 'addEventListener' to set event handlers.`);
        }
        sensitive_attributes_1.SECURITY_SENSITIVE_ATTRIBUTES.forEach((/**
         * @param {string} sensitiveAttr
         * @return {void}
         */
        sensitiveAttr => {
            if (sensitiveAttr.indexOf(attrPrefix) === 0) {
                throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +
                    `to be safe as it is also a prefix for ` +
                    `the security sensitive attribute '${sensitiveAttr}'. ` +
                    `Please use native or safe DOM APIs to set the attribute.`);
            }
        }));
    }
    return (0, attribute_impl_1.createAttributePrefixInternal)(attrPrefix);
}
exports.safeAttrPrefix = safeAttrPrefix;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlX2J1aWxkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2J1aWxkZXJzL2F0dHJpYnV0ZV9idWlsZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUE0QztBQUM1Qyw0R0FBK0Y7QUFDL0YsNEdBQW1FO0FBRW5FLHVIQUFxRTs7Ozs7Ozs7Ozs7QUFVckUsU0FBZ0IsY0FBYyxDQUFDLEtBQTJCO0lBRXhELElBQUksY0FBUSxFQUFFO1FBQ1osSUFBQSx1Q0FBc0IsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDbEM7O1VBRUssVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUU7SUFFekMsSUFBSSxjQUFRLEVBQUU7UUFDWixJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BFLE1BQU0sSUFBSSxLQUFLLENBQ1gsV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztnQkFDeEQsZ0VBQWdFO2dCQUNoRSxzREFBc0QsQ0FBQyxDQUFDO1NBQzdEO1FBRUQsb0RBQTZCLENBQUMsT0FBTzs7OztRQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3BELElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNDLE1BQU0sSUFBSSxLQUFLLENBQ1gsV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFDQUFxQztvQkFDeEQsd0NBQXdDO29CQUN4QyxxQ0FBcUMsYUFBYSxLQUFLO29CQUN2RCwwREFBMEQsQ0FBQyxDQUFDO2FBQ2pFO1FBQ0gsQ0FBQyxFQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sSUFBQSw4Q0FBNkIsRUFBQyxVQUFVLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBNUJELHdDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtERVZfTU9ERX0gZnJvbSAnLi4vZW52aXJvbm1lbnQvZGV2JztcbmltcG9ydCB7Y3JlYXRlQXR0cmlidXRlUHJlZml4SW50ZXJuYWwsIFNhZmVBdHRyaWJ1dGVQcmVmaXh9IGZyb20gJy4uL2ludGVybmFscy9hdHRyaWJ1dGVfaW1wbCc7XG5pbXBvcnQge2Fzc2VydElzVGVtcGxhdGVPYmplY3R9IGZyb20gJy4uL2ludGVybmFscy9zdHJpbmdfbGl0ZXJhbCc7XG5cbmltcG9ydCB7U0VDVVJJVFlfU0VOU0lUSVZFX0FUVFJJQlVURVN9IGZyb20gJy4vc2Vuc2l0aXZlX2F0dHJpYnV0ZXMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlQXR0cmlidXRlUHJlZml4IG9iamVjdCBmcm9tIGEgdGVtcGxhdGUgbGl0ZXJhbCB3aXRoIG5vXG4gKiBpbnRlcnBvbGF0aW9ucyBmb3IgYXR0cmlidXRlcyB0aGF0IHNoYXJlIGEgY29tbW9uIHByZWZpeCBndWFyYW50ZWVkIHRvIGJlIG5vdFxuICogc2VjdXJpdHkgc2Vuc2l0aXZlLlxuICpcbiAqIFRoZSB0ZW1wbGF0ZSBsaXRlcmFsIGlzIGEgcHJlZml4IHRoYXQgbWFrZXMgaXQgb2J2aW91cyB0aGlzIGF0dHJpYnV0ZSBpcyBub3RcbiAqIHNlY3VyaXR5IHNlbnNpdGl2ZS4gSWYgaXQgZG9lc24ndCwgdGhpcyBmdW5jdGlvbiB3aWxsIHRocm93LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZUF0dHJQcmVmaXgodGVtcGw6IFRlbXBsYXRlU3RyaW5nc0FycmF5KTpcbiAgICBTYWZlQXR0cmlidXRlUHJlZml4IHtcbiAgaWYgKERFVl9NT0RFKSB7XG4gICAgYXNzZXJ0SXNUZW1wbGF0ZU9iamVjdCh0ZW1wbCwgMCk7XG4gIH1cblxuICBjb25zdCBhdHRyUHJlZml4ID0gdGVtcGxbMF0udG9Mb3dlckNhc2UoKTtcblxuICBpZiAoREVWX01PREUpIHtcbiAgICBpZiAoYXR0clByZWZpeC5pbmRleE9mKCdvbicpID09PSAwIHx8ICdvbicuaW5kZXhPZihhdHRyUHJlZml4KSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBQcmVmaXggJyR7dGVtcGxbMF19JyBkb2VzIG5vdCBndWFyYW50ZWUgdGhlIGF0dHJpYnV0ZSBgICtcbiAgICAgICAgICBgdG8gYmUgc2FmZSBhcyBpdCBpcyBhbHNvIGEgcHJlZml4IGZvciBldmVudCBoYW5kbGVyIGF0dHJpYnV0ZXNgICtcbiAgICAgICAgICBgUGxlYXNlIHVzZSAnYWRkRXZlbnRMaXN0ZW5lcicgdG8gc2V0IGV2ZW50IGhhbmRsZXJzLmApO1xuICAgIH1cblxuICAgIFNFQ1VSSVRZX1NFTlNJVElWRV9BVFRSSUJVVEVTLmZvckVhY2goc2Vuc2l0aXZlQXR0ciA9PiB7XG4gICAgICBpZiAoc2Vuc2l0aXZlQXR0ci5pbmRleE9mKGF0dHJQcmVmaXgpID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBQcmVmaXggJyR7dGVtcGxbMF19JyBkb2VzIG5vdCBndWFyYW50ZWUgdGhlIGF0dHJpYnV0ZSBgICtcbiAgICAgICAgICAgIGB0byBiZSBzYWZlIGFzIGl0IGlzIGFsc28gYSBwcmVmaXggZm9yIGAgK1xuICAgICAgICAgICAgYHRoZSBzZWN1cml0eSBzZW5zaXRpdmUgYXR0cmlidXRlICcke3NlbnNpdGl2ZUF0dHJ9Jy4gYCArXG4gICAgICAgICAgICBgUGxlYXNlIHVzZSBuYXRpdmUgb3Igc2FmZSBET00gQVBJcyB0byBzZXQgdGhlIGF0dHJpYnV0ZS5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVBdHRyaWJ1dGVQcmVmaXhJbnRlcm5hbChhdHRyUHJlZml4KTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/internals/pure.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/pure.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
goog.module('google3.third_party.javascript.safevalues.internals.pure');
var module = module || { id: 'third_party/javascript/safevalues/internals/pure.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Mark an expression as being free of side effects.
 * @template T
 * @param {function(): T} valueOf
 * @return {T}
 */
function pure(valueOf) {
    // This odd looking expression is a workaround specific to the Closure
    // compiler to mark an expression as pure.
    // BEGIN-INTERNAL
    // TODO(b/155299094): Refactor after adding compiler support.
    // END-INTERNAL
    return ({ valueOf }).valueOf();
}
exports.pure = pure;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9pbnRlcm5hbHMvcHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBTUEsU0FBZ0IsSUFBSSxDQUFJLE9BQWdCO0lBQ3RDLHNFQUFzRTtJQUN0RSwwQ0FBMEM7SUFDMUMsaUJBQWlCO0lBQ2pCLDZEQUE2RDtJQUM3RCxlQUFlO0lBQ2YsT0FBTyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBUEQsb0JBT0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKiBNYXJrIGFuIGV4cHJlc3Npb24gYXMgYmVpbmcgZnJlZSBvZiBzaWRlIGVmZmVjdHMuICovXG5leHBvcnQgZnVuY3Rpb24gcHVyZTxUPih2YWx1ZU9mOiAoKSA9PiBUKTogVCB7XG4gIC8vIFRoaXMgb2RkIGxvb2tpbmcgZXhwcmVzc2lvbiBpcyBhIHdvcmthcm91bmQgc3BlY2lmaWMgdG8gdGhlIENsb3N1cmVcbiAgLy8gY29tcGlsZXIgdG8gbWFyayBhbiBleHByZXNzaW9uIGFzIHB1cmUuXG4gIC8vIEJFR0lOLUlOVEVSTkFMXG4gIC8vIFRPRE8oYi8xNTUyOTkwOTQpOiBSZWZhY3RvciBhZnRlciBhZGRpbmcgY29tcGlsZXIgc3VwcG9ydC5cbiAgLy8gRU5ELUlOVEVSTkFMXG4gIHJldHVybiAoe3ZhbHVlT2Z9KS52YWx1ZU9mKCk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/internals/url_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/url_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.url_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/url_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_safeurl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const internals = goog.require('goog.html.internals');
const safeurl_1 = goog.require('goog.html.SafeUrl');
const safeurl_2 = safeurl_1;
exports.SafeUrl = safeurl_2;
/**
 * Builds a new `SafeUrl` from the given string, without enforcing safety
 * guarantees. This shouldn't be exposed to application developers, and must
 * only be used as a step towards safe builders or safe constants.
 * @param {string} url
 * @return {!tsickle_safeurl_2}
 */
function createUrlInternal(url) {
    return internals.createSafeUrl(url);
}
exports.createUrlInternal = createUrlInternal;
/**
 * A SafeUrl containing 'about:blank'.
 * @type {!tsickle_safeurl_2}
 */
exports.ABOUT_BLANK = safeurl_1.ABOUT_BLANK;
/**
 * A SafeUrl containing an inert URL, used as an inert return value when
 * an unsafe input was sanitized.
 * @type {!tsickle_safeurl_2}
 */
exports.INNOCUOUS_URL = safeurl_1.INNOCUOUS_URL;
/**
 * Checks if the given value is a `SafeUrl` instance.
 * @param {*} value
 * @return {boolean}
 */
function isUrl(value) {
    return value instanceof safeurl_1;
}
exports.isUrl = isUrl;
/**
 * Returns the string value of the passed `SafeUrl` object while ensuring it
 * has the correct type.
 * @param {!tsickle_safeurl_2} value
 * @return {string}
 */
function unwrapUrl(value) {
    return safeurl_1.unwrap(value);
}
exports.unwrapUrl = unwrapUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvaW50ZXJuYWxzL3VybF9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHNEQUFtRjtBQUNuRixvREFBNEU7QUFFNUUsNEJBQTRFO0FBQXBFLDRCQUFPOzs7Ozs7OztBQVFmLFNBQWdCLGlCQUFpQixDQUFDLEdBQVc7SUFDM0MsT0FBTyxTQUFTLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCw4Q0FFQzs7Ozs7QUFHWSxRQUFBLFdBQVcsR0FBWSxVQUFRLFdBQVc7Ozs7OztBQU0xQyxRQUFBLGFBQWEsR0FBWSxVQUFRLGFBQWE7Ozs7OztBQUszRCxTQUFnQixLQUFLLENBQUMsS0FBYztJQUNsQyxPQUFPLEtBQUsscUJBQW1CLENBQUM7QUFDbEMsQ0FBQztBQUZELHNCQUVDOzs7Ozs7O0FBTUQsU0FBZ0IsU0FBUyxDQUFDLEtBQWM7SUFDdEMsT0FBTyxVQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRkQsOEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCAqIGFzIGludGVybmFscyBmcm9tICdnb29nbGUzL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9odG1sL2ludGVybmFscyc7XG5pbXBvcnQge1NhZmVVcmx9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvc2FmZXVybCc7XG5cbmV4cG9ydCB7U2FmZVVybH0gZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9zYWZldXJsJztcblxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBgU2FmZVVybGAgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLCB3aXRob3V0IGVuZm9yY2luZyBzYWZldHlcbiAqIGd1YXJhbnRlZXMuIFRoaXMgc2hvdWxkbid0IGJlIGV4cG9zZWQgdG8gYXBwbGljYXRpb24gZGV2ZWxvcGVycywgYW5kIG11c3RcbiAqIG9ubHkgYmUgdXNlZCBhcyBhIHN0ZXAgdG93YXJkcyBzYWZlIGJ1aWxkZXJzIG9yIHNhZmUgY29uc3RhbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVXJsSW50ZXJuYWwodXJsOiBzdHJpbmcpOiBTYWZlVXJsIHtcbiAgcmV0dXJuIGludGVybmFscy5jcmVhdGVTYWZlVXJsKHVybCk7XG59XG5cbi8qKiBBIFNhZmVVcmwgY29udGFpbmluZyAnYWJvdXQ6YmxhbmsnLiAqL1xuZXhwb3J0IGNvbnN0IEFCT1VUX0JMQU5LOiBTYWZlVXJsID0gU2FmZVVybC5BQk9VVF9CTEFOSztcblxuLyoqXG4gKiBBIFNhZmVVcmwgY29udGFpbmluZyBhbiBpbmVydCBVUkwsIHVzZWQgYXMgYW4gaW5lcnQgcmV0dXJuIHZhbHVlIHdoZW5cbiAqIGFuIHVuc2FmZSBpbnB1dCB3YXMgc2FuaXRpemVkLlxuICovXG5leHBvcnQgY29uc3QgSU5OT0NVT1VTX1VSTDogU2FmZVVybCA9IFNhZmVVcmwuSU5OT0NVT1VTX1VSTDtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgYFNhZmVVcmxgIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVcmwodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBTYWZlVXJsIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgU2FmZVVybDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIHBhc3NlZCBgU2FmZVVybGAgb2JqZWN0IHdoaWxlIGVuc3VyaW5nIGl0XG4gKiBoYXMgdGhlIGNvcnJlY3QgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcFVybCh2YWx1ZTogU2FmZVVybCk6IHN0cmluZyB7XG4gIHJldHVybiBTYWZlVXJsLnVud3JhcCh2YWx1ZSk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/builders/url_sanitizer.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview Provides functions to enforce the SafeUrl contract at the sink
 * level.
 *
 * Generated from: third_party/javascript/safevalues/builders/url_sanitizer.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.url_sanitizer');
var module = module || { id: 'third_party/javascript/safevalues/builders/url_sanitizer.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_log_1 = goog.requireType("goog.log");
const tsickle_dev_2 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_pure_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.pure");
const tsickle_url_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.url_impl");
const log_1 = goog.require('goog.log'); // LINE-INTERNAL
// LINE-INTERNAL
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const pure_1 = goog.require('google3.third_party.javascript.safevalues.internals.pure'); // LINE-INTERNAL
// LINE-INTERNAL
const url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.url_impl'); // LINE-INTERNAL
// LINE-INTERNAL
// BEGIN-INTERNAL
/**
 * @define {boolean}
 */
const ASSUME_IMPLEMENTS_URL_API = goog.define('ASSUME_IMPLEMENTS_URL_API', 
// TODO(b/154845327) narrow this down if earlier featureset years allow,
// if they get defined. FY2020 does NOT include Edge (EdgeHTML), which is
// good as workarounds are needed for spec compliance and a searchParams
// polyfill.
goog.FEATURESET_YEAR >= 2020);
// Tests for URL browser API support. e.g. IE doesn't support it.
/** @type {boolean} */
const supportsURLAPI = (0, pure_1.pure)((/**
 * @return {boolean}
 */
() => {
    // TODO(b/155106210) Does this work without JSCompiler?
    if (ASSUME_IMPLEMENTS_URL_API) {
        return true;
    }
    try {
        new URL('s://g');
        return true;
    }
    catch (e) {
        return false;
    }
}));
/**
 * @param {string} url
 * @return {(undefined|string)}
 */
function legacyExtractScheme(url) {
    /** @type {!HTMLAnchorElement} */
    const aTag = document.createElement('a');
    try {
        // We don't use the safe wrapper here because we don't want to sanitize the
        // URL (which would lead to a dependency loop anyway). This is safe because
        // this node is NEVER attached to the DOM.
        aTag.href = url;
    }
    catch (e) {
        return undefined;
    }
    // Chrome and Firefox resolve relative scheme to https directly,
    // while IE keeps a ':' or empty string protocol.
    /** @type {string} */
    const protocol = aTag.protocol;
    return (protocol === ':' || protocol === '') ? 'https:' : protocol;
}
/** @typedef {function(string): void} */
var JavaScriptUrlSanitizationCallback;
// END-INTERNAL
/**
 * Extracts the scheme from the given URL. If the URL is relative, https: is
 * assumed.
 * @param {string} url The URL to extract the scheme from.
 * @return {(undefined|string)} the URL scheme.
 */
function extractScheme(url) {
    // BEGIN-INTERNAL
    // We defer to the browser URL parsing as much as possible to detect
    // javascript: schemes. However, old browsers like IE don't support it.
    if (!supportsURLAPI) {
        return legacyExtractScheme(url);
    }
    // END-INTERNAL
    /** @type {?} */
    let parsedUrl;
    try {
        parsedUrl = new URL(url);
    }
    catch (e) {
        // According to https://url.spec.whatwg.org/#constructors, the URL
        // constructor with one parameter throws if `url` is not absolute. In this
        // case, we are sure that no explicit scheme (javascript: ) is set.
        // This can also be a URL parsing error, but in this case the URL won't be
        // run anyway.
        return 'https:';
    }
    return (/** @type {!URL} */ (parsedUrl)).protocol;
}
exports.extractScheme = extractScheme;
// We can't use an ES6 Set here because gws somehow depends on this code and
// doesn't want to pay the cost of a polyfill.
/** @type {!Array<string>} */
const ALLOWED_SCHEMES = ['data:', 'http:', 'https:', 'mailto:', 'ftp:'];
/**
 * Checks that the URL scheme is not javascript.
 * The URL parsing relies on the URL API in browsers that support it.
 * @param {string} url The URL to sanitize for a SafeUrl sink.
 * @return {(undefined|string)} undefined if url has a javascript: scheme, the original URL
 *     otherwise.
 */
function sanitizeJavaScriptUrl(url) {
    /** @type {(undefined|string)} */
    const parsedScheme = extractScheme(url);
    if (parsedScheme === 'javascript:') {
        // BEGIN-EXTERNAL
        // if (DEV_MODE) {
        //   console.error(`A URL with content '${url}' was sanitized away.`);
        // }
        // END-EXTERNAL
        triggerCallbacks(url); // LINE-INTERNAL
        return undefined;
    }
    return url;
}
exports.sanitizeJavaScriptUrl = sanitizeJavaScriptUrl;
/**
 * Type alias for URLs passed to DOM sink wrappers.
 * @typedef {(string|!tsickle_url_impl_4.SafeUrl)}
 */
exports.Url;
// END-INTERNAL
// BEGIN-EXTERNAL
// /**
//  * Type alias for URLs passed to DOM sink wrappers.
//  */
// export type Url = string;
// END-EXTERNAL
/**
 * Adapter to support string and SafeUrl in DOM sink wrappers. // LINE-INTERNAL
 * // LINE-EXTERNAL * Adapter to sanitize string URLs in DOM sink wrappers.
 * @param {(string|!tsickle_url_impl_4.SafeUrl)} url
 * @return {(undefined|string)} undefined if the URL was sanitized.
 */
function unwrapUrlOrSanitize(url) {
    // BEGIN-INTERNAL
    return url instanceof url_impl_1.SafeUrl ? (0, url_impl_1.unwrapUrl)(url) : sanitizeJavaScriptUrl(url);
    // END-INTERNAL
    // LINE-EXTERNAL return sanitizeJavaScriptUrl(url);
}
exports.unwrapUrlOrSanitize = unwrapUrlOrSanitize;
/**
 * Sanitizes a URL restrictively.
 * This sanitizer protects against XSS and potentially other uncommon and
 * undesirable schemes that an attacker could use for e.g. phishing (tel:,
 * callto: ssh: etc schemes). This sanitizer is primarily meant to be used by
 * the HTML sanitizer.
 * @param {string} url
 * @return {string}
 */
function restrictivelySanitizeUrl(url) {
    /** @type {(undefined|string)} */
    const parsedScheme = extractScheme(url);
    if (parsedScheme !== undefined &&
        ALLOWED_SCHEMES.indexOf(parsedScheme.toLowerCase()) !== -1) {
        return url;
    }
    // BEGIN-INTERNAL
    // The sanitizer used to sanitize URLs with SafeUrl's sanitizeUrl which
    // returns this innocuous URL. We need to keep this behavior here because some
    // golden tests still expect this value.
    // TODO(b/238861489): return a short innocuous URL
    // END-INTERNAL
    return 'about:invalid#zClosurez';
}
exports.restrictivelySanitizeUrl = restrictivelySanitizeUrl;
// BEGIN-INTERNAL
// We need to avoid using ES6 Sets here to avoid the expenssive ES5 polyfill.
// This is acceptable anyway because this array should have only few elements.
/** @type {!Array<function(string): void>} */
const sanitizationCallbacks = [];
// This callback is re-defined when a new callback is registered/removed.
// When no callback is registered, there are no references to the
// sanitizationCallbacks array, which make it possible for the compiler to
// optimize it away.
/** @type {function(string): void} */
let triggerCallbacks = (/**
 * @param {string} url
 * @return {void}
 */
(url) => { });
if (dev_1.DEV_MODE) {
    addJavaScriptUrlSanitizationCallback((/**
     * @param {string} url
     * @return {void}
     */
    (url) => {
        (0, log_1.warning)((0, log_1.getLogger)('safevalues'), `A URL with content '${url}' was sanitized away.`);
    }));
}
/**
 * Registers a sanitization callback that is called whenever a javascript: URL
 * is sanitized away.
 * @param {function(string): void} callback
 * @return {void}
 */
function addJavaScriptUrlSanitizationCallback(callback) {
    if (sanitizationCallbacks.indexOf(callback) === -1) {
        sanitizationCallbacks.push(callback);
    }
    triggerCallbacks = (/**
     * @param {string} url
     * @return {void}
     */
    (url) => {
        sanitizationCallbacks.forEach((/**
         * @param {function(string): void} callback
         * @return {void}
         */
        callback => {
            callback(url);
        }));
    });
}
exports.addJavaScriptUrlSanitizationCallback = addJavaScriptUrlSanitizationCallback;
/**
 * Unregister the JavaScript URL sanitization callback.
 * @param {function(string): void} callback
 * @return {void}
 */
function removeJavaScriptUrlSanitizationCallback(callback) {
    /** @type {number} */
    const callbackIndex = sanitizationCallbacks.indexOf(callback);
    if (callbackIndex !== -1) {
        sanitizationCallbacks.splice(callbackIndex, 1);
    }
}
exports.removeJavaScriptUrlSanitizationCallback = removeJavaScriptUrlSanitizationCallback;
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/internals/html_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview Internal implementations of SafeHtml.
 * DO NOT OPENSOURCE
 *
 * Generated from: third_party/javascript/safevalues/internals/html_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.html_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/html_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_safehtml_2 = goog.requireType("goog.html.SafeHtml");
const internals = goog.require('goog.html.internals');
const safehtml_1 = goog.require('goog.html.SafeHtml');
const safehtml_2 = safehtml_1;
exports.SafeHtml = safehtml_2;
/**
 * Builds a new `SafeHtml` from the given string, without enforcing safety
 * guarantees. It may cause side effects by creating a Trusted Types policy.
 * This shouldn't be exposed to application developers, and must only be used as
 * a step towards safe builders or safe constants.
 * @param {string} html
 * @return {!tsickle_safehtml_2}
 */
function createHtmlInternal(html) {
    return internals.createSafeHtml(html);
}
exports.createHtmlInternal = createHtmlInternal;
/**
 * An empty `SafeHtml` constant.
 * Unlike the function above, using this will not create a policy.
 * @type {!tsickle_safehtml_2}
 */
exports.EMPTY_HTML = safehtml_1.EMPTY;
/**
 * Checks if the given value is a `SafeHtml` instance.
 * @param {*} value
 * @return {boolean}
 */
function isHtml(value) {
    return value instanceof safehtml_1;
}
exports.isHtml = isHtml;
/**
 * Returns the value of the passed `SafeHtml` object while ensuring it
 * has the correct type.
 *
 * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.
 * @param {!tsickle_safehtml_2} value
 * @return {(string|!TrustedHTML)}
 */
function unwrapHtml(value) {
    return safehtml_1.unwrapTrustedHTML(value);
}
exports.unwrapHtml = unwrapHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbF9pbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2ludGVybmFscy9odG1sX2ltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBVUEsc0RBQW1GO0FBQ25GLHNEQUE4RTtBQUU5RSw4QkFBOEU7QUFBdEUsOEJBQVE7Ozs7Ozs7OztBQVNoQixTQUFnQixrQkFBa0IsQ0FBQyxJQUFZO0lBQzdDLE9BQU8sU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRkQsZ0RBRUM7Ozs7OztBQU1ZLFFBQUEsVUFBVSxHQUFhLFdBQVMsS0FBSzs7Ozs7O0FBS2xELFNBQWdCLE1BQU0sQ0FBQyxLQUFjO0lBQ25DLE9BQU8sS0FBSyxzQkFBb0IsQ0FBQztBQUNuQyxDQUFDO0FBRkQsd0JBRUM7Ozs7Ozs7OztBQVFELFNBQWdCLFVBQVUsQ0FBQyxLQUFlO0lBQ3hDLE9BQU8sV0FBUyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsZ0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbnMgb2YgU2FmZUh0bWwuXG4gKiBETyBOT1QgT1BFTlNPVVJDRVxuICovXG5cbmltcG9ydCAqIGFzIGludGVybmFscyBmcm9tICdnb29nbGUzL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9odG1sL2ludGVybmFscyc7XG5pbXBvcnQge1NhZmVIdG1sfSBmcm9tICdnb29nbGUzL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9odG1sL3NhZmVodG1sJztcblxuZXhwb3J0IHtTYWZlSHRtbH0gZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9zYWZlaHRtbCc7XG5cblxuLyoqXG4gKiBCdWlsZHMgYSBuZXcgYFNhZmVIdG1sYCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcsIHdpdGhvdXQgZW5mb3JjaW5nIHNhZmV0eVxuICogZ3VhcmFudGVlcy4gSXQgbWF5IGNhdXNlIHNpZGUgZWZmZWN0cyBieSBjcmVhdGluZyBhIFRydXN0ZWQgVHlwZXMgcG9saWN5LlxuICogVGhpcyBzaG91bGRuJ3QgYmUgZXhwb3NlZCB0byBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzLCBhbmQgbXVzdCBvbmx5IGJlIHVzZWQgYXNcbiAqIGEgc3RlcCB0b3dhcmRzIHNhZmUgYnVpbGRlcnMgb3Igc2FmZSBjb25zdGFudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdG1sSW50ZXJuYWwoaHRtbDogc3RyaW5nKTogU2FmZUh0bWwge1xuICByZXR1cm4gaW50ZXJuYWxzLmNyZWF0ZVNhZmVIdG1sKGh0bWwpO1xufVxuXG4vKipcbiAqIEFuIGVtcHR5IGBTYWZlSHRtbGAgY29uc3RhbnQuXG4gKiBVbmxpa2UgdGhlIGZ1bmN0aW9uIGFib3ZlLCB1c2luZyB0aGlzIHdpbGwgbm90IGNyZWF0ZSBhIHBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVNUFRZX0hUTUw6IFNhZmVIdG1sID0gU2FmZUh0bWwuRU1QVFk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGBTYWZlSHRtbGAgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0h0bWwodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBTYWZlSHRtbCB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNhZmVIdG1sO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBwYXNzZWQgYFNhZmVIdG1sYCBvYmplY3Qgd2hpbGUgZW5zdXJpbmcgaXRcbiAqIGhhcyB0aGUgY29ycmVjdCB0eXBlLlxuICpcbiAqIFJldHVybnMgYSBuYXRpdmUgYFRydXN0ZWRIVE1MYCBvciBhIHN0cmluZyBpZiBUcnVzdGVkIFR5cGVzIGFyZSBkaXNhYmxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcEh0bWwodmFsdWU6IFNhZmVIdG1sKTogVHJ1c3RlZEhUTUx8c3RyaW5nIHtcbiAgcmV0dXJuIFNhZmVIdG1sLnVud3JhcFRydXN0ZWRIVE1MKHZhbHVlKTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/internals/resource_url_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview Internal implementations of TrustedResourceUrl.
 * DO NOT OPENSOURCE
 *
 * Generated from: third_party/javascript/safevalues/internals/resource_url_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.resource_url_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/resource_url_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_trustedresourceurl_2 = goog.requireType("goog.html.TrustedResourceUrl");
const internals = goog.require('goog.html.internals');
const trustedresourceurl_1 = goog.require('goog.html.TrustedResourceUrl');
const trustedresourceurl_2 = trustedresourceurl_1;
exports.TrustedResourceUrl = trustedresourceurl_2;
/**
 * Builds a new `TrustedResourceUrl` from the given string, without
 * enforcing safety guarantees. It may cause side effects by creating a Trusted
 * Types policy. This shouldn't be exposed to application developers, and must
 * only be used as a step towards safe builders or safe constants.
 * @param {string} url
 * @return {!tsickle_trustedresourceurl_2}
 */
function createResourceUrlInternal(url) {
    return internals.createTrustedResourceUrl(url);
}
exports.createResourceUrlInternal = createResourceUrlInternal;
/**
 * Checks if the given value is a `TrustedResourceUrl` instance.
 * @param {*} value
 * @return {boolean}
 */
function isResourceUrl(value) {
    return value instanceof trustedresourceurl_1;
}
exports.isResourceUrl = isResourceUrl;
/**
 * Returns the value of the passed `TrustedResourceUrl` object while ensuring it
 * has the correct type.
 *
 * Returns a native `TrustedScriptURL` or a string if Trusted Types are
 * disabled.
 * @param {!tsickle_trustedresourceurl_2} value
 * @return {(string|!TrustedScriptURL)}
 */
function unwrapResourceUrl(value) {
    return trustedresourceurl_1.unwrapTrustedScriptURL(value);
}
exports.unwrapResourceUrl = unwrapResourceUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfdXJsX2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvaW50ZXJuYWxzL3Jlc291cmNlX3VybF9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBLHNEQUFtRjtBQUNuRiwwRUFBa0c7QUFFbEcsa0RBQWtHO0FBQTFGLGtEQUFrQjs7Ozs7Ozs7O0FBUzFCLFNBQWdCLHlCQUF5QixDQUFDLEdBQVc7SUFDbkQsT0FBTyxTQUFTLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUZELDhEQUVDOzs7Ozs7QUFLRCxTQUFnQixhQUFhLENBQUMsS0FBYztJQUMxQyxPQUFPLEtBQUssZ0NBQThCLENBQUM7QUFDN0MsQ0FBQztBQUZELHNDQUVDOzs7Ozs7Ozs7O0FBU0QsU0FBZ0IsaUJBQWlCLENBQUMsS0FBeUI7SUFFekQsT0FBTyxxQkFBbUIsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUhELDhDQUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgSW50ZXJuYWwgaW1wbGVtZW50YXRpb25zIG9mIFRydXN0ZWRSZXNvdXJjZVVybC5cbiAqIERPIE5PVCBPUEVOU09VUkNFXG4gKi9cblxuXG5pbXBvcnQgKiBhcyBpbnRlcm5hbHMgZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9pbnRlcm5hbHMnO1xuaW1wb3J0IHtUcnVzdGVkUmVzb3VyY2VVcmx9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvdHJ1c3RlZHJlc291cmNldXJsJztcblxuZXhwb3J0IHtUcnVzdGVkUmVzb3VyY2VVcmx9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvdHJ1c3RlZHJlc291cmNldXJsJztcblxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBgVHJ1c3RlZFJlc291cmNlVXJsYCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcsIHdpdGhvdXRcbiAqIGVuZm9yY2luZyBzYWZldHkgZ3VhcmFudGVlcy4gSXQgbWF5IGNhdXNlIHNpZGUgZWZmZWN0cyBieSBjcmVhdGluZyBhIFRydXN0ZWRcbiAqIFR5cGVzIHBvbGljeS4gVGhpcyBzaG91bGRuJ3QgYmUgZXhwb3NlZCB0byBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzLCBhbmQgbXVzdFxuICogb25seSBiZSB1c2VkIGFzIGEgc3RlcCB0b3dhcmRzIHNhZmUgYnVpbGRlcnMgb3Igc2FmZSBjb25zdGFudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNvdXJjZVVybEludGVybmFsKHVybDogc3RyaW5nKTogVHJ1c3RlZFJlc291cmNlVXJsIHtcbiAgcmV0dXJuIGludGVybmFscy5jcmVhdGVUcnVzdGVkUmVzb3VyY2VVcmwodXJsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgYFRydXN0ZWRSZXNvdXJjZVVybGAgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc291cmNlVXJsKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgVHJ1c3RlZFJlc291cmNlVXJsIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgVHJ1c3RlZFJlc291cmNlVXJsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBwYXNzZWQgYFRydXN0ZWRSZXNvdXJjZVVybGAgb2JqZWN0IHdoaWxlIGVuc3VyaW5nIGl0XG4gKiBoYXMgdGhlIGNvcnJlY3QgdHlwZS5cbiAqXG4gKiBSZXR1cm5zIGEgbmF0aXZlIGBUcnVzdGVkU2NyaXB0VVJMYCBvciBhIHN0cmluZyBpZiBUcnVzdGVkIFR5cGVzIGFyZVxuICogZGlzYWJsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bndyYXBSZXNvdXJjZVVybCh2YWx1ZTogVHJ1c3RlZFJlc291cmNlVXJsKTogVHJ1c3RlZFNjcmlwdFVSTHxcbiAgICBzdHJpbmcge1xuICByZXR1cm4gVHJ1c3RlZFJlc291cmNlVXJsLnVud3JhcFRydXN0ZWRTY3JpcHRVUkwodmFsdWUpO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/internals/script_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview Internal implementations of SafeHtml.
 * DO NOT OPENSOURCE
 *
 * Generated from: third_party/javascript/safevalues/internals/script_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.script_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/script_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_safescript_2 = goog.requireType("goog.html.SafeScript");
const internals = goog.require('goog.html.internals');
const safescript_1 = goog.require('goog.html.SafeScript');
const safescript_2 = safescript_1;
exports.SafeScript = safescript_2;
/**
 * Builds a new `SafeScript` from the given string, without enforcing
 * safety guarantees. It may cause side effects by creating a Trusted Types
 * policy. This shouldn't be exposed to application developers, and must only be
 * used as a step towards safe builders or safe constants.
 * @param {string} script
 * @return {!tsickle_safescript_2}
 */
function createScriptInternal(script) {
    return internals.createSafeScript(script);
}
exports.createScriptInternal = createScriptInternal;
/**
 * An empty `SafeScript` constant.
 * Unlike the functions above, using this will not create a policy.
 * @type {!tsickle_safescript_2}
 */
exports.EMPTY_SCRIPT = safescript_1.EMPTY;
/**
 * Checks if the given value is a `SafeScript` instance.
 * @param {*} value
 * @return {boolean}
 */
function isScript(value) {
    return value instanceof safescript_1;
}
exports.isScript = isScript;
/**
 * Returns the value of the passed `SafeScript` object while ensuring it
 * has the correct type.
 *
 * Returns a native `TrustedScript` or a string if Trusted Types are disabled.
 * @param {!tsickle_safescript_2} value
 * @return {(string|!TrustedScript)}
 */
function unwrapScript(value) {
    return safescript_1.unwrapTrustedScript(value);
}
exports.unwrapScript = unwrapScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0X2ltcGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvaW50ZXJuYWxzL3NjcmlwdF9pbXBsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVdBLHNEQUFtRjtBQUNuRiwwREFBa0Y7QUFFbEYsa0NBQWtGO0FBQTFFLGtDQUFVOzs7Ozs7Ozs7QUFTbEIsU0FBZ0Isb0JBQW9CLENBQUMsTUFBYztJQUNqRCxPQUFPLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRkQsb0RBRUM7Ozs7OztBQU1ZLFFBQUEsWUFBWSxHQUFlLGFBQVcsS0FBSzs7Ozs7O0FBS3hELFNBQWdCLFFBQVEsQ0FBQyxLQUFjO0lBQ3JDLE9BQU8sS0FBSyx3QkFBc0IsQ0FBQztBQUNyQyxDQUFDO0FBRkQsNEJBRUM7Ozs7Ozs7OztBQVFELFNBQWdCLFlBQVksQ0FBQyxLQUFpQjtJQUM1QyxPQUFPLGFBQVcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgSW50ZXJuYWwgaW1wbGVtZW50YXRpb25zIG9mIFNhZmVIdG1sLlxuICogRE8gTk9UIE9QRU5TT1VSQ0VcbiAqL1xuXG5cbmltcG9ydCAqIGFzIGludGVybmFscyBmcm9tICdnb29nbGUzL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9odG1sL2ludGVybmFscyc7XG5pbXBvcnQge1NhZmVTY3JpcHR9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvc2FmZXNjcmlwdCc7XG5cbmV4cG9ydCB7U2FmZVNjcmlwdH0gZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9zYWZlc2NyaXB0JztcblxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBgU2FmZVNjcmlwdGAgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLCB3aXRob3V0IGVuZm9yY2luZ1xuICogc2FmZXR5IGd1YXJhbnRlZXMuIEl0IG1heSBjYXVzZSBzaWRlIGVmZmVjdHMgYnkgY3JlYXRpbmcgYSBUcnVzdGVkIFR5cGVzXG4gKiBwb2xpY3kuIFRoaXMgc2hvdWxkbid0IGJlIGV4cG9zZWQgdG8gYXBwbGljYXRpb24gZGV2ZWxvcGVycywgYW5kIG11c3Qgb25seSBiZVxuICogdXNlZCBhcyBhIHN0ZXAgdG93YXJkcyBzYWZlIGJ1aWxkZXJzIG9yIHNhZmUgY29uc3RhbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2NyaXB0SW50ZXJuYWwoc2NyaXB0OiBzdHJpbmcpOiBTYWZlU2NyaXB0IHtcbiAgcmV0dXJuIGludGVybmFscy5jcmVhdGVTYWZlU2NyaXB0KHNjcmlwdCk7XG59XG5cbi8qKlxuICogQW4gZW1wdHkgYFNhZmVTY3JpcHRgIGNvbnN0YW50LlxuICogVW5saWtlIHRoZSBmdW5jdGlvbnMgYWJvdmUsIHVzaW5nIHRoaXMgd2lsbCBub3QgY3JlYXRlIGEgcG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgRU1QVFlfU0NSSVBUOiBTYWZlU2NyaXB0ID0gU2FmZVNjcmlwdC5FTVBUWTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgYFNhZmVTY3JpcHRgIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JpcHQodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBTYWZlU2NyaXB0IHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgU2FmZVNjcmlwdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgcGFzc2VkIGBTYWZlU2NyaXB0YCBvYmplY3Qgd2hpbGUgZW5zdXJpbmcgaXRcbiAqIGhhcyB0aGUgY29ycmVjdCB0eXBlLlxuICpcbiAqIFJldHVybnMgYSBuYXRpdmUgYFRydXN0ZWRTY3JpcHRgIG9yIGEgc3RyaW5nIGlmIFRydXN0ZWQgVHlwZXMgYXJlIGRpc2FibGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwU2NyaXB0KHZhbHVlOiBTYWZlU2NyaXB0KTogVHJ1c3RlZFNjcmlwdHxzdHJpbmcge1xuICByZXR1cm4gU2FmZVNjcmlwdC51bndyYXBUcnVzdGVkU2NyaXB0KHZhbHVlKTtcbn0iXX0=
;return exports;});

//third_party/javascript/safevalues/internals/style_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/style_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.style_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/style_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_safestyle_2 = goog.requireType("goog.html.SafeStyle");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const internals = goog.require('goog.html.internals');
const safestyle_1 = goog.require('goog.html.SafeStyle');
const safestyle_2 = safestyle_1;
exports.SafeStyle = safestyle_2;
/**
 * Builds a new `SafeStyle` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 * @param {string} style
 * @return {!tsickle_safestyle_2}
 */
function createStyleInternal(style) {
    return internals.createSafeStyle(style);
}
exports.createStyleInternal = createStyleInternal;
/**
 * Checks if the given value is a `SafeStyle` instance.
 * @param {*} value
 * @return {boolean}
 */
function isStyle(value) {
    return value instanceof safestyle_1;
}
exports.isStyle = isStyle;
/**
 * Returns the string value of the passed `SafeStyle` object while ensuring it
 * has the correct type.
 * @param {!tsickle_safestyle_2} value
 * @return {string}
 */
function unwrapStyle(value) {
    return safestyle_1.unwrap(value);
}
exports.unwrapStyle = unwrapStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVfaW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9pbnRlcm5hbHMvc3R5bGVfaW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxzREFBbUY7QUFDbkYsd0RBQWdGO0FBRWhGLGdDQUFnRjtBQUF4RSxnQ0FBUzs7Ozs7Ozs7QUFRakIsU0FBZ0IsbUJBQW1CLENBQUMsS0FBYTtJQUMvQyxPQUFPLFNBQVMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUZELGtEQUVDOzs7Ozs7QUFLRCxTQUFnQixPQUFPLENBQUMsS0FBYztJQUNwQyxPQUFPLEtBQUssdUJBQXFCLENBQUM7QUFDcEMsQ0FBQztBQUZELDBCQUVDOzs7Ozs7O0FBTUQsU0FBZ0IsV0FBVyxDQUFDLEtBQWdCO0lBQzFDLE9BQU8sWUFBVSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUZELGtDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBpbnRlcm5hbHMgZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9pbnRlcm5hbHMnO1xuaW1wb3J0IHtTYWZlU3R5bGV9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvc2FmZXN0eWxlJztcblxuZXhwb3J0IHtTYWZlU3R5bGV9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvc2FmZXN0eWxlJztcblxuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyBgU2FmZVN0eWxlYCBmcm9tIHRoZSBnaXZlbiBzdHJpbmcsIHdpdGhvdXQgZW5mb3JjaW5nXG4gKiBzYWZldHkgZ3VhcmFudGVlcy4gVGhpcyBzaG91bGRuJ3QgYmUgZXhwb3NlZCB0byBhcHBsaWNhdGlvbiBkZXZlbG9wZXJzLCBhbmRcbiAqIG11c3Qgb25seSBiZSB1c2VkIGFzIGEgc3RlcCB0b3dhcmRzIHNhZmUgYnVpbGRlcnMgb3Igc2FmZSBjb25zdGFudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHlsZUludGVybmFsKHN0eWxlOiBzdHJpbmcpOiBTYWZlU3R5bGUge1xuICByZXR1cm4gaW50ZXJuYWxzLmNyZWF0ZVNhZmVTdHlsZShzdHlsZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGBTYWZlU3R5bGVgIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHlsZSh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFNhZmVTdHlsZSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFNhZmVTdHlsZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIHBhc3NlZCBgU2FmZVN0eWxlYCBvYmplY3Qgd2hpbGUgZW5zdXJpbmcgaXRcbiAqIGhhcyB0aGUgY29ycmVjdCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwU3R5bGUodmFsdWU6IFNhZmVTdHlsZSk6IHN0cmluZyB7XG4gIHJldHVybiBTYWZlU3R5bGUudW53cmFwKHZhbHVlKTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/builders/html_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_html_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_resource_url_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_script_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_style_impl_5 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_impl");
const tsickle_url_impl_6 = goog.requireType("google3.third_party.javascript.safevalues.internals.url_impl");
const tsickle_url_sanitizer_7 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev'); // LINE-INTERNAL
// LINE-INTERNAL
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
const style_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_impl'); // LINE-INTERNAL
// LINE-INTERNAL
const url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.url_impl'); // LINE-INTERNAL
// LINE-INTERNAL
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer'); // LINE-INTERNAL
// LINE-INTERNAL
/**
 * Returns HTML-escaped text as a `SafeHtml` object. No-op if value is already a
 * SafeHtml instance.
 *
 * Available options:
 * - `preserveSpaces` turns every second consecutive space character into its
 * HTML entity representation (`&#160;`).
 * - `preserveNewlines` turns newline characters into breaks (`<br>`).
 * - `preserveTabs` wraps tab characters in a span with style=white-space:pre.
 * @param {(string|!tsickle_html_impl_2.SafeHtml)} value
 * @param {{preserveNewlines: (undefined|boolean), preserveSpaces: (undefined|boolean), preserveTabs: (undefined|boolean)}=} options
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function htmlEscape(value, options = {}) {
    if ((0, html_impl_1.isHtml)(value)) {
        return value;
    }
    /** @type {string} */
    let htmlEscapedString = htmlEscapeToString(value);
    if (options.preserveSpaces) {
        // Do this first to ensure we preserve spaces after newlines and tabs.
        htmlEscapedString =
            htmlEscapedString.replace(/(^|[\r\n\t ]) /g, '$1&#160;');
    }
    if (options.preserveNewlines) {
        htmlEscapedString = htmlEscapedString.replace(/(\r\n|\n|\r)/g, '<br>');
    }
    if (options.preserveTabs) {
        htmlEscapedString = htmlEscapedString.replace(/(\t+)/g, '<span style="white-space:pre">$1</span>');
    }
    return (0, html_impl_1.createHtmlInternal)(htmlEscapedString);
}
exports.htmlEscape = htmlEscape;
/**
 * Creates a `SafeHtml` representing a script tag with inline script content.
 * @param {!tsickle_script_impl_4.SafeScript} script
 * @param {{id: (undefined|string), nonce: (undefined|string), type: (undefined|string), defer: (undefined|boolean)}=} options
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function scriptToHtml(script, options = {}) {
    /** @type {string} */
    const unwrappedScript = (0, script_impl_1.unwrapScript)(script).toString();
    /** @type {string} */
    let stringTag = `<script`;
    if (options.id) {
        stringTag += ` id="${htmlEscapeToString(options.id)}"`;
    }
    if (options.nonce) {
        stringTag += ` nonce="${htmlEscapeToString(options.nonce)}"`;
    }
    if (options.type) {
        stringTag += ` type="${htmlEscapeToString(options.type)}"`;
    }
    if (options.defer) {
        stringTag += ` defer`;
    }
    stringTag += `>${unwrappedScript}\u003C/script>`;
    return (0, html_impl_1.createHtmlInternal)(stringTag);
}
exports.scriptToHtml = scriptToHtml;
/**
 * Creates a `SafeHtml` representing a script tag with the src attribute.
 * This also supports CSP nonces and async loading.
 * @param {!tsickle_resource_url_impl_3.TrustedResourceUrl} src
 * @param {{async: (undefined|boolean), nonce: (undefined|string)}=} options
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function scriptUrlToHtml(src, options = {}) {
    /** @type {string} */
    const unwrappedSrc = (0, resource_url_impl_1.unwrapResourceUrl)(src).toString();
    /** @type {string} */
    let stringTag = `<script src="${htmlEscapeToString(unwrappedSrc)}"`;
    if (options.async) {
        stringTag += ' async';
    }
    if (options.nonce) {
        stringTag += ` nonce="${htmlEscapeToString(options.nonce)}"`;
    }
    stringTag += '>\u003C/script>';
    return (0, html_impl_1.createHtmlInternal)(stringTag);
}
exports.scriptUrlToHtml = scriptUrlToHtml;
/**
 * HTML-escapes the given text (`&`, `<`, `>`, `"` and `'`).
 * @param {string} text
 * @return {string}
 */
function htmlEscapeToString(text) {
    /** @type {string} */
    const escaped = text.replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
    return escaped;
}
/**
 * Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s.
 * @param {!ReadonlyArray<(string|!tsickle_html_impl_2.SafeHtml)>} htmls
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function concatHtmls(htmls) {
    return (0, html_impl_1.createHtmlInternal)(htmls.map((/**
     * @param {(string|!tsickle_html_impl_2.SafeHtml)} value
     * @return {(string|!TrustedHTML)}
     */
    (value) => (0, html_impl_1.unwrapHtml)(htmlEscape(value)))).join(''));
}
exports.concatHtmls = concatHtmls;
/** @typedef {(string|number|!tsickle_url_impl_6.SafeUrl|!tsickle_style_impl_5.SafeStyle)} */
var AttributeValue;
/**
 * Shorthand for union of types that can sensibly be converted to strings
 * or might already be SafeHtml.
 * @typedef {(string|number|boolean|!tsickle_html_impl_2.SafeHtml)}
 */
var TextOrHtml;
/** @type {!RegExp} */
const VALID_TAG_OR_ATTRIBUTE_NAMES = /^[a-z][a-z\d-]*$/i;
/**
 * Tags which are unsupported via createHtml(). They might be
 * supported via a tag-specific create method. These are tags which might
 * require a TrustedResourceUrl in one of their attributes or a restricted
 * type for their content.
 * @type {!Array<string>}
 */
const DISALLOWED_TAG_NAMES = [
    'APPLET',
    'BASE',
    'EMBED',
    'IFRAME',
    'LINK',
    'MATH',
    'META',
    'OBJECT',
    'SCRIPT',
    'STYLE',
    'SVG',
    'TEMPLATE',
];
/** @type {!Array<string>} */
const VOID_TAG_NAMES = [
    'AREA',
    'BR',
    'COL',
    'COMMAND',
    'HR',
    'IMG',
    'INPUT',
    'KEYGEN',
    'PARAM',
    'SOURCE',
    'TRACK',
    'WBR',
];
/**
 * Attributes that can cause the execution of javascript: URLs.
 * @type {!Array<string>}
 */
const URL_ATTRIBUTES = ['action', 'formaction', 'href'];
/**
 * Verifies if the tag name is valid and if it doesn't change the context.
 * E.g. STRONG is fine but SCRIPT throws because it changes context. See
 * createHtml for an explanation of allowed tags.
 * @throws {!Error} If invalid tag name is provided.
 * @param {string} tagName
 * @return {void}
 */
function verifyTagName(tagName) {
    if (!VALID_TAG_OR_ATTRIBUTE_NAMES.test(tagName)) {
        throw new Error(dev_1.DEV_MODE ? `Invalid tag name <${tagName}>.` : '');
    }
    if (DISALLOWED_TAG_NAMES.indexOf(tagName.toUpperCase()) !== -1) {
        throw new Error(dev_1.DEV_MODE ? `Tag name <${tagName}> is not allowed for createHtml.` : '');
    }
}
/**
 * Creates a SafeHtml content consisting of a tag with optional attributes and
 * optional content.
 * This is roughly equivalent to Closure's goog.html.SafeHtml.create function,
 * with a few dropped features, like Const strings. It is discouraged for new
 * usages. Prefer using a recommended templating system like Lit instead.
 *
 * Example usage:
 *
 * createHtml('br');
 * createHtml('div', {'class': 'a'});
 * createHtml('p', {}, 'a');
 * createHtml('p', {}, createHtml('br'));
 *
 * createHtml('span', {
 *   'style': {'margin': '0'}
 * });
 *
 * To guarantee SafeHtml's type contract is upheld there are restrictions on
 * attribute values and tag names.
 *
 * - Attributes which contain script code (e.g. on*) are disallowed.
 * - For attributes which are interpreted as URLs (e.g. src, href), the URL
 * will be sanitized with javascript: URLs blocked.
 * - Tags which are not supported by this function are applet, base, embed,
 *   iframe, link, math, meta, object, script, style, svg, and template.
 * @param {string} tagName
 * @param {(undefined|!Object<string,(undefined|string|number|!tsickle_url_impl_6.SafeUrl|!tsickle_style_impl_5.SafeStyle)>)=} attributes
 * @param {(undefined|string|number|boolean|!tsickle_html_impl_2.SafeHtml|!Array<(string|number|boolean|!tsickle_html_impl_2.SafeHtml)>)=} content
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function createHtml(tagName, attributes, content) {
    verifyTagName(tagName);
    /** @type {string} */
    let result = `<${tagName}`;
    if (attributes) {
        result += stringifyAttributes(tagName, attributes);
    }
    if (!Array.isArray(content)) {
        content = (content === undefined) ? [] : [content];
    }
    if (VOID_TAG_NAMES.indexOf(tagName.toUpperCase()) !== -1) {
        if (dev_1.DEV_MODE) {
            if ((/** @type {!Array<(string|number|boolean|!tsickle_html_impl_2.SafeHtml)>} */ (content)).length > 0) {
                throw new Error(`Void tag <${tagName}> does not allow content.`);
            }
        }
        result += '>';
    }
    else {
        /** @type {!tsickle_html_impl_2.SafeHtml} */
        const html = concatHtmls((/** @type {!Array<(string|number|boolean|!tsickle_html_impl_2.SafeHtml)>} */ (content)).map((/**
         * @param {(string|number|boolean|!tsickle_html_impl_2.SafeHtml)} value
         * @return {!tsickle_html_impl_2.SafeHtml}
         */
        (value) => (0, html_impl_1.isHtml)(value) ? value : htmlEscape(String(value)))));
        result += '>' + html.toString() + '</' + tagName + '>';
    }
    return (0, html_impl_1.createHtmlInternal)(result);
}
exports.createHtml = createHtml;
/**
 * Creates a string with attributes to insert after tagName.
 * @throws {!Error} If attribute value is unsafe for the given tag and
 *     attribute.
 * @param {string} tagName
 * @param {!Object<string,(undefined|string|number|!tsickle_url_impl_6.SafeUrl|!tsickle_style_impl_5.SafeStyle)>} attributes
 * @return {string}
 */
function stringifyAttributes(tagName, attributes) {
    /** @type {string} */
    let result = '';
    /** @type {!Array<string>} */
    const attrNames = Object.keys(attributes);
    for (let i = 0; i < attrNames.length; i++) {
        /** @type {string} */
        const name = attrNames[i];
        /** @type {(undefined|string|number|!tsickle_url_impl_6.SafeUrl|!tsickle_style_impl_5.SafeStyle)} */
        const value = attributes[name];
        if (!VALID_TAG_OR_ATTRIBUTE_NAMES.test(name)) {
            throw new Error(dev_1.DEV_MODE ? `Invalid attribute name "${name}".` : '');
        }
        if (value === undefined || value === null) {
            continue;
        }
        result += ' ' + getAttrNameAndValue(tagName, name, value);
    }
    return result;
}
/**
 * @param {string} tagName
 * @param {string} name
 * @param {(string|number|!tsickle_url_impl_6.SafeUrl|!tsickle_style_impl_5.SafeStyle)} value
 * @return {string}
 */
function getAttrNameAndValue(tagName, name, value) {
    if (/^on/i.test(name)) {
        throw new Error(dev_1.DEV_MODE ?
            `Attribute "${name} is forbidden. Inline event handlers can lead to XSS. Please use the 'addEventListener' API instead.` :
            '');
    }
    else if (URL_ATTRIBUTES.indexOf(name.toLowerCase()) !== -1) {
        if ((0, url_impl_1.isUrl)(value)) {
            value = (/** @type {!tsickle_url_impl_6.SafeUrl} */ (value)).toString();
        }
        else {
            value = (0, url_sanitizer_1.sanitizeJavaScriptUrl)(String(value)) || 'about:invalid#zClosurez';
        }
    }
    if (dev_1.DEV_MODE) {
        if (!(0, url_impl_1.isUrl)(value) && !(0, html_impl_1.isHtml)(value) && !(0, style_impl_1.isStyle)(value) &&
            typeof value !== 'string' && typeof value !== 'number') {
            throw new Error(`String or number value expected, got ${typeof value} with value '${value}' given.`);
        }
    }
    return `${name}="${htmlEscape(String(value))}"`;
}
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/dom/globals/range.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/range.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.range');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/range.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_html_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
/**
 * Safely creates a contextualFragment.
 * @param {!Range} range
 * @param {!tsickle_html_impl_1.SafeHtml} html
 * @return {!DocumentFragment}
 */
function createContextualFragment(range, html) {
    return range.createContextualFragment((/** @type {string} */ ((0, html_impl_1.unwrapHtml)(html))));
}
exports.createContextualFragment = createContextualFragment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2dsb2JhbHMvcmFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxrR0FBK0Q7Ozs7Ozs7QUFHL0QsU0FBZ0Isd0JBQXdCLENBQ3BDLEtBQVksRUFBRSxJQUFjO0lBQzlCLE9BQU8sS0FBSyxDQUFDLHdCQUF3QixDQUFDLHdCQUFBLElBQUEsc0JBQVUsRUFBQyxJQUFJLENBQUMsRUFBVSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUhELDREQUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5cbmltcG9ydCB7U2FmZUh0bWwsIHVud3JhcEh0bWx9IGZyb20gJy4uLy4uL2ludGVybmFscy9odG1sX2ltcGwnO1xuXG4vKiogU2FmZWx5IGNyZWF0ZXMgYSBjb250ZXh0dWFsRnJhZ21lbnQuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KFxuICAgIHJhbmdlOiBSYW5nZSwgaHRtbDogU2FmZUh0bWwpOiBEb2N1bWVudEZyYWdtZW50IHtcbiAgcmV0dXJuIHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCh1bndyYXBIdG1sKGh0bWwpIGFzIHN0cmluZyk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/inert_fragment.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/inert_fragment.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.inert_fragment');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/inert_fragment.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_range_1 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.range");
const tsickle_html_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const range_1 = goog.require('google3.third_party.javascript.safevalues.dom.globals.range');
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
/**
 * Returns a fragment that contains the parsed HTML for `dirtyHtml` without
 * executing any of the potential payload.
 * @param {string} dirtyHtml
 * @return {!DocumentFragment}
 */
function createInertFragment(dirtyHtml) {
    // We create a new document to ensure the nodes stay detached
    /** @type {!Range} */
    const range = document.implementation.createHTMLDocument('').createRange();
    // This call is only used to create an inert tree for the sanitizer to
    // further process and is never returned directly to the caller. We can't use
    // a reviewed conversion in order to avoid an import loop.
    /** @type {!tsickle_html_impl_2.SafeHtml} */
    const temporarySafeHtml = (0, html_impl_1.createHtmlInternal)(dirtyHtml);
    return (0, range_1.createContextualFragment)(range, temporarySafeHtml);
}
exports.createInertFragment = createInertFragment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5lcnRfZnJhZ21lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvYnVpbGRlcnMvaHRtbF9zYW5pdGl6ZXIvaW5lcnRfZnJhZ21lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsNEZBQWlFO0FBQ2pFLGtHQUE2RDs7Ozs7OztBQU03RCxTQUFnQixtQkFBbUIsQ0FBQyxTQUFpQjs7O1VBRTdDLEtBQUssR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7Ozs7VUFLcEUsaUJBQWlCLEdBQUcsSUFBQSw4QkFBa0IsRUFBQyxTQUFTLENBQUM7SUFDdkQsT0FBTyxJQUFBLGdDQUF3QixFQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFURCxrREFTQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnR9IGZyb20gJy4uLy4uL2RvbS9nbG9iYWxzL3JhbmdlJztcbmltcG9ydCB7Y3JlYXRlSHRtbEludGVybmFsfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvaHRtbF9pbXBsJztcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnJhZ21lbnQgdGhhdCBjb250YWlucyB0aGUgcGFyc2VkIEhUTUwgZm9yIGBkaXJ0eUh0bWxgIHdpdGhvdXRcbiAqIGV4ZWN1dGluZyBhbnkgb2YgdGhlIHBvdGVudGlhbCBwYXlsb2FkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5lcnRGcmFnbWVudChkaXJ0eUh0bWw6IHN0cmluZyk6IERvY3VtZW50RnJhZ21lbnQge1xuICAvLyBXZSBjcmVhdGUgYSBuZXcgZG9jdW1lbnQgdG8gZW5zdXJlIHRoZSBub2RlcyBzdGF5IGRldGFjaGVkXG4gIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKS5jcmVhdGVSYW5nZSgpO1xuXG4gIC8vIFRoaXMgY2FsbCBpcyBvbmx5IHVzZWQgdG8gY3JlYXRlIGFuIGluZXJ0IHRyZWUgZm9yIHRoZSBzYW5pdGl6ZXIgdG9cbiAgLy8gZnVydGhlciBwcm9jZXNzIGFuZCBpcyBuZXZlciByZXR1cm5lZCBkaXJlY3RseSB0byB0aGUgY2FsbGVyLiBXZSBjYW4ndCB1c2VcbiAgLy8gYSByZXZpZXdlZCBjb252ZXJzaW9uIGluIG9yZGVyIHRvIGF2b2lkIGFuIGltcG9ydCBsb29wLlxuICBjb25zdCB0ZW1wb3JhcnlTYWZlSHRtbCA9IGNyZWF0ZUh0bWxJbnRlcm5hbChkaXJ0eUh0bWwpO1xuICByZXR1cm4gY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHJhbmdlLCB0ZW1wb3JhcnlTYWZlSHRtbCk7XG59Il19
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/no_clobber.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/no_clobber.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Library that provides safe getters for different node properties and
 * checks for clobbering.
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.no_clobber');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/no_clobber.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Gets a reasonable nodeName, even for clobbered nodes.
 * @param {!Node} node
 * @return {string}
 */
function getNodeName(node) {
    /** @type {string} */
    const nodeName = node.nodeName;
    // If the property is clobbered, assume it is an `HTMLFormElement`.
    return (typeof nodeName === 'string') ? nodeName : 'FORM';
}
exports.getNodeName = getNodeName;
/**
 * Returns true if the object passed is a Text node.
 * @param {!Node} node
 * @return {boolean}
 */
function isText(node) {
    // The property cannot get clobbered on Text nodes.
    return node.nodeType === 3; // Node.TEXT_NODE
}
exports.isText = isText;
/**
 * Returns true if the object passed is an Element node.
 * @param {!Node} node
 * @return {boolean}
 */
function isElement(node) {
    /** @type {number} */
    const nodeType = node.nodeType;
    // If the property is clobbered, we can assume it is an `HTMLFormElement`, and
    // thus an `Element`.
    return (nodeType === 1 /* Node.ELEMENT_NODE */) ||
        (typeof nodeType !== 'number');
}
exports.isElement = isElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9fY2xvYmJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9idWlsZGVycy9odG1sX3Nhbml0aXplci9ub19jbG9iYmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFXQSxTQUFnQixXQUFXLENBQUMsSUFBVTs7VUFDOUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRO0lBQzlCLG1FQUFtRTtJQUNuRSxPQUFPLENBQUMsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQzVELENBQUM7QUFKRCxrQ0FJQzs7Ozs7O0FBR0QsU0FBZ0IsTUFBTSxDQUFDLElBQVU7SUFDL0IsbURBQW1EO0lBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBRSxpQkFBaUI7QUFDaEQsQ0FBQztBQUhELHdCQUdDOzs7Ozs7QUFHRCxTQUFnQixTQUFTLENBQUMsSUFBVTs7VUFDNUIsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRO0lBQzlCLDhFQUE4RTtJQUM5RSxxQkFBcUI7SUFDckIsT0FBTyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsdUJBQXVCLENBQUM7UUFDM0MsQ0FBQyxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBTkQsOEJBTUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbi8qKlxuICogTGlicmFyeSB0aGF0IHByb3ZpZGVzIHNhZmUgZ2V0dGVycyBmb3IgZGlmZmVyZW50IG5vZGUgcHJvcGVydGllcyBhbmRcbiAqIGNoZWNrcyBmb3IgY2xvYmJlcmluZy5cbiAqL1xuXG4vKiogR2V0cyBhIHJlYXNvbmFibGUgbm9kZU5hbWUsIGV2ZW4gZm9yIGNsb2JiZXJlZCBub2Rlcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlTmFtZShub2RlOiBOb2RlKTogc3RyaW5nIHtcbiAgY29uc3Qgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lO1xuICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgY2xvYmJlcmVkLCBhc3N1bWUgaXQgaXMgYW4gYEhUTUxGb3JtRWxlbWVudGAuXG4gIHJldHVybiAodHlwZW9mIG5vZGVOYW1lID09PSAnc3RyaW5nJykgPyBub2RlTmFtZSA6ICdGT1JNJztcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IHBhc3NlZCBpcyBhIFRleHQgbm9kZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1RleHQobm9kZTogTm9kZSk6IG5vZGUgaXMgVGV4dCB7XG4gIC8vIFRoZSBwcm9wZXJ0eSBjYW5ub3QgZ2V0IGNsb2JiZXJlZCBvbiBUZXh0IG5vZGVzLlxuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMzsgIC8vIE5vZGUuVEVYVF9OT0RFXG59XG5cbi8qKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaXMgYW4gRWxlbWVudCBub2RlLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudChub2RlOiBOb2RlKTogbm9kZSBpcyBFbGVtZW50IHtcbiAgY29uc3Qgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAvLyBJZiB0aGUgcHJvcGVydHkgaXMgY2xvYmJlcmVkLCB3ZSBjYW4gYXNzdW1lIGl0IGlzIGFuIGBIVE1MRm9ybUVsZW1lbnRgLCBhbmRcbiAgLy8gdGh1cyBhbiBgRWxlbWVudGAuXG4gIHJldHVybiAobm9kZVR5cGUgPT09IDEgLyogTm9kZS5FTEVNRU5UX05PREUgKi8pIHx8XG4gICAgICAodHlwZW9mIG5vZGVUeXBlICE9PSAnbnVtYmVyJyk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/sanitizer_table.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/sanitizer_table.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/sanitizer_table.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Class for holding element and attribute policies used for sanitization.
 */
class SanitizerTable {
    /**
     * @public
     * @param {!ReadonlySet<string>} allowedElements
     * @param {!ReadonlyMap<string, !ReadonlyMap<string, !AttributePolicy>>} elementPolicies
     * @param {!ReadonlySet<string>} allowedGlobalAttributes
     * @param {!ReadonlyMap<string, !AttributePolicy>} globalAttributePolicies
     * @param {(undefined|!ReadonlySet<string>)=} globallyAllowedAttributePrefixes
     */
    constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies, globallyAllowedAttributePrefixes) {
        this.allowedElements = allowedElements;
        this.elementPolicies = elementPolicies;
        this.allowedGlobalAttributes = allowedGlobalAttributes;
        this.globalAttributePolicies = globalAttributePolicies;
        this.globallyAllowedAttributePrefixes = globallyAllowedAttributePrefixes;
    }
    /**
     * @public
     * @param {string} elementName
     * @return {boolean}
     */
    isAllowedElement(elementName) {
        // Note: `HTMLFormElement`s are always dropped, supporting them is very
        // costly because of the DOM clobberring they can cause. The additional code
        // size required to properly work around DOM clobberring issues is large and
        // shouldn't be put on every user of the sanitizer. Thoroughly review
        // b/210975025 and the CLs linked there before you start allowing form
        // elements.
        return elementName !== 'FORM' &&
            (this.allowedElements.has(elementName) ||
                this.elementPolicies.has(elementName));
    }
    /**
     * @public
     * @param {string} attributeName
     * @param {string} elementName
     * @return {!AttributePolicy}
     */
    getAttributePolicy(attributeName, elementName) {
        /** @type {(undefined|!ReadonlyMap<string, !AttributePolicy>)} */
        const elementPolicy = this.elementPolicies.get(elementName);
        if (elementPolicy?.has(attributeName)) {
            return (/** @type {!AttributePolicy} */ (elementPolicy.get(attributeName)));
        }
        if (this.allowedGlobalAttributes.has(attributeName)) {
            return { policyAction: AttributePolicyAction.KEEP };
        }
        /** @type {(undefined|!AttributePolicy)} */
        const globalPolicy = this.globalAttributePolicies.get(attributeName);
        if (globalPolicy) {
            return globalPolicy;
        }
        if (this.globallyAllowedAttributePrefixes &&
            [...this.globallyAllowedAttributePrefixes].some((/**
             * @param {string} prefix
             * @return {boolean}
             */
            (prefix) => attributeName.indexOf(prefix) === 0))) {
            return { policyAction: AttributePolicyAction.KEEP };
        }
        return { policyAction: AttributePolicyAction.DROP };
    }
}
exports.SanitizerTable = SanitizerTable;
/* istanbul ignore if */
if (false) {
    /**
     * @const {!ReadonlySet<string>}
     * @public
     */
    SanitizerTable.prototype.allowedElements;
    /**
     * @const {!ReadonlyMap<string, !ReadonlyMap<string, !AttributePolicy>>}
     * @public
     */
    SanitizerTable.prototype.elementPolicies;
    /**
     * @const {!ReadonlySet<string>}
     * @public
     */
    SanitizerTable.prototype.allowedGlobalAttributes;
    /**
     * @const {!ReadonlyMap<string, !AttributePolicy>}
     * @public
     */
    SanitizerTable.prototype.globalAttributePolicies;
    /**
     * @const {(undefined|!ReadonlySet<string>)}
     * @public
     */
    SanitizerTable.prototype.globallyAllowedAttributePrefixes;
}
/**
 * Holds information on how to sanitize the attributes of a particular element.
 * An element with an ElementPolicy specified is implicitly kept in the output.
 * @typedef {!ReadonlyMap<string, !AttributePolicy>}
 */
exports.ElementPolicy;
/**
 * Values derived from
 * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy
 * @enum {number}
 */
const AttributePolicyAction = {
    DROP: 0,
    KEEP: 1,
    KEEP_AND_SANITIZE_URL: 2,
    KEEP_AND_NORMALIZE: 3,
    KEEP_AND_SANITIZE_STYLE: 4,
};
exports.AttributePolicyAction = AttributePolicyAction;
AttributePolicyAction[AttributePolicyAction.DROP] = 'DROP';
AttributePolicyAction[AttributePolicyAction.KEEP] = 'KEEP';
AttributePolicyAction[AttributePolicyAction.KEEP_AND_SANITIZE_URL] = 'KEEP_AND_SANITIZE_URL';
AttributePolicyAction[AttributePolicyAction.KEEP_AND_NORMALIZE] = 'KEEP_AND_NORMALIZE';
AttributePolicyAction[AttributePolicyAction.KEEP_AND_SANITIZE_STYLE] = 'KEEP_AND_SANITIZE_STYLE';
/**
 * Holds information on how to sanitize the values of a particular attribute.
 * @record
 */
function AttributePolicy() { }
exports.AttributePolicy = AttributePolicy;
/* istanbul ignore if */
if (false) {
    /**
     * @const {!AttributePolicyAction}
     * @public
     */
    AttributePolicy.prototype.policyAction;
    /**
     * @const {(undefined|!ReadonlyMap<string, !Set<string>>)}
     * @public
     */
    AttributePolicy.prototype.conditions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemVyX3RhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2J1aWxkZXJzL2h0bWxfc2FuaXRpemVyL3Nhbml0aXplcl90YWJsZS9zYW5pdGl6ZXJfdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BLE1BQWEsY0FBYzs7Ozs7Ozs7O0lBQ3pCLFlBQ2EsZUFBb0MsRUFDcEMsZUFBbUQsRUFDbkQsdUJBQTRDLEVBQzVDLHVCQUE2RCxFQUM3RCxnQ0FBc0Q7UUFKdEQsb0JBQWUsR0FBZixlQUFlLENBQXFCO1FBQ3BDLG9CQUFlLEdBQWYsZUFBZSxDQUFvQztRQUNuRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXFCO1FBQzVDLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBc0M7UUFDN0QscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUFzQjtJQUFHLENBQUM7Ozs7OztJQUd2RSxnQkFBZ0IsQ0FBQyxXQUFtQjtRQUNsQyx1RUFBdUU7UUFDdkUsNEVBQTRFO1FBQzVFLDRFQUE0RTtRQUM1RSxxRUFBcUU7UUFDckUsc0VBQXNFO1FBQ3RFLFlBQVk7UUFDWixPQUFPLFdBQVcsS0FBSyxNQUFNO1lBQ3pCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7Ozs7SUFFRCxrQkFBa0IsQ0FBQyxhQUFxQixFQUFFLFdBQW1COztjQUVyRCxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQzNELElBQUksYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNyQyxPQUFPLGtDQUFBLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQztTQUMxQztRQUVELElBQUksSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNuRCxPQUFPLEVBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLElBQUksRUFBQyxDQUFDO1NBQ25EOztjQUVLLFlBQVksR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUNwRSxJQUFJLFlBQVksRUFBRTtZQUNoQixPQUFPLFlBQVksQ0FBQztTQUNyQjtRQUNELElBQUksSUFBSSxDQUFDLGdDQUFnQztZQUNyQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsSUFBSTs7OztZQUMzQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUMsRUFBRTtZQUN4RCxPQUFPLEVBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLElBQUksRUFBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTyxFQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxJQUFJLEVBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Y7QUEzQ0Qsd0NBMkNDOzs7Ozs7O0lBekNLLHlDQUE2Qzs7Ozs7SUFDN0MseUNBQTREOzs7OztJQUM1RCxpREFBcUQ7Ozs7O0lBQ3JELGlEQUFzRTs7Ozs7SUFDdEUsMERBQStEOzs7Ozs7O0FBMkNyRSxzQkFBaUU7Ozs7OztBQU1qRSxNQUFZLHFCQUFxQjtJQUMvQixJQUFJLEdBQUE7SUFDSixJQUFJLEdBQUE7SUFDSixxQkFBcUIsR0FBQTtJQUNyQixrQkFBa0IsR0FBQTtJQUNsQix1QkFBdUIsR0FBQTtFQUN4Qjs7Ozs7Ozs7Ozs7QUFLRCw4QkFLQzs7Ozs7Ozs7SUFKQyx1Q0FBNkM7Ozs7O0lBRzdDLHFDQUF1RCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqIENsYXNzIGZvciBob2xkaW5nIGVsZW1lbnQgYW5kIGF0dHJpYnV0ZSBwb2xpY2llcyB1c2VkIGZvciBzYW5pdGl6YXRpb24uICovXG5leHBvcnQgY2xhc3MgU2FuaXRpemVyVGFibGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHJlYWRvbmx5IGFsbG93ZWRFbGVtZW50czogUmVhZG9ubHlTZXQ8c3RyaW5nPixcbiAgICAgIHJlYWRvbmx5IGVsZW1lbnRQb2xpY2llczogUmVhZG9ubHlNYXA8c3RyaW5nLCBFbGVtZW50UG9saWN5PixcbiAgICAgIHJlYWRvbmx5IGFsbG93ZWRHbG9iYWxBdHRyaWJ1dGVzOiBSZWFkb25seVNldDxzdHJpbmc+LFxuICAgICAgcmVhZG9ubHkgZ2xvYmFsQXR0cmlidXRlUG9saWNpZXM6IFJlYWRvbmx5TWFwPHN0cmluZywgQXR0cmlidXRlUG9saWN5PixcbiAgICAgIHJlYWRvbmx5IGdsb2JhbGx5QWxsb3dlZEF0dHJpYnV0ZVByZWZpeGVzPzogUmVhZG9ubHlTZXQ8c3RyaW5nPikge31cblxuXG4gIGlzQWxsb3dlZEVsZW1lbnQoZWxlbWVudE5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIC8vIE5vdGU6IGBIVE1MRm9ybUVsZW1lbnRgcyBhcmUgYWx3YXlzIGRyb3BwZWQsIHN1cHBvcnRpbmcgdGhlbSBpcyB2ZXJ5XG4gICAgLy8gY29zdGx5IGJlY2F1c2Ugb2YgdGhlIERPTSBjbG9iYmVycmluZyB0aGV5IGNhbiBjYXVzZS4gVGhlIGFkZGl0aW9uYWwgY29kZVxuICAgIC8vIHNpemUgcmVxdWlyZWQgdG8gcHJvcGVybHkgd29yayBhcm91bmQgRE9NIGNsb2JiZXJyaW5nIGlzc3VlcyBpcyBsYXJnZSBhbmRcbiAgICAvLyBzaG91bGRuJ3QgYmUgcHV0IG9uIGV2ZXJ5IHVzZXIgb2YgdGhlIHNhbml0aXplci4gVGhvcm91Z2hseSByZXZpZXdcbiAgICAvLyBiLzIxMDk3NTAyNSBhbmQgdGhlIENMcyBsaW5rZWQgdGhlcmUgYmVmb3JlIHlvdSBzdGFydCBhbGxvd2luZyBmb3JtXG4gICAgLy8gZWxlbWVudHMuXG4gICAgcmV0dXJuIGVsZW1lbnROYW1lICE9PSAnRk9STScgJiZcbiAgICAgICAgKHRoaXMuYWxsb3dlZEVsZW1lbnRzLmhhcyhlbGVtZW50TmFtZSkgfHxcbiAgICAgICAgIHRoaXMuZWxlbWVudFBvbGljaWVzLmhhcyhlbGVtZW50TmFtZSkpO1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlUG9saWN5KGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgZWxlbWVudE5hbWU6IHN0cmluZyk6XG4gICAgICBBdHRyaWJ1dGVQb2xpY3kge1xuICAgIGNvbnN0IGVsZW1lbnRQb2xpY3kgPSB0aGlzLmVsZW1lbnRQb2xpY2llcy5nZXQoZWxlbWVudE5hbWUpO1xuICAgIGlmIChlbGVtZW50UG9saWN5Py5oYXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50UG9saWN5LmdldChhdHRyaWJ1dGVOYW1lKSE7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWxsb3dlZEdsb2JhbEF0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4ge3BvbGljeUFjdGlvbjogQXR0cmlidXRlUG9saWN5QWN0aW9uLktFRVB9O1xuICAgIH1cblxuICAgIGNvbnN0IGdsb2JhbFBvbGljeSA9IHRoaXMuZ2xvYmFsQXR0cmlidXRlUG9saWNpZXMuZ2V0KGF0dHJpYnV0ZU5hbWUpO1xuICAgIGlmIChnbG9iYWxQb2xpY3kpIHtcbiAgICAgIHJldHVybiBnbG9iYWxQb2xpY3k7XG4gICAgfVxuICAgIGlmICh0aGlzLmdsb2JhbGx5QWxsb3dlZEF0dHJpYnV0ZVByZWZpeGVzICYmXG4gICAgICAgIFsuLi50aGlzLmdsb2JhbGx5QWxsb3dlZEF0dHJpYnV0ZVByZWZpeGVzXS5zb21lKFxuICAgICAgICAgICAgKHByZWZpeCkgPT4gYXR0cmlidXRlTmFtZS5pbmRleE9mKHByZWZpeCkgPT09IDApKSB7XG4gICAgICByZXR1cm4ge3BvbGljeUFjdGlvbjogQXR0cmlidXRlUG9saWN5QWN0aW9uLktFRVB9O1xuICAgIH1cbiAgICByZXR1cm4ge3BvbGljeUFjdGlvbjogQXR0cmlidXRlUG9saWN5QWN0aW9uLkRST1B9O1xuICB9XG59XG5cbi8qKlxuICogSG9sZHMgaW5mb3JtYXRpb24gb24gaG93IHRvIHNhbml0aXplIHRoZSBhdHRyaWJ1dGVzIG9mIGEgcGFydGljdWxhciBlbGVtZW50LlxuICogQW4gZWxlbWVudCB3aXRoIGFuIEVsZW1lbnRQb2xpY3kgc3BlY2lmaWVkIGlzIGltcGxpY2l0bHkga2VwdCBpbiB0aGUgb3V0cHV0LlxuICovXG5leHBvcnQgdHlwZSBFbGVtZW50UG9saWN5ID0gUmVhZG9ubHlNYXA8c3RyaW5nLCBBdHRyaWJ1dGVQb2xpY3k+O1xuXG4vKipcbiAqIFZhbHVlcyBkZXJpdmVkIGZyb21cbiAqIGh0dHBzOi8vZ29kb2MuY29ycC5nb29nbGUuY29tL3BrZy9nb29nbGUzL3RoaXJkX3BhcnR5L3NhZmVodG1sL3Nhbml0aXplci9wb2xpY3kjQXR0cmlidXRlUG9saWN5XG4gKi9cbmV4cG9ydCBlbnVtIEF0dHJpYnV0ZVBvbGljeUFjdGlvbiB7XG4gIERST1AsXG4gIEtFRVAsXG4gIEtFRVBfQU5EX1NBTklUSVpFX1VSTCxcbiAgS0VFUF9BTkRfTk9STUFMSVpFLFxuICBLRUVQX0FORF9TQU5JVElaRV9TVFlMRSxcbn1cblxuLyoqXG4gKiBIb2xkcyBpbmZvcm1hdGlvbiBvbiBob3cgdG8gc2FuaXRpemUgdGhlIHZhbHVlcyBvZiBhIHBhcnRpY3VsYXIgYXR0cmlidXRlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF0dHJpYnV0ZVBvbGljeSB7XG4gIHJlYWRvbmx5IHBvbGljeUFjdGlvbjogQXR0cmlidXRlUG9saWN5QWN0aW9uO1xuICAvLyBUaGlzIGF0dHJpYnV0ZSBpcyBvbmx5IGFsbG93ZWQgaWYgdGhlIGF0dHJpYnV0ZXMgKHVzZWQgYXMgdGhlIGtleXMgaW5cbiAgLy8gdGhlIG1hcCkgaXMgZXF1YWwgdG8gb25lIG9mIHRoZSB2YWx1ZXMgaW4gdGhlIHNldC5cbiAgcmVhZG9ubHkgY29uZGl0aW9ucz86IFJlYWRvbmx5TWFwPHN0cmluZywgU2V0PHN0cmluZz4+O1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/default_sanitizer_table.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/default_sanitizer_table.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.default_sanitizer_table');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/sanitizer_table/default_sanitizer_table.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_pure_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.pure");
const tsickle_sanitizer_table_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/* GENERATED CODE, DO NOT MODIFY */
const pure_1 = goog.require('google3.third_party.javascript.safevalues.internals.pure');
const sanitizer_table_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table');
/** @type {!ReadonlyArray<string>} */
const ALLOWED_ELEMENTS = [
    'ARTICLE', 'SECTION', 'NAV', 'ASIDE', 'H1', 'H2',
    'H3', 'H4', 'H5', 'H6', 'HEADER', 'FOOTER',
    'ADDRESS', 'P', 'HR', 'PRE', 'BLOCKQUOTE', 'OL',
    'UL', 'LH', 'LI', 'DL', 'DT', 'DD',
    'FIGURE', 'FIGCAPTION', 'MAIN', 'DIV', 'EM', 'STRONG',
    'SMALL', 'S', 'CITE', 'Q', 'DFN', 'ABBR',
    'RUBY', 'RB', 'RT', 'RTC', 'RP', 'DATA',
    'TIME', 'CODE', 'VAR', 'SAMP', 'KBD', 'SUB',
    'SUP', 'I', 'B', 'U', 'MARK', 'BDI',
    'BDO', 'SPAN', 'BR', 'WBR', 'INS', 'DEL',
    'PICTURE', 'PARAM', 'TRACK', 'MAP', 'TABLE', 'CAPTION',
    'COLGROUP', 'COL', 'TBODY', 'THEAD', 'TFOOT', 'TR',
    'TD', 'TH', 'SELECT', 'DATALIST', 'OPTGROUP', 'OPTION',
    'OUTPUT', 'PROGRESS', 'METER', 'FIELDSET', 'LEGEND', 'DETAILS',
    'SUMMARY', 'MENU', 'DIALOG', 'SLOT', 'CANVAS', 'FONT',
    'CENTER',
];
/** @type {!ReadonlyArray<!Array<?>>} */
const ELEMENT_POLICIES = [
    [
        'A', new Map([
            ['href', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL }],
        ])
    ],
    [
        'AREA', new Map([
            ['href', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL }],
        ])
    ],
    [
        'LINK', new Map([
            [
                'href', {
                    policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL,
                    conditions: new Map([[
                            'rel', new Set([
                                'alternate',
                                'author',
                                'bookmark',
                                'canonical',
                                'cite',
                                'help',
                                'icon',
                                'license',
                                'next',
                                'prefetch',
                                'dns-prefetch',
                                'prerender',
                                'preconnect',
                                'preload',
                                'prev',
                                'search',
                                'subresource',
                            ])
                        ]])
                }
            ],
        ])
    ],
    [
        'SOURCE', new Map([
            ['src', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP }],
        ])
    ],
    [
        'IMG', new Map([
            ['src', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP }],
        ])
    ],
    [
        'VIDEO', new Map([
            ['src', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP }],
        ])
    ],
    [
        'AUDIO', new Map([
            ['src', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP }],
        ])
    ],
];
/** @type {!ReadonlyArray<string>} */
const ALLOWED_GLOBAL_ATTRIBUTES = [
    'title',
    'aria-atomic',
    'aria-autocomplete',
    'aria-busy',
    'aria-checked',
    'aria-current',
    'aria-disabled',
    'aria-dropeffect',
    'aria-expanded',
    'aria-haspopup',
    'aria-hidden',
    'aria-invalid',
    'aria-label',
    'aria-level',
    'aria-live',
    'aria-multiline',
    'aria-multiselectable',
    'aria-orientation',
    'aria-posinset',
    'aria-pressed',
    'aria-readonly',
    'aria-relevant',
    'aria-required',
    'aria-selected',
    'aria-setsize',
    'aria-sort',
    'aria-valuemax',
    'aria-valuemin',
    'aria-valuenow',
    'aria-valuetext',
    'alt',
    'align',
    'autocapitalize',
    'autocomplete',
    'autocorrect',
    'autofocus',
    'autoplay',
    'bgcolor',
    'border',
    'cellpadding',
    'cellspacing',
    'checked',
    'color',
    'cols',
    'colspan',
    'controls',
    'datetime',
    'disabled',
    'download',
    'draggable',
    'enctype',
    'face',
    'formenctype',
    'frameborder',
    'height',
    'hreflang',
    'hidden',
    'ismap',
    'label',
    'lang',
    'loop',
    'max',
    'maxlength',
    'media',
    'minlength',
    'min',
    'multiple',
    'muted',
    'nonce',
    'open',
    'placeholder',
    'preload',
    'rel',
    'required',
    'reversed',
    'role',
    'rows',
    'rowspan',
    'selected',
    'shape',
    'size',
    'sizes',
    'slot',
    'span',
    'spellcheck',
    'start',
    'step',
    'summary',
    'translate',
    'type',
    'valign',
    'value',
    'width',
    'wrap',
    'itemscope',
    'itemtype',
    'itemid',
    'itemprop',
    'itemref',
];
/** @type {!ReadonlyArray<!Array<?>>} */
const GLOBAL_ATTRIBUTE_POLICIES = [
    [
        'dir', {
            policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_NORMALIZE,
            conditions: (0, pure_1.pure)((/**
             * @return {!Map<string, !Set<string>>}
             */
            () => {
                return new Map([[
                        'dir', new Set([
                            'auto',
                            'ltr',
                            'rtl',
                        ])
                    ]]);
            }))
        }
    ],
    [
        'async', {
            policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_NORMALIZE,
            conditions: (0, pure_1.pure)((/**
             * @return {!Map<string, !Set<string>>}
             */
            () => {
                return new Map([[
                        'async', new Set([
                            'async',
                        ])
                    ]]);
            }))
        }
    ],
    ['cite', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL }],
    [
        'loading', {
            policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_NORMALIZE,
            conditions: (0, pure_1.pure)((/**
             * @return {!Map<string, !Set<string>>}
             */
            () => {
                return new Map([[
                        'loading', new Set([
                            'eager',
                            'lazy',
                        ])
                    ]]);
            }))
        }
    ],
    ['poster', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL }],
    [
        'target', {
            policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_NORMALIZE,
            conditions: (0, pure_1.pure)((/**
             * @return {!Map<string, !Set<string>>}
             */
            () => {
                return new Map([[
                        'target', new Set([
                            '_self',
                            '_blank',
                        ])
                    ]]);
            }))
        }
    ],
];
/**
 * Sanitizer table for the default sanitizer configuration
 * // BEGIN-INTERNAL
 * This SanitizerTable was generated from the checked in html contract:
 *  webutil/html/types/codegen/html5_contract.textpb
 *
 * You can regenerate this file with:
 * webutil/html/types/codegen/update_generated_source_files.sh  // END-INTERNAL
 * @type {!tsickle_sanitizer_table_2.SanitizerTable}
 */
exports.defaultSanitizerTable = new sanitizer_table_1.SanitizerTable(new Set(ALLOWED_ELEMENTS), new Map(ELEMENT_POLICIES), new Set(ALLOWED_GLOBAL_ATTRIBUTES), new Map(GLOBAL_ATTRIBUTE_POLICIES));
// BEGIN-INTERNAL
/**
 * This is similar to the default sanitizer configuration, but tries to allow as
 * many things while still guaranteeing the security of the output.
 *
 * We construct it directly rather than relying on the `HtmlSanitizerBuilder` to
 * make sure that the compiler knows it can be dead-code eliminated when unused.
 * @type {!tsickle_sanitizer_table_2.SanitizerTable}
 */
exports.lenientSanitizerTable = new sanitizer_table_1.SanitizerTable(new Set(ALLOWED_ELEMENTS), new Map(ELEMENT_POLICIES), new Set((0, pure_1.pure)((/**
 * @return {!Array<string>}
 */
() => ALLOWED_GLOBAL_ATTRIBUTES.concat(['class', 'id'])))), new Map((0, pure_1.pure)((/**
 * @return {!Array<!Array<?>>}
 */
() => GLOBAL_ATTRIBUTE_POLICIES.concat([
    ['style', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_STYLE }],
])))));
/**
 * This is also similar to the default sanitizer configuration, but tries to be
 * even more lenient than the lenientSanitizerTable while still guaranteeing
 * that the output cannot cause XSS in modern browsers. This should only be
 * used when absolutely necessary. See go/super-lenient-sanitizer for more
 * information.
 *
 * We construct it directly rather than relying on the `HtmlSanitizerBuilder` to
 * make sure that the compiler knows it can be dead-code eliminated when unused.
 * @type {!tsickle_sanitizer_table_2.SanitizerTable}
 */
exports.superLenientSanitizerTable = new sanitizer_table_1.SanitizerTable(new Set((0, pure_1.pure)((/**
 * @return {!Array<string>}
 */
() => ALLOWED_ELEMENTS.concat(['STYLE', 'TITLE', 'INPUT', 'TEXTAREA', 'BUTTON', 'LABEL'])))), new Map(ELEMENT_POLICIES), new Set((0, pure_1.pure)((/**
 * @return {!Array<string>}
 */
() => ALLOWED_GLOBAL_ATTRIBUTES.concat(['class', 'id', 'tabindex', 'contenteditable', 'name'])))), new Map((0, pure_1.pure)((/**
 * @return {!Array<!Array<?>>}
 */
() => GLOBAL_ATTRIBUTE_POLICIES.concat([
    ['style', { policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_STYLE }],
])))), new Set(['data-', 'aria-']));
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_html_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_pure_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.pure");
const tsickle_secrets_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.secrets");
const tsickle_url_sanitizer_5 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_inert_fragment_6 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.inert_fragment");
const tsickle_no_clobber_7 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.no_clobber");
const tsickle_default_sanitizer_table_8 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.default_sanitizer_table");
const tsickle_sanitizer_table_9 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
const pure_1 = goog.require('google3.third_party.javascript.safevalues.internals.pure');
const secrets_1 = goog.require('google3.third_party.javascript.safevalues.internals.secrets');
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
const inert_fragment_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.inert_fragment');
const no_clobber_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.no_clobber');
const default_sanitizer_table_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.default_sanitizer_table');
const sanitizer_table_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table');
// BEGIN-INTERNAL
// clang-format off
const default_sanitizer_table_2 = default_sanitizer_table_1;
/**
 * An HTML5-compliant markup sanitizer that produces SafeHtml markup.
 *
 * You can build sanitizers with a custom configuration using the
 * HtmlSanitizerBuilder. // BEGIN-INTERNAL
 *
 * For any questions: go/safehtml-yaqs
 * Design document: go/ts-safehtml-sanitizer // END-INTERNAL
 * @record
 */
function HtmlSanitizer() { }
exports.HtmlSanitizer = HtmlSanitizer;
/* istanbul ignore if */
if (false) {
    /**
     * @public
     * @param {string} html
     * @return {!tsickle_html_impl_2.SafeHtml}
     */
    HtmlSanitizer.prototype.sanitize = function (html) { };
    /**
     * @public
     * @param {string} html
     * @return {!DocumentFragment}
     */
    HtmlSanitizer.prototype.sanitizeToFragment = function (html) { };
    /**
     * @public
     * @param {string} html
     * @return {!tsickle_html_impl_2.SafeHtml}
     */
    HtmlSanitizer.prototype.sanitizeAssertUnchanged = function (html) { };
}
/**
 * Implementation for `HtmlSanitizer`
 * @implements {HtmlSanitizer}
 */
class HtmlSanitizerImpl {
    /**
     * @public
     * @param {!tsickle_sanitizer_table_9.SanitizerTable} sanitizerTable
     * @param {!Object} token
     */
    constructor(sanitizerTable, token) {
        this.sanitizerTable = sanitizerTable;
        this.changes = [];
        (0, secrets_1.ensureTokenIsValid)(token);
    }
    /**
     * @public
     * @param {string} html
     * @return {!tsickle_html_impl_2.SafeHtml}
     */
    sanitizeAssertUnchanged(html) {
        this.changes = [];
        /** @type {!tsickle_html_impl_2.SafeHtml} */
        const sanitizedHtml = this.sanitize(html);
        if (this.changes.length !== 0) {
            /** @type {string} */
            let message = '';
            if (dev_1.DEV_MODE) {
                message =
                    `Unexpected change to HTML value as a result of sanitization. ` +
                        `Input: "${html}", sanitized output: "${sanitizedHtml}"\n` +
                        `List of changes:${this.changes.join('\n')}`;
            }
            throw new Error(message);
        }
        return sanitizedHtml;
    }
    /**
     * @public
     * @param {string} html
     * @return {!tsickle_html_impl_2.SafeHtml}
     */
    sanitize(html) {
        /** @type {!HTMLSpanElement} */
        const fakeRoot = document.createElement('span');
        fakeRoot.appendChild(this.sanitizeToFragment(html));
        // XML serialization is preferred over HTML serialization as it is
        // stricter and makes sure all attributes are properly escaped, avoiding
        // cases where the tree might mutate when parsed again later due to the
        // complexities of the HTML parsing algorithm
        /** @type {string} */
        let serializedNewTree = new XMLSerializer().serializeToString(fakeRoot);
        // We remove the outer most element as this is the span node created as
        // the root for the sanitized tree and contains a spurious xmlns attribute
        // from the XML serialization step.
        serializedNewTree = serializedNewTree.slice(serializedNewTree.indexOf('>') + 1, serializedNewTree.lastIndexOf('</'));
        return (0, html_impl_1.createHtmlInternal)(serializedNewTree);
    }
    /**
     * @public
     * @param {string} html
     * @return {!DocumentFragment}
     */
    sanitizeToFragment(html) {
        /** @type {!DocumentFragment} */
        const dirtyFragment = (0, inert_fragment_1.createInertFragment)(html);
        /** @type {!TreeWalker} */
        const treeWalker = document.createTreeWalker(dirtyFragment, 5 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT */, (/** @type {(function(!Node): number|{acceptNode: function(!Node): number})} */ ((/** @type {*} */ (
        // IE10 and IE11 won't accept a proper `NodeFilter` interface, and
        // expect the filtering function to be passed directly. It seems that
        // other browsers also do not mind getting the function directly. see
        // https://stackoverflow.com/q/38245898
        ((/**
         * @param {!Node} n
         * @return {number}
         */
        (n) => this.nodeFilter(n))))))), 
        // tslint:disable-next-line:ban-ts-suppressions  // LINE-INTERNAL
        // @ts-ignore: error TS2554: Expected 1-3 arguments, but got 4.
        false);
        // `nextNode` is called so we skip the root `DocumentFragment`.
        /** @type {(null|!Node)} */
        let currentNode = treeWalker.nextNode();
        // We create a root element to attach all the children of the body to. We
        // use div as it as a semantic-free, generic container and does not
        // represent anything. This is removed when we serialize the tree back
        // into a string.
        /** @type {!DocumentFragment} */
        const sanitizedFragment = document.createDocumentFragment();
        /** @type {!Node} */
        let sanitizedParent = sanitizedFragment;
        while (currentNode !== null) {
            /** @type {?} */
            let sanitizedNode;
            if ((0, no_clobber_1.isText)(currentNode)) {
                sanitizedNode = this.sanitizeTextNode(currentNode);
            }
            else if ((0, no_clobber_1.isElement)(currentNode)) {
                sanitizedNode = this.sanitizeElementNode(currentNode);
            }
            else {
                /** @type {string} */
                let message = '';
                if (dev_1.DEV_MODE) {
                    message = 'Node is not of type text or element';
                }
                throw new Error(message);
            }
            sanitizedParent.appendChild(sanitizedNode);
            // Advance iterator while keeping track of the sanitized parent for the
            // current node
            currentNode = treeWalker.firstChild();
            if (currentNode) {
                sanitizedParent = sanitizedNode;
            }
            else {
                while (!(currentNode = treeWalker.nextSibling())) {
                    if (!(currentNode = treeWalker.parentNode())) {
                        break;
                    }
                    sanitizedParent = (/** @type {!ParentNode} */ (sanitizedParent.parentNode));
                }
            }
        }
        return sanitizedFragment;
    }
    /**
     * @private
     * @param {!Text} textNode
     * @return {!Text}
     */
    sanitizeTextNode(textNode) {
        return document.createTextNode(textNode.data);
    }
    /**
     * @private
     * @param {!Element} elementNode
     * @return {!Element}
     */
    sanitizeElementNode(elementNode) {
        /** @type {string} */
        const elementName = (0, no_clobber_1.getNodeName)(elementNode);
        /** @type {!HTMLElement} */
        const newNode = document.createElement(elementName);
        /** @type {!NamedNodeMap} */
        const dirtyAttributes = elementNode.attributes;
        for (const { name, value } of dirtyAttributes) {
            /** @type {!tsickle_sanitizer_table_9.AttributePolicy} */
            const policy = this.sanitizerTable.getAttributePolicy(name, elementName);
            if (!this.satisfiesAllConditions(policy.conditions, dirtyAttributes)) {
                this.recordChange(`Not all conditions satisfied for attribute: ${name}.`);
                continue;
            }
            switch (policy.policyAction) {
                case sanitizer_table_1.AttributePolicyAction.KEEP:
                    setAttribute(newNode, name, value);
                    break;
                case sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_URL:
                    /** @type {string} */
                    const sanitizedAttrUrl = (0, url_sanitizer_1.restrictivelySanitizeUrl)(value);
                    if (sanitizedAttrUrl !== value) {
                        this.recordChange(`Url in attribute ${name} was modified during sanitization. Original url:"${value}" was sanitized to: "${sanitizedAttrUrl}"`);
                    }
                    setAttribute(newNode, name, sanitizedAttrUrl);
                    break;
                case sanitizer_table_1.AttributePolicyAction.KEEP_AND_NORMALIZE:
                    // We don't consider changing the case of an attribute value to be a
                    // semantic change
                    setAttribute(newNode, name, value.toLowerCase());
                    break;
                case sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_STYLE:
                    setAttribute(newNode, name, value);
                    break;
                case sanitizer_table_1.AttributePolicyAction.DROP:
                    this.recordChange(`Attribute: ${name} was dropped`);
                    break;
                default:
                    if (dev_1.DEV_MODE) {
                        checkExhaustive(policy.policyAction, 'Unhandled AttributePolicyAction case');
                    }
            }
        }
        return newNode;
    }
    /**
     * @public
     * @param {!Node} node
     * @return {number}
     */
    nodeFilter(node) {
        if ((0, no_clobber_1.isText)(node)) {
            return 1; // NodeFilter.FILTER_ACCEPT
        }
        else if (!(0, no_clobber_1.isElement)(node)) {
            // Getting a node that is neither an `Element` or a `Text` node. This is
            // likely due to something that is not supposed to be an element in user
            // code but recognized as such by the TreeWalker (e.g. a polyfill for
            // other kind of nodes). Since we can't recognize it as an element, we
            // drop the node, but we don't record it as a meaningful change.
            return 2; // NodeFilter.FILTER_REJECT
        }
        /** @type {string} */
        const nodeName = (0, no_clobber_1.getNodeName)(node);
        if (nodeName === null) {
            this.recordChange(`Node name was null for node: ${node}`);
            return 2; // NodeFilter.FILTER_REJECT
        }
        if (this.sanitizerTable.isAllowedElement(nodeName)) {
            return 1; // NodeFilter.FILTER_ACCEPT
        }
        this.recordChange(`Element: ${nodeName} was dropped`);
        return 2; // NodeFilter.FILTER_REJECT
    }
    /**
     * @private
     * @param {string} errorMessage
     * @return {void}
     */
    recordChange(errorMessage) {
        if (dev_1.DEV_MODE) {
            this.changes.push(errorMessage);
        }
        else if (this.changes.length === 0) {
            this.changes.push('');
        }
    }
    /**
     * @private
     * @param {(undefined|!ReadonlyMap<string, !Set<string>>)} conditions
     * @param {!NamedNodeMap} attrs
     * @return {boolean}
     */
    satisfiesAllConditions(conditions, attrs) {
        if (!conditions) {
            return true;
        }
        for (const [attrName__tsickle_destructured_1, expectedValues__tsickle_destructured_2] of conditions) {
            const attrName = /** @type {string} */ (attrName__tsickle_destructured_1);
            const expectedValues = /** @type {!Set<string>} */ (expectedValues__tsickle_destructured_2);
            /** @type {(undefined|string)} */
            const value = attrs.getNamedItem(attrName)?.value;
            if (value && !expectedValues.has(value)) {
                return false;
            }
        }
        return true;
    }
}
exports.HtmlSanitizerImpl = HtmlSanitizerImpl;
/* istanbul ignore if */
if (false) {
    /**
     * @type {!Array<string>}
     * @private
     */
    HtmlSanitizerImpl.prototype.changes;
    /**
     * @const {!tsickle_sanitizer_table_9.SanitizerTable}
     * @private
     */
    HtmlSanitizerImpl.prototype.sanitizerTable;
}
/**
 * @noinline Helper to save on codesize.
 * @param {!Element} el
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
function setAttribute(el, name, value) {
    el.setAttribute(name, value);
}
/** @type {!HtmlSanitizerImpl} */
const defaultHtmlSanitizer = (0, pure_1.pure)((/**
 * @return {!HtmlSanitizerImpl}
 */
() => new HtmlSanitizerImpl(default_sanitizer_table_1.defaultSanitizerTable, secrets_1.secretToken)));
/**
 * Sanitizes untrusted html using the default sanitizer configuration.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function sanitizeHtml(html) {
    return defaultHtmlSanitizer.sanitize(html);
}
exports.sanitizeHtml = sanitizeHtml;
/**
 * Sanitizes untrusted html using the default sanitizer configuration. Throws
 * an error if the html was changed.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function sanitizeHtmlAssertUnchanged(html) {
    return defaultHtmlSanitizer.sanitizeAssertUnchanged(html);
}
exports.sanitizeHtmlAssertUnchanged = sanitizeHtmlAssertUnchanged;
/**
 * Sanitizes untrusted html using the default sanitizer configuration. Throws
 * an error if the html was changed.
 * @param {string} html
 * @return {!DocumentFragment}
 */
function sanitizeHtmlToFragment(html) {
    return defaultHtmlSanitizer.sanitizeToFragment(html);
}
exports.sanitizeHtmlToFragment = sanitizeHtmlToFragment;
// BEGIN-INTERNAL
/** @type {!HtmlSanitizerImpl} */
const lenientHtmlSanitizer = (0, pure_1.pure)((/**
 * @return {!HtmlSanitizerImpl}
 */
() => new HtmlSanitizerImpl(default_sanitizer_table_2.lenientSanitizerTable, secrets_1.secretToken)));
/**
 * Sanitize the given HTML fragment in as lenient of a way as possible while
 * still guaranteeing that the output is safe.
 *
 * If at all possible, prefer using `sanitizeHtml` over this method.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function lenientlySanitizeHtml(html) {
    return lenientHtmlSanitizer.sanitize(html);
}
exports.lenientlySanitizeHtml = lenientlySanitizeHtml;
/**
 * Like `sanitizeHtmlAssertUnchanged` but using the lenient sanitizer.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function lenientlySanitizeHtmlAssertUnchanged(html) {
    return lenientHtmlSanitizer.sanitizeAssertUnchanged(html);
}
exports.lenientlySanitizeHtmlAssertUnchanged = lenientlySanitizeHtmlAssertUnchanged;
/** @type {!HtmlSanitizerImpl} */
const superLenientHtmlSanitizer = (0, pure_1.pure)((/**
 * @return {!HtmlSanitizerImpl}
 */
() => new HtmlSanitizerImpl(default_sanitizer_table_2.superLenientSanitizerTable, secrets_1.secretToken)));
/**
 * Sanitize the given HTML fragment in an extremely lenient way while
 * still guaranteeing that the output cannot lead to XSS in modern browsers.
 *
 * If at all possible, prefer using `sanitizeHtml` or `lenientlySanitizeHtml` over this method.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function superLenientlySanitizeHtml(html) {
    return superLenientHtmlSanitizer.sanitize(html);
}
exports.superLenientlySanitizeHtml = superLenientlySanitizeHtml;
/**
 * Like `superLenientlySanitizeHtml` but it throws an exception if the output is changed.
 * @param {string} html
 * @return {!tsickle_html_impl_2.SafeHtml}
 */
function superLenientlySanitizeHtmlAssertUnchanged(html) {
    return superLenientHtmlSanitizer.sanitizeAssertUnchanged(html);
}
exports.superLenientlySanitizeHtmlAssertUnchanged = superLenientlySanitizeHtmlAssertUnchanged;
// END-INTERNAL
/**
 * @param {?} value
 * @param {string=} msg
 * @return {?}
 */
function checkExhaustive(value, msg = `unexpected value ${value}!`) {
    throw new Error(msg);
}
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer_builder.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer_builder.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer_builder');
var module = module || { id: 'third_party/javascript/safevalues/builders/html_sanitizer/html_sanitizer_builder.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_secrets_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.secrets");
const tsickle_html_sanitizer_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer");
const tsickle_default_sanitizer_table_3 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.default_sanitizer_table");
const tsickle_sanitizer_table_4 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const secrets_1 = goog.require('google3.third_party.javascript.safevalues.internals.secrets');
const html_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer');
const default_sanitizer_table_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.default_sanitizer_table');
const sanitizer_table_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.sanitizer_table.sanitizer_table');
/**
 * This class allows modifications to the default sanitizer configuration.
 */
class HtmlSanitizerBuilder {
    /**
     * @public
     */
    constructor() {
        // To denote if the builder has called build() and therefore should make no
        // further changes to the sanitizer table.
        this.calledBuild = false;
        this.sanitizerTable = default_sanitizer_table_1.defaultSanitizerTable;
    }
    /**
     * Builder option to restrict allowed elements to a smaller subset.
     * @public
     * @param {!ReadonlySet<string>} elementSet
     * @return {!HtmlSanitizerBuilder}
     */
    onlyAllowElements(elementSet) {
        /** @type {!Set<string>} */
        const allowedElements = new Set();
        /** @type {!Map<string, !ReadonlyMap<string, !tsickle_sanitizer_table_4.AttributePolicy>>} */
        const allowedElementPolicies = new Map();
        for (let element of elementSet) {
            element = element.toUpperCase();
            if (!this.sanitizerTable.isAllowedElement(element)) {
                throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);
            }
            /** @type {(undefined|!ReadonlyMap<string, !tsickle_sanitizer_table_4.AttributePolicy>)} */
            const elementPolicy = this.sanitizerTable.elementPolicies.get(element);
            if (elementPolicy !== undefined) {
                allowedElementPolicies.set(element, elementPolicy);
            }
            else {
                allowedElements.add(element);
            }
        }
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);
        return this;
    }
    /**
     * Builder option to restrict allowed attributes to a smaller subset.
     *
     * If the attribute isn't currently allowed then it won't be added.
     * @public
     * @param {!ReadonlySet<string>} attributeSet
     * @return {!HtmlSanitizerBuilder}
     */
    onlyAllowAttributes(attributeSet) {
        /** @type {!Set<string>} */
        const allowedGlobalAttributes = new Set();
        /** @type {!Map<string, !tsickle_sanitizer_table_4.AttributePolicy>} */
        const globalAttributePolicies = new Map();
        /** @type {!Map<string, !ReadonlyMap<string, !tsickle_sanitizer_table_4.AttributePolicy>>} */
        const elementPolicies = new Map();
        for (const attribute of attributeSet) {
            if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {
                allowedGlobalAttributes.add(attribute);
            }
            if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {
                globalAttributePolicies.set(attribute, (/** @type {!tsickle_sanitizer_table_4.AttributePolicy} */ (this.sanitizerTable.globalAttributePolicies.get(attribute))));
            }
        }
        for (const [elementName__tsickle_destructured_1, originalElementPolicy__tsickle_destructured_2] of this.sanitizerTable
            .elementPolicies.entries()) {
            const elementName = /** @type {string} */ (elementName__tsickle_destructured_1);
            const originalElementPolicy = /** @type {!ReadonlyMap<string, !tsickle_sanitizer_table_4.AttributePolicy>} */ (originalElementPolicy__tsickle_destructured_2);
            /** @type {!Map<string, !tsickle_sanitizer_table_4.AttributePolicy>} */
            const newElementPolicy = new Map();
            for (const [attribute__tsickle_destructured_3, attributePolicy__tsickle_destructured_4] of originalElementPolicy
                .entries()) {
                const attribute = /** @type {string} */ (attribute__tsickle_destructured_3);
                const attributePolicy = /** @type {!tsickle_sanitizer_table_4.AttributePolicy} */ (attributePolicy__tsickle_destructured_4);
                if (attributeSet.has(attribute)) {
                    newElementPolicy.set(attribute, attributePolicy);
                }
            }
            elementPolicies.set(elementName, newElementPolicy);
        }
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);
        return this;
    }
    /**
     * Allows the set of data attributes passed.
     *
     * These values must be prefixed with "data-"
     *
     * If called with onlyAllowElements or onlyAllowAttributes, those methods must
     * be called first.
     * @public
     * @param {!Array<string>} attributes
     * @return {!HtmlSanitizerBuilder}
     */
    allowDataAttributes(attributes) {
        /** @type {!Set<string>} */
        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);
        for (const attribute of attributes) {
            if (attribute.indexOf('data-') !== 0) {
                throw new Error(`data attribute: ${attribute} does not begin with the prefix "data-"`);
            }
            allowedGlobalAttributes.add(attribute);
        }
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);
        return this;
    }
    /**
     * Preserves style attributes. Note that the sanitizer won't parse and
     * sanitize the values but keep them as they are. In particular this means
     * that the code will be able to call functions that could do undesirable
     * things (e.g. `url` to trigger a network request), as well as any custom
     * properties or functions defined by the application.
     * @public
     * @return {!HtmlSanitizerBuilder}
     */
    allowStyleAttributes() {
        /** @type {!Map<string, !tsickle_sanitizer_table_4.AttributePolicy>} */
        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);
        globalAttributePolicies.set('style', {
            policyAction: sanitizer_table_1.AttributePolicyAction.KEEP_AND_SANITIZE_STYLE,
        });
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);
        return this;
    }
    /**
     * Preserves the class attribute on all elements. This means contents can
     * adopt CSS styles from other page elements and possibly mask themselves as
     * legitimate UI elements, which can lead to phishing.
     * @public
     * @return {!HtmlSanitizerBuilder}
     */
    allowClassAttributes() {
        /** @type {!Set<string>} */
        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);
        allowedGlobalAttributes.add('class');
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);
        return this;
    }
    /**
     * Preserves id attributes. This carries moderate risk as it allows an
     * element to override other elements with the same ID.
     * @public
     * @return {!HtmlSanitizerBuilder}
     */
    allowIdAttributes() {
        /** @type {!Set<string>} */
        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);
        allowedGlobalAttributes.add('id');
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);
        return this;
    }
    /**
     * Preserves (some) attributes that reference existing ids. This carries a
     * moderate security risk, because sanitized content can create semantic
     * associations with existing elements in the page, regardless of the layout.
     * This could be used to override the label associated with a form input by a
     * screen reader, and facilitate phishing.
     * @public
     * @return {!HtmlSanitizerBuilder}
     */
    allowIdReferenceAttributes() {
        /** @type {!Set<string>} */
        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);
        // TODO(b/190693339): Generate this subtable from the contract.
        allowedGlobalAttributes.add('aria-activedescendant')
            .add('aria-controls')
            .add('aria-labelledby')
            .add('aria-owns')
            .add('for')
            .add('list');
        this.sanitizerTable = new sanitizer_table_1.SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);
        return this;
    }
    /**
     * @public
     * @return {!tsickle_html_sanitizer_2.HtmlSanitizer}
     */
    build() {
        if (this.calledBuild) {
            throw new Error('this sanitizer has already called build');
        }
        this.calledBuild = true;
        return new html_sanitizer_1.HtmlSanitizerImpl(this.sanitizerTable, secrets_1.secretToken);
    }
}
exports.HtmlSanitizerBuilder = HtmlSanitizerBuilder;
/* istanbul ignore if */
if (false) {
    /**
     * @type {!tsickle_sanitizer_table_4.SanitizerTable}
     * @private
     */
    HtmlSanitizerBuilder.prototype.sanitizerTable;
    /**
     * @type {boolean}
     * @private
     */
    HtmlSanitizerBuilder.prototype.calledBuild;
}
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/builders/resource_url_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/resource_url_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.resource_url_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/resource_url_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_resource_url_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_script_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_string_literal_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
/**
 * Type that we know how to interpolate
 * @typedef {(string|number|boolean)}
 */
var Primitive;
/**
 * Check whether the base url contains a valid origin,
 *
 * A string for an origin must contain only alphanumeric or any of the
 * following: `-.:`, and must not be an IP address. Remember that, as per the
 * documentation for TrustedResourceUrl, the origin must be trustworthy.
 *
 * @param {string} base The base url that contains an origin.
 * @return {boolean}
 */
function hasValidOrigin(base) {
    if (!(/^https:\/\//.test(base) || /^\/\//.test(base))) {
        return false;
    }
    /** @type {number} */
    const originStart = base.indexOf('//') + 2;
    /** @type {number} */
    const originEnd = base.indexOf('/', originStart);
    // If the base url only contains the prefix (e.g. //), or the slash
    // for the origin is right after the prefix (e.g. ///), the origin is
    // missing.
    if (originEnd <= originStart) {
        throw new Error(`Can't interpolate data in a url's origin, ` +
            `Please make sure to fully specify the origin, terminated with '/'.`);
    }
    /** @type {string} */
    const origin = base.substring(originStart, originEnd);
    if (!/^[0-9a-z.:-]+$/i.test(origin)) {
        throw new Error('The origin contains unsupported characters.');
    }
    if (!/^[^:]*(:[0-9]+)?$/i.test(origin)) {
        throw new Error('Invalid port number.');
    }
    if (!/(^|\.)[a-z][^.]*$/i.test(origin)) {
        throw new Error('The top-level domain must start with a letter.');
    }
    return true;
}
/**
 * Check whether the base url contains a valid about url at its beginning.
 *
 * An about url is either exactly 'about:blank' or 'about:blank#<str>' where
 * <str> can be an arbitrary string.
 *
 * @param {string} base The base url.
 * @return {boolean}
 */
function isValidAboutUrl(base) {
    if (!/^about:blank/.test(base)) {
        return false;
    }
    if (base !== 'about:blank' && !/^about:blank#/.test(base)) {
        throw new Error('The about url is invalid.');
    }
    return true;
}
/**
 * Check whether the base url contains a valid path start at its beginning.
 *
 * A valid path start is either a '/' or a '/' followed by at least one
 * character that is not '/' or '\'.
 *
 * @param {string} base The base url.
 * @return {boolean}
 */
function isValidPathStart(base) {
    if (!/^\//.test(base)) {
        return false;
    }
    if ((base === '/') ||
        (base.length > 1 && base[1] !== '/' && base[1] !== '\\')) {
        return true;
    }
    throw new Error('The path start in the url is invalid.');
}
/**
 * Builds TrustedResourceUrl from a template literal.
 *
 * This factory is a template literal tag function. It should be called with
 * a template literal, with or without embedded expressions. For example,
 *               trustedResourceUrl`//example.com/${bar}`;
 * or
 *               trustedResourceUrl`//example.com`;
 *
 * When this function is called with a template literal without any embedded
 * expressions, the template string may contain anything as the whole URL is
 * a compile-time string constant.
 *
 * When this function is called with a template literal that contains embedded
 * expressions, the template must start with one of the following:
 * - `https://<origin>/`
 * - `//<origin>/`
 * - `/<pathStart>`
 * - `about:blank`
 * - `data:`
 *
 * `<origin>` must contain only alphanumeric or any of the following: `-.:`.
 * Remember that, as per the documentation for TrustedResourceUrl, the origin
 * must be trustworthy. An origin of "example.com" could be set with this
 * method, but would tie the security of your site to the security of
 * example.com. Similarly, formats that potentially cover redirects hosted
 * on a trusted origin are problematic, since that could lead to untrusted
 * origins.
 *
 * `<pathStart>` is either an empty string, or a non empty string that does not
 * start with '/' or '\'.
 * In other words, `/<pathStart>` is either a '/' or a
 * '/' followed by at least one character that is not '/' or '\'.
 *
 * `data:` (data URL) does not allow embedded expressions in the template
 * literal input.
 *
 * All embedded expressions are URL encoded when they are interpolated. Do not
 * embed expressions that are already URL encoded as they will be double encoded
 * by the builder.
 *
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @param {...(string|number|boolean)} rest This represents the template's embedded expressions.
 * @return {!tsickle_resource_url_impl_2.TrustedResourceUrl}
 */
function trustedResourceUrl(templateObj, ...rest) {
    // Check if templateObj is actually from a template literal.
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templateObj, rest.length);
    }
    if (rest.length === 0) {
        return (0, resource_url_impl_1.createResourceUrlInternal)(templateObj[0]);
    }
    /** @type {string} */
    const base = templateObj[0].toLowerCase();
    if (dev_1.DEV_MODE) {
        if (/^data:/.test(base)) {
            throw new Error('Data URLs cannot have expressions in the template literal input.');
        }
        if (!hasValidOrigin(base) && !isValidPathStart(base) &&
            !isValidAboutUrl(base)) {
            throw new Error('Trying to interpolate expressions in an unsupported url format.');
        }
    }
    /** @type {string} */
    let url = templateObj[0];
    for (let i = 0; i < rest.length; i++) {
        url += encodeURIComponent(rest[i]) + templateObj[i + 1];
    }
    return (0, resource_url_impl_1.createResourceUrlInternal)(url);
}
exports.trustedResourceUrl = trustedResourceUrl;
/**
 * Creates a new TrustedResourceUrl with params added to the URL's search
 * parameters.
 *
 * @param {!tsickle_resource_url_impl_2.TrustedResourceUrl} trustedUrl
 * @param {!Map<string, (null|string|number|boolean|!Array<(null|string|number|boolean)>)>} params What to add to the URL. Parameters with value `null` or
 * `undefined` are skipped. Both keys and values will be encoded. Do not pass
 * pre-encoded values as this will result them being double encoded. If the
 * value is an array then the same parameter is added for every element in the
 * array.
 * @return {!tsickle_resource_url_impl_2.TrustedResourceUrl}
 */
function appendParams(trustedUrl, params) {
    /** @type {string} */
    let url = (0, resource_url_impl_1.unwrapResourceUrl)(trustedUrl).toString();
    if (/#/.test(url)) {
        /** @type {string} */
        let message = '';
        if (dev_1.DEV_MODE) {
            message = `Found a hash in url (${url}), appending not supported`;
        }
        throw new Error(message);
    }
    /** @type {string} */
    let separator = /\?/.test(url) ? '&' : '?';
    // for-of has a big polyfill.
    // tslint:disable-next-line:ban-iterable-foreach
    params.forEach((/**
     * @param {(null|string|number|boolean|!Array<(null|string|number|boolean)>)} value
     * @param {string} key
     * @return {void}
     */
    (value, key) => {
        /** @type {!Array<(null|string|number|boolean)>} */
        const values = (value instanceof Array) ? value : [value];
        for (let i = 0; i < values.length; i++) {
            /** @type {(null|string|number|boolean)} */
            const v = values[i];
            if (v === null || v === undefined) {
                continue;
            }
            url += separator + encodeURIComponent(key) + '=' +
                encodeURIComponent(String(v));
            separator = '&';
        }
    }));
    return (0, resource_url_impl_1.createResourceUrlInternal)(url);
}
exports.appendParams = appendParams;
/** @type {!RegExp} */
const BEFORE_FRAGMENT_REGEXP = /[^#]*/;
/**
 * Creates a new TrustedResourceUrl based on an existing one but with the
 * addition of a fragment (the part after `#`). If the URL already has a
 * fragment, it is replaced with the new one.
 * @param {!tsickle_resource_url_impl_2.TrustedResourceUrl} trustedUrl
 * @param {string} fragment The fragment to add to the URL, verbatim, without the leading
 * `#`. No additional escaping is applied.
 * @return {!tsickle_resource_url_impl_2.TrustedResourceUrl}
 */
function replaceFragment(trustedUrl, fragment) {
    /** @type {string} */
    const urlString = (0, resource_url_impl_1.unwrapResourceUrl)(trustedUrl).toString();
    return (0, resource_url_impl_1.createResourceUrlInternal)((/** @type {!RegExpExecArray} */ (BEFORE_FRAGMENT_REGEXP.exec(urlString)))[0] + '#' + fragment);
}
exports.replaceFragment = replaceFragment;
/**
 * Creates a new TrustedResourceUrl based on an existing one with a single
 * subpath segment added to the end of the existing path and prior to any query
 * parameters and/or fragments that already exist in the URL.
 * @param {!tsickle_resource_url_impl_2.TrustedResourceUrl} trustedUrl
 * @param {string} pathSegment The singular sub path being added to the URL. Do not pass
 *     a pre-encoded value as this will result in it being double encoded.
 * @return {!tsickle_resource_url_impl_2.TrustedResourceUrl}
 */
function appendPathSegment(trustedUrl, pathSegment) {
    /** @type {string} */
    const originalUrl = (0, resource_url_impl_1.unwrapResourceUrl)(trustedUrl).toString();
    /** @type {!Array<string>} */
    const urlSegments = originalUrl.split(/\?|#/);
    /** @type {string} */
    const basePath = urlSegments[0];
    /** @type {(undefined|string)} */
    const paramVals = /\?/.test(originalUrl) ? urlSegments[1] : undefined;
    /** @type {(undefined|string)} */
    const fragVal = /#/.test(originalUrl) ?
        (paramVals ? urlSegments[2] : urlSegments[1]) :
        undefined;
    /** @type {string} */
    const pathSeparator = basePath.charAt(basePath.length - 1) === '/' ? '' : '/';
    /** @type {string} */
    let url = basePath + pathSeparator + encodeURIComponent(pathSegment);
    if (paramVals !== undefined) {
        url += '?' + paramVals;
    }
    if (fragVal !== undefined) {
        url += '#' + fragVal;
    }
    return (0, resource_url_impl_1.createResourceUrlInternal)(url);
}
exports.appendPathSegment = appendPathSegment;
/**
 * Creates a `TrustedResourceUrl` by generating a `Blob` from a
 * `SafeScript` and then calling `URL.createObjectURL` with that `Blob`.
 *
 * Caller must call `URL.revokeObjectUrl()` on the stringified url to
 * release the underlying `Blob`.
 * @param {!tsickle_script_impl_3.SafeScript} safeScript
 * @return {!tsickle_resource_url_impl_2.TrustedResourceUrl}
 */
function objectUrlFromScript(safeScript) {
    /** @type {string} */
    const scriptContent = (0, script_impl_1.unwrapScript)(safeScript).toString();
    /** @type {!Blob} */
    const blob = new Blob([scriptContent], { type: 'text/javascript' });
    return (0, resource_url_impl_1.createResourceUrlInternal)(URL.createObjectURL(blob));
}
exports.objectUrlFromScript = objectUrlFromScript;
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/builders/script_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/script_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.script_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/script_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_script_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_string_literal_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
/** @typedef {(null|string|number|boolean)} */
var Primitive;
/** @typedef {(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?|!Object<string,(null|string|number|boolean|?)>)>|!Object<string,(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?)>|?)>)} */
var Serializable;
/**
 * Creates a SafeScript object from a template literal (without any embedded
 * expressions).
 *
 * This function is a template literal tag function. It should be called with
 * a template literal that does not contain any expressions. For example,
 *                           safeScript`foo`;
 *
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @return {!tsickle_script_impl_2.SafeScript}
 */
function safeScript(templateObj) {
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templateObj, 0);
    }
    return (0, script_impl_1.createScriptInternal)(templateObj[0]);
}
exports.safeScript = safeScript;
/**
 * Creates a `SafeScript` value by concatenating multiple `SafeScript`s.
 * @param {!ReadonlyArray<!tsickle_script_impl_2.SafeScript>} scripts
 * @return {!tsickle_script_impl_2.SafeScript}
 */
function concatScripts(scripts) {
    return (0, script_impl_1.createScriptInternal)(scripts.map(script_impl_1.unwrapScript).join(''));
}
exports.concatScripts = concatScripts;
/**
 * Converts a serializable value into JSON that is safe to interpolate into a
 * script context. In particular it escapes < characters so that a value of
 * "</script>" doesn't break out of the context.
 * @param {(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?|!Object<string,(null|string|number|boolean|?)>)>|!Object<string,(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?)>|?)>)} value The value to serialize.
 * @return {!tsickle_script_impl_2.SafeScript}
 */
function valueAsScript(value) {
    return (0, script_impl_1.createScriptInternal)(JSON.stringify(value).replace(/</g, '\\u003C'));
}
exports.valueAsScript = valueAsScript;
/**
 * Creates a `SafeScript` object from a template literal (without any embedded
 * expressions) along with additional arguments that the script should have
 * access to. These arguments will be JSON-encoded and passed to the script as
 * a function call.
 * \@example
 * ```ts
 * safeScriptWithArgs`function (name, props) {
 *  console.log(name + ' is ' + props.age);
 * }`('Bob', { 'age': 42 })
 * ```
 * would return a `SafeScript` that represents the following code:
 * ```js
 * (function (name, props) {
 *  console.log(name + ' is ' + props.age);
 * })("Bob",{"age":42})
 * ```
 * \@note Be careful when passing objects as arguments, as unquoted property
 * names may be changed during compilation.
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @param {...string} emptyArgs Expressions that evaluate to the empty string to enable
 *     inline comments.
 * @return {function(...(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?|!Object<string,(null|string|number|boolean|?)>)>|!Object<string,(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?)>|?)>)): !tsickle_script_impl_2.SafeScript}
 */
function safeScriptWithArgs(templateObj, ...emptyArgs) {
    if (dev_1.DEV_MODE) {
        if (emptyArgs.some((/**
         * @param {string} a
         * @return {boolean}
         */
        a => a !== ''))) {
            throw new Error('safeScriptWithArgs only allows empty string expressions ' +
                'to enable inline comments.');
        }
        (0, string_literal_1.assertIsTemplateObject)(templateObj, emptyArgs.length);
    }
    return (/**
     * @param {...(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?|!Object<string,(null|string|number|boolean|?)>)>|!Object<string,(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?)>|?)>)} argValues
     * @return {!tsickle_script_impl_2.SafeScript}
     */
    (...argValues) => {
        /** @type {!Array<string>} */
        const values = argValues.map((/**
         * @param {(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?|!Object<string,(null|string|number|boolean|?)>)>|!Object<string,(null|string|number|boolean|!ReadonlyArray<(null|string|number|boolean|?)>|?)>)} v
         * @return {string}
         */
        (v) => valueAsScript(v).toString()));
        return (0, script_impl_1.createScriptInternal)(`(${templateObj.join('')})(${values.join(',')})`);
    });
}
exports.safeScriptWithArgs = safeScriptWithArgs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0X2J1aWxkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2J1aWxkZXJzL3NjcmlwdF9idWlsZGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esd0ZBQTRDO0FBQzVDLHNHQUF3RjtBQUN4Riw0R0FBbUU7O0FBRW5FLGNBQTRDOztBQUM1QyxpQkFDNkU7Ozs7Ozs7Ozs7OztBQVk3RSxTQUFnQixVQUFVLENBQUMsV0FBaUM7SUFDMUQsSUFBSSxjQUFRLEVBQUU7UUFDWixJQUFBLHVDQUFzQixFQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN4QztJQUNELE9BQU8sSUFBQSxrQ0FBb0IsRUFBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBTEQsZ0NBS0M7Ozs7OztBQUdELFNBQWdCLGFBQWEsQ0FBQyxPQUE4QjtJQUMxRCxPQUFPLElBQUEsa0NBQW9CLEVBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQztBQUZELHNDQUVDOzs7Ozs7OztBQVFELFNBQWdCLGFBQWEsQ0FBQyxLQUFtQjtJQUMvQyxPQUFPLElBQUEsa0NBQW9CLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDOUUsQ0FBQztBQUZELHNDQUVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJELFNBQWdCLGtCQUFrQixDQUM5QixXQUFpQyxFQUFFLEdBQUcsU0FBNEI7SUFFcEUsSUFBSSxjQUFRLEVBQUU7UUFDWixJQUFJLFNBQVMsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFDLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FDWCwwREFBMEQ7Z0JBQzFELDRCQUE0QixDQUFDLENBQUM7U0FDbkM7UUFDRCxJQUFBLHVDQUFzQixFQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkQ7SUFDRDs7OztJQUFPLENBQUMsR0FBRyxTQUF5QixFQUFFLEVBQUU7O2NBQ2hDLE1BQU0sR0FBRyxTQUFTLENBQUMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUM7UUFDaEUsT0FBTyxJQUFBLGtDQUFvQixFQUN2QixJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEQsQ0FBQyxFQUFDO0FBQ0osQ0FBQztBQWhCRCxnREFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7REVWX01PREV9IGZyb20gJy4uL2Vudmlyb25tZW50L2Rldic7XG5pbXBvcnQge2NyZWF0ZVNjcmlwdEludGVybmFsLCBTYWZlU2NyaXB0LCB1bndyYXBTY3JpcHR9IGZyb20gJy4uL2ludGVybmFscy9zY3JpcHRfaW1wbCc7XG5pbXBvcnQge2Fzc2VydElzVGVtcGxhdGVPYmplY3R9IGZyb20gJy4uL2ludGVybmFscy9zdHJpbmdfbGl0ZXJhbCc7XG5cbnR5cGUgUHJpbWl0aXZlID0gbnVtYmVyfHN0cmluZ3xib29sZWFufG51bGw7XG50eXBlIFNlcmlhbGl6YWJsZSA9XG4gICAgUHJpbWl0aXZlfHJlYWRvbmx5IFNlcmlhbGl6YWJsZVtdfHtyZWFkb25seSBba2V5OiBzdHJpbmddOiBTZXJpYWxpemFibGV9O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlU2NyaXB0IG9iamVjdCBmcm9tIGEgdGVtcGxhdGUgbGl0ZXJhbCAod2l0aG91dCBhbnkgZW1iZWRkZWRcbiAqIGV4cHJlc3Npb25zKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGEgdGVtcGxhdGUgbGl0ZXJhbCB0YWcgZnVuY3Rpb24uIEl0IHNob3VsZCBiZSBjYWxsZWQgd2l0aFxuICogYSB0ZW1wbGF0ZSBsaXRlcmFsIHRoYXQgZG9lcyBub3QgY29udGFpbiBhbnkgZXhwcmVzc2lvbnMuIEZvciBleGFtcGxlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlU2NyaXB0YGZvb2A7XG4gKlxuICogQHBhcmFtIHRlbXBsYXRlT2JqIFRoaXMgY29udGFpbnMgdGhlIGxpdGVyYWwgcGFydCBvZiB0aGUgdGVtcGxhdGUgbGl0ZXJhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVTY3JpcHQodGVtcGxhdGVPYmo6IFRlbXBsYXRlU3RyaW5nc0FycmF5KTogU2FmZVNjcmlwdCB7XG4gIGlmIChERVZfTU9ERSkge1xuICAgIGFzc2VydElzVGVtcGxhdGVPYmplY3QodGVtcGxhdGVPYmosIDApO1xuICB9XG4gIHJldHVybiBjcmVhdGVTY3JpcHRJbnRlcm5hbCh0ZW1wbGF0ZU9ialswXSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgYFNhZmVTY3JpcHRgIHZhbHVlIGJ5IGNvbmNhdGVuYXRpbmcgbXVsdGlwbGUgYFNhZmVTY3JpcHRgcy4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRTY3JpcHRzKHNjcmlwdHM6IHJlYWRvbmx5IFNhZmVTY3JpcHRbXSk6IFNhZmVTY3JpcHQge1xuICByZXR1cm4gY3JlYXRlU2NyaXB0SW50ZXJuYWwoc2NyaXB0cy5tYXAodW53cmFwU2NyaXB0KS5qb2luKCcnKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBzZXJpYWxpemFibGUgdmFsdWUgaW50byBKU09OIHRoYXQgaXMgc2FmZSB0byBpbnRlcnBvbGF0ZSBpbnRvIGFcbiAqIHNjcmlwdCBjb250ZXh0LiBJbiBwYXJ0aWN1bGFyIGl0IGVzY2FwZXMgPCBjaGFyYWN0ZXJzIHNvIHRoYXQgYSB2YWx1ZSBvZlxuICogXCI8L3NjcmlwdD5cIiBkb2Vzbid0IGJyZWFrIG91dCBvZiB0aGUgY29udGV4dC5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VyaWFsaXplLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVBc1NjcmlwdCh2YWx1ZTogU2VyaWFsaXphYmxlKTogU2FmZVNjcmlwdCB7XG4gIHJldHVybiBjcmVhdGVTY3JpcHRJbnRlcm5hbChKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvPC9nLCAnXFxcXHUwMDNDJykpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBgU2FmZVNjcmlwdGAgb2JqZWN0IGZyb20gYSB0ZW1wbGF0ZSBsaXRlcmFsICh3aXRob3V0IGFueSBlbWJlZGRlZFxuICogZXhwcmVzc2lvbnMpIGFsb25nIHdpdGggYWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCB0aGUgc2NyaXB0IHNob3VsZCBoYXZlXG4gKiBhY2Nlc3MgdG8uIFRoZXNlIGFyZ3VtZW50cyB3aWxsIGJlIEpTT04tZW5jb2RlZCBhbmQgcGFzc2VkIHRvIHRoZSBzY3JpcHQgYXNcbiAqIGEgZnVuY3Rpb24gY2FsbC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogc2FmZVNjcmlwdFdpdGhBcmdzYGZ1bmN0aW9uIChuYW1lLCBwcm9wcykge1xuICogIGNvbnNvbGUubG9nKG5hbWUgKyAnIGlzICcgKyBwcm9wcy5hZ2UpO1xuICogfWAoJ0JvYicsIHsgJ2FnZSc6IDQyIH0pXG4gKiBgYGBcbiAqIHdvdWxkIHJldHVybiBhIGBTYWZlU2NyaXB0YCB0aGF0IHJlcHJlc2VudHMgdGhlIGZvbGxvd2luZyBjb2RlOlxuICogYGBganNcbiAqIChmdW5jdGlvbiAobmFtZSwgcHJvcHMpIHtcbiAqICBjb25zb2xlLmxvZyhuYW1lICsgJyBpcyAnICsgcHJvcHMuYWdlKTtcbiAqIH0pKFwiQm9iXCIse1wiYWdlXCI6NDJ9KVxuICogYGBgXG4gKiBAbm90ZSBCZSBjYXJlZnVsIHdoZW4gcGFzc2luZyBvYmplY3RzIGFzIGFyZ3VtZW50cywgYXMgdW5xdW90ZWQgcHJvcGVydHlcbiAqIG5hbWVzIG1heSBiZSBjaGFuZ2VkIGR1cmluZyBjb21waWxhdGlvbi5cbiAqIEBwYXJhbSB0ZW1wbGF0ZU9iaiBUaGlzIGNvbnRhaW5zIHRoZSBsaXRlcmFsIHBhcnQgb2YgdGhlIHRlbXBsYXRlIGxpdGVyYWwuXG4gKiBAcGFyYW0gZW1wdHlBcmdzIEV4cHJlc3Npb25zIHRoYXQgZXZhbHVhdGUgdG8gdGhlIGVtcHR5IHN0cmluZyB0byBlbmFibGVcbiAqICAgICBpbmxpbmUgY29tbWVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlU2NyaXB0V2l0aEFyZ3MoXG4gICAgdGVtcGxhdGVPYmo6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi5lbXB0eUFyZ3M6IFJlYWRvbmx5QXJyYXk8Jyc+KTpcbiAgICAoLi4uYXJnVmFsdWVzOiBTZXJpYWxpemFibGVbXSkgPT4gU2FmZVNjcmlwdCB7XG4gIGlmIChERVZfTU9ERSkge1xuICAgIGlmIChlbXB0eUFyZ3Muc29tZShhID0+IGEgIT09ICcnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdzYWZlU2NyaXB0V2l0aEFyZ3Mgb25seSBhbGxvd3MgZW1wdHkgc3RyaW5nIGV4cHJlc3Npb25zICcgK1xuICAgICAgICAgICd0byBlbmFibGUgaW5saW5lIGNvbW1lbnRzLicpO1xuICAgIH1cbiAgICBhc3NlcnRJc1RlbXBsYXRlT2JqZWN0KHRlbXBsYXRlT2JqLCBlbXB0eUFyZ3MubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gKC4uLmFyZ1ZhbHVlczogU2VyaWFsaXphYmxlW10pID0+IHtcbiAgICBjb25zdCB2YWx1ZXMgPSBhcmdWYWx1ZXMubWFwKCh2KSA9PiB2YWx1ZUFzU2NyaXB0KHYpLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBjcmVhdGVTY3JpcHRJbnRlcm5hbChcbiAgICAgICAgYCgke3RlbXBsYXRlT2JqLmpvaW4oJycpfSkoJHt2YWx1ZXMuam9pbignLCcpfSlgKTtcbiAgfTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/builders/style_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/style_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.style_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/style_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_string_literal_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
const tsickle_style_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
const style_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_impl');
/**
 * Creates a SafeStyle object from a template literal (without any embedded
 * expressions).
 *
 * ` style` should be in the format
 * ` name: value; [name: value; ...]` and must not have any < or >
 * characters in it. This is so that SafeStyle's contract is preserved,
 * allowing the SafeStyle to correctly be interpreted as a sequence of CSS
 * declarations and without affecting the syntactic structure of any
 * surrounding CSS and HTML.
 *
 * This function is a template literal tag function. It should be called with
 * a template literal that does not contain any expressions. For example,
 *                          safeStyle`foo`;
 * This function first checks if it is called with a literal template, and
 * then performs basic sanity checks on the format of ` style`
 * but does not constrain the format of ` name} and {\@code value`, except
 * for disallowing tag characters.
 *
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @return {!tsickle_style_impl_3.SafeStyle}
 */
function safeStyle(templateObj) {
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templateObj, 0);
    }
    /** @type {string} */
    const style = templateObj[0];
    if (dev_1.DEV_MODE) {
        if (/[<>]/.test(style)) {
            throw new Error('Forbidden characters in style string: ' + style);
        }
        if (!/;$/.test(style)) {
            throw new Error('Style string does not end with ";": ' + style);
        }
        if (!/:/.test(style)) {
            throw new Error('Style string should contain one or more ":": ' + style);
        }
    }
    return (0, style_impl_1.createStyleInternal)(style);
}
exports.safeStyle = safeStyle;
/**
 * Creates a `SafeStyle` value by concatenating multiple `SafeStyle`s.
 * @param {!ReadonlyArray<!tsickle_style_impl_3.SafeStyle>} styles
 * @return {!tsickle_style_impl_3.SafeStyle}
 */
function concatStyles(styles) {
    return (0, style_impl_1.createStyleInternal)(styles.map(style_impl_1.unwrapStyle).join(''));
}
exports.concatStyles = concatStyles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVfYnVpbGRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvYnVpbGRlcnMvc3R5bGVfYnVpbGRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUE0QztBQUM1Qyw0R0FBbUU7QUFDbkUsb0dBQW9GOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCcEYsU0FBZ0IsU0FBUyxDQUFDLFdBQWlDO0lBQ3pELElBQUksY0FBUSxFQUFFO1FBQ1osSUFBQSx1Q0FBc0IsRUFBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDeEM7O1VBRUssS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFNUIsSUFBSSxjQUFRLEVBQUU7UUFDWixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsR0FBRyxLQUFLLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLEdBQUcsS0FBSyxDQUFDLENBQUM7U0FDakU7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQzFFO0tBQ0Y7SUFFRCxPQUFPLElBQUEsZ0NBQW1CLEVBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQztBQXRCRCw4QkFzQkM7Ozs7OztBQUdELFNBQWdCLFlBQVksQ0FBQyxNQUE0QjtJQUN2RCxPQUFPLElBQUEsZ0NBQW1CLEVBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx3QkFBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge0RFVl9NT0RFfSBmcm9tICcuLi9lbnZpcm9ubWVudC9kZXYnO1xuaW1wb3J0IHthc3NlcnRJc1RlbXBsYXRlT2JqZWN0fSBmcm9tICcuLi9pbnRlcm5hbHMvc3RyaW5nX2xpdGVyYWwnO1xuaW1wb3J0IHtjcmVhdGVTdHlsZUludGVybmFsLCBTYWZlU3R5bGUsIHVud3JhcFN0eWxlfSBmcm9tICcuLi9pbnRlcm5hbHMvc3R5bGVfaW1wbCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNhZmVTdHlsZSBvYmplY3QgZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWwgKHdpdGhvdXQgYW55IGVtYmVkZGVkXG4gKiBleHByZXNzaW9ucykuXG4gKlxuICogYCBzdHlsZWAgc2hvdWxkIGJlIGluIHRoZSBmb3JtYXRcbiAqIGAgbmFtZTogdmFsdWU7IFtuYW1lOiB2YWx1ZTsgLi4uXWAgYW5kIG11c3Qgbm90IGhhdmUgYW55IDwgb3IgPlxuICogY2hhcmFjdGVycyBpbiBpdC4gVGhpcyBpcyBzbyB0aGF0IFNhZmVTdHlsZSdzIGNvbnRyYWN0IGlzIHByZXNlcnZlZCxcbiAqIGFsbG93aW5nIHRoZSBTYWZlU3R5bGUgdG8gY29ycmVjdGx5IGJlIGludGVycHJldGVkIGFzIGEgc2VxdWVuY2Ugb2YgQ1NTXG4gKiBkZWNsYXJhdGlvbnMgYW5kIHdpdGhvdXQgYWZmZWN0aW5nIHRoZSBzeW50YWN0aWMgc3RydWN0dXJlIG9mIGFueVxuICogc3Vycm91bmRpbmcgQ1NTIGFuZCBIVE1MLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyBmdW5jdGlvbi4gSXQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoXG4gKiBhIHRlbXBsYXRlIGxpdGVyYWwgdGhhdCBkb2VzIG5vdCBjb250YWluIGFueSBleHByZXNzaW9ucy4gRm9yIGV4YW1wbGUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZVN0eWxlYGZvb2A7XG4gKiBUaGlzIGZ1bmN0aW9uIGZpcnN0IGNoZWNrcyBpZiBpdCBpcyBjYWxsZWQgd2l0aCBhIGxpdGVyYWwgdGVtcGxhdGUsIGFuZFxuICogdGhlbiBwZXJmb3JtcyBiYXNpYyBzYW5pdHkgY2hlY2tzIG9uIHRoZSBmb3JtYXQgb2YgYCBzdHlsZWBcbiAqIGJ1dCBkb2VzIG5vdCBjb25zdHJhaW4gdGhlIGZvcm1hdCBvZiBgIG5hbWV9IGFuZCB7QGNvZGUgdmFsdWVgLCBleGNlcHRcbiAqIGZvciBkaXNhbGxvd2luZyB0YWcgY2hhcmFjdGVycy5cbiAqXG4gKiBAcGFyYW0gdGVtcGxhdGVPYmogVGhpcyBjb250YWlucyB0aGUgbGl0ZXJhbCBwYXJ0IG9mIHRoZSB0ZW1wbGF0ZSBsaXRlcmFsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZVN0eWxlKHRlbXBsYXRlT2JqOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSk6IFNhZmVTdHlsZSB7XG4gIGlmIChERVZfTU9ERSkge1xuICAgIGFzc2VydElzVGVtcGxhdGVPYmplY3QodGVtcGxhdGVPYmosIDApO1xuICB9XG5cbiAgY29uc3Qgc3R5bGUgPSB0ZW1wbGF0ZU9ialswXTtcblxuICBpZiAoREVWX01PREUpIHtcbiAgICBpZiAoL1s8Pl0vLnRlc3Qoc3R5bGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvcmJpZGRlbiBjaGFyYWN0ZXJzIGluIHN0eWxlIHN0cmluZzogJyArIHN0eWxlKTtcbiAgICB9XG5cbiAgICBpZiAoIS87JC8udGVzdChzdHlsZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3R5bGUgc3RyaW5nIGRvZXMgbm90IGVuZCB3aXRoIFwiO1wiOiAnICsgc3R5bGUpO1xuICAgIH1cblxuICAgIGlmICghLzovLnRlc3Qoc3R5bGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0eWxlIHN0cmluZyBzaG91bGQgY29udGFpbiBvbmUgb3IgbW9yZSBcIjpcIjogJyArIHN0eWxlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlU3R5bGVJbnRlcm5hbChzdHlsZSk7XG59XG5cbi8qKiBDcmVhdGVzIGEgYFNhZmVTdHlsZWAgdmFsdWUgYnkgY29uY2F0ZW5hdGluZyBtdWx0aXBsZSBgU2FmZVN0eWxlYHMuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0U3R5bGVzKHN0eWxlczogcmVhZG9ubHkgU2FmZVN0eWxlW10pOiBTYWZlU3R5bGUge1xuICByZXR1cm4gY3JlYXRlU3R5bGVJbnRlcm5hbChzdHlsZXMubWFwKHVud3JhcFN0eWxlKS5qb2luKCcnKSk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/internals/style_sheet_impl.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/internals/style_sheet_impl.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.internals.style_sheet_impl');
var module = module || { id: 'third_party/javascript/safevalues/internals/style_sheet_impl.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_internals_1 = goog.requireType("goog.html.internals");
const tsickle_safestylesheet_2 = goog.requireType("goog.html.SafeStyleSheet");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const internals = goog.require('goog.html.internals');
const safestylesheet_1 = goog.require('goog.html.SafeStyleSheet');
const safestylesheet_2 = safestylesheet_1;
exports.SafeStyleSheet = safestylesheet_2;
/**
 * Builds a new `SafeStyleSheet` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 * @param {string} styleSheet
 * @return {!tsickle_safestylesheet_2}
 */
function createStyleSheetInternal(styleSheet) {
    return internals.createSafeStyleSheet(styleSheet);
}
exports.createStyleSheetInternal = createStyleSheetInternal;
/**
 * Checks if the given value is a `SafeStyleSheet` instance.
 * @param {*} value
 * @return {boolean}
 */
function isStyleSheet(value) {
    return value instanceof safestylesheet_1;
}
exports.isStyleSheet = isStyleSheet;
/**
 * Returns the string value of the passed `SafeStyleSheet` object while
 * ensuring it has the correct type.
 * @param {!tsickle_safestylesheet_2} value
 * @return {string}
 */
function unwrapStyleSheet(value) {
    return safestylesheet_1.unwrap(value);
}
exports.unwrapStyleSheet = unwrapStyleSheet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVfc2hlZXRfaW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9pbnRlcm5hbHMvc3R5bGVfc2hlZXRfaW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxzREFBbUY7QUFDbkYsa0VBQTBGO0FBRTFGLDBDQUEwRjtBQUFsRiwwQ0FBYzs7Ozs7Ozs7QUFRdEIsU0FBZ0Isd0JBQXdCLENBQUMsVUFBa0I7SUFDekQsT0FBTyxTQUFTLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUZELDREQUVDOzs7Ozs7QUFLRCxTQUFnQixZQUFZLENBQUMsS0FBYztJQUN6QyxPQUFPLEtBQUssNEJBQTBCLENBQUM7QUFDekMsQ0FBQztBQUZELG9DQUVDOzs7Ozs7O0FBTUQsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBcUI7SUFDcEQsT0FBTyxpQkFBZSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUZELDRDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgKiBhcyBpbnRlcm5hbHMgZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9pbnRlcm5hbHMnO1xuaW1wb3J0IHtTYWZlU3R5bGVTaGVldH0gZnJvbSAnZ29vZ2xlMy90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L2Nsb3N1cmUvaHRtbC9zYWZlc3R5bGVzaGVldCc7XG5cbmV4cG9ydCB7U2FmZVN0eWxlU2hlZXR9IGZyb20gJ2dvb2dsZTMvdGhpcmRfcGFydHkvamF2YXNjcmlwdC9jbG9zdXJlL2h0bWwvc2FmZXN0eWxlc2hlZXQnO1xuXG5cbi8qKlxuICogQnVpbGRzIGEgbmV3IGBTYWZlU3R5bGVTaGVldGAgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nLCB3aXRob3V0IGVuZm9yY2luZ1xuICogc2FmZXR5IGd1YXJhbnRlZXMuIFRoaXMgc2hvdWxkbid0IGJlIGV4cG9zZWQgdG8gYXBwbGljYXRpb24gZGV2ZWxvcGVycywgYW5kXG4gKiBtdXN0IG9ubHkgYmUgdXNlZCBhcyBhIHN0ZXAgdG93YXJkcyBzYWZlIGJ1aWxkZXJzIG9yIHNhZmUgY29uc3RhbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldEludGVybmFsKHN0eWxlU2hlZXQ6IHN0cmluZyk6IFNhZmVTdHlsZVNoZWV0IHtcbiAgcmV0dXJuIGludGVybmFscy5jcmVhdGVTYWZlU3R5bGVTaGVldChzdHlsZVNoZWV0KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgYFNhZmVTdHlsZVNoZWV0YCBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3R5bGVTaGVldCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFNhZmVTdHlsZVNoZWV0IHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgU2FmZVN0eWxlU2hlZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHZhbHVlIG9mIHRoZSBwYXNzZWQgYFNhZmVTdHlsZVNoZWV0YCBvYmplY3Qgd2hpbGVcbiAqIGVuc3VyaW5nIGl0IGhhcyB0aGUgY29ycmVjdCB0eXBlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwU3R5bGVTaGVldCh2YWx1ZTogU2FmZVN0eWxlU2hlZXQpOiBzdHJpbmcge1xuICByZXR1cm4gU2FmZVN0eWxlU2hlZXQudW53cmFwKHZhbHVlKTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/builders/style_sheet_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/style_sheet_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.style_sheet_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/style_sheet_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_string_literal_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
const tsickle_style_sheet_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_sheet_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
const style_sheet_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_sheet_impl');
/**
 * Creates a SafeStyleSheet object from a template literal (without any
 * embedded expressions).
 *
 * This function is a template literal tag function. It should be called with
 * a template literal that does not contain any expressions. For example,
 *                         safeStyleSheet`foo`;
 * The argument must not have any < or > characters in it. This is so that
 * SafeStyleSheet's contract is preserved, allowing the SafeStyleSheet to
 * correctly be interpreted as a sequence of CSS declarations and without
 * affecting the syntactic structure of any surrounding CSS and HTML.
 *
 * @param {!TemplateStringsArray} templateObj This contains the literal part of the template literal.
 * @return {!tsickle_style_sheet_impl_3.SafeStyleSheet}
 */
function safeStyleSheet(templateObj) {
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templateObj, 0);
    }
    /** @type {string} */
    const styleSheet = templateObj[0];
    if (dev_1.DEV_MODE) {
        if (/[<>]/.test(styleSheet)) {
            throw new Error('Forbidden characters in styleSheet string: ' + styleSheet);
        }
    }
    return (0, style_sheet_impl_1.createStyleSheetInternal)(styleSheet);
}
exports.safeStyleSheet = safeStyleSheet;
/**
 * Creates a `SafeStyleSheet` value by concatenating multiple `SafeStyleSheet`s.
 * @param {!ReadonlyArray<!tsickle_style_sheet_impl_3.SafeStyleSheet>} sheets
 * @return {!tsickle_style_sheet_impl_3.SafeStyleSheet}
 */
function concatStyleSheets(sheets) {
    return (0, style_sheet_impl_1.createStyleSheetInternal)(sheets.map(style_sheet_impl_1.unwrapStyleSheet).join(''));
}
exports.concatStyleSheets = concatStyleSheets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVfc2hlZXRfYnVpbGRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvYnVpbGRlcnMvc3R5bGVfc2hlZXRfYnVpbGRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUE0QztBQUM1Qyw0R0FBbUU7QUFDbkUsZ0hBQXlHOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0J6RyxTQUFnQixjQUFjLENBQUMsV0FBaUM7SUFFOUQsSUFBSSxjQUFRLEVBQUU7UUFDWixJQUFBLHVDQUFzQixFQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN4Qzs7VUFFSyxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNqQyxJQUFJLGNBQVEsRUFBRTtRQUNaLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUNYLDZDQUE2QyxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ2pFO0tBQ0Y7SUFFRCxPQUFPLElBQUEsMkNBQXdCLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQWZELHdDQWVDOzs7Ozs7QUFLRCxTQUFnQixpQkFBaUIsQ0FBQyxNQUFpQztJQUVqRSxPQUFPLElBQUEsMkNBQXdCLEVBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQ0FBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFIRCw4Q0FHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtERVZfTU9ERX0gZnJvbSAnLi4vZW52aXJvbm1lbnQvZGV2JztcbmltcG9ydCB7YXNzZXJ0SXNUZW1wbGF0ZU9iamVjdH0gZnJvbSAnLi4vaW50ZXJuYWxzL3N0cmluZ19saXRlcmFsJztcbmltcG9ydCB7Y3JlYXRlU3R5bGVTaGVldEludGVybmFsLCBTYWZlU3R5bGVTaGVldCwgdW53cmFwU3R5bGVTaGVldH0gZnJvbSAnLi4vaW50ZXJuYWxzL3N0eWxlX3NoZWV0X2ltcGwnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBTYWZlU3R5bGVTaGVldCBvYmplY3QgZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWwgKHdpdGhvdXQgYW55XG4gKiBlbWJlZGRlZCBleHByZXNzaW9ucykuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIHRlbXBsYXRlIGxpdGVyYWwgdGFnIGZ1bmN0aW9uLiBJdCBzaG91bGQgYmUgY2FsbGVkIHdpdGhcbiAqIGEgdGVtcGxhdGUgbGl0ZXJhbCB0aGF0IGRvZXMgbm90IGNvbnRhaW4gYW55IGV4cHJlc3Npb25zLiBGb3IgZXhhbXBsZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVTdHlsZVNoZWV0YGZvb2A7XG4gKiBUaGUgYXJndW1lbnQgbXVzdCBub3QgaGF2ZSBhbnkgPCBvciA+IGNoYXJhY3RlcnMgaW4gaXQuIFRoaXMgaXMgc28gdGhhdFxuICogU2FmZVN0eWxlU2hlZXQncyBjb250cmFjdCBpcyBwcmVzZXJ2ZWQsIGFsbG93aW5nIHRoZSBTYWZlU3R5bGVTaGVldCB0b1xuICogY29ycmVjdGx5IGJlIGludGVycHJldGVkIGFzIGEgc2VxdWVuY2Ugb2YgQ1NTIGRlY2xhcmF0aW9ucyBhbmQgd2l0aG91dFxuICogYWZmZWN0aW5nIHRoZSBzeW50YWN0aWMgc3RydWN0dXJlIG9mIGFueSBzdXJyb3VuZGluZyBDU1MgYW5kIEhUTUwuXG4gKlxuICogQHBhcmFtIHRlbXBsYXRlT2JqIFRoaXMgY29udGFpbnMgdGhlIGxpdGVyYWwgcGFydCBvZiB0aGUgdGVtcGxhdGUgbGl0ZXJhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVTdHlsZVNoZWV0KHRlbXBsYXRlT2JqOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSk6XG4gICAgU2FmZVN0eWxlU2hlZXQge1xuICBpZiAoREVWX01PREUpIHtcbiAgICBhc3NlcnRJc1RlbXBsYXRlT2JqZWN0KHRlbXBsYXRlT2JqLCAwKTtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlU2hlZXQgPSB0ZW1wbGF0ZU9ialswXTtcbiAgaWYgKERFVl9NT0RFKSB7XG4gICAgaWYgKC9bPD5dLy50ZXN0KHN0eWxlU2hlZXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ZvcmJpZGRlbiBjaGFyYWN0ZXJzIGluIHN0eWxlU2hlZXQgc3RyaW5nOiAnICsgc3R5bGVTaGVldCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVN0eWxlU2hlZXRJbnRlcm5hbChzdHlsZVNoZWV0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYFNhZmVTdHlsZVNoZWV0YCB2YWx1ZSBieSBjb25jYXRlbmF0aW5nIG11bHRpcGxlIGBTYWZlU3R5bGVTaGVldGBzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0U3R5bGVTaGVldHMoc2hlZXRzOiByZWFkb25seSBTYWZlU3R5bGVTaGVldFtdKTpcbiAgICBTYWZlU3R5bGVTaGVldCB7XG4gIHJldHVybiBjcmVhdGVTdHlsZVNoZWV0SW50ZXJuYWwoc2hlZXRzLm1hcCh1bndyYXBTdHlsZVNoZWV0KS5qb2luKCcnKSk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/builders/url_builders.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/builders/url_builders.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.builders.url_builders');
var module = module || { id: 'third_party/javascript/safevalues/builders/url_builders.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_resource_url_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_string_literal_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.string_literal");
const tsickle_url_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const string_literal_1 = goog.require('google3.third_party.javascript.safevalues.internals.string_literal');
const url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.url_impl');
/**
 * A pattern that matches safe MIME types. Only matches image, video and audio
 * types, with some parameter support (most notably, we haven't implemented the
 * more complex parts like %-encoded characters or non-alphanumerical ones for
 * simplicity's sake). Also, the specs are fairly complex, and they don't
 * necessarily agree with Chrome on some aspects, and so we settled on a subset
 * where the behavior makes sense to all parties involved.
 *
 * The spec is available at https://mimesniff.spec.whatwg.org/ (and see
 * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of
 * it).
 * @param {string} mimeType
 * @return {boolean}
 */
function isSafeMimeType(mimeType) {
    /** @type {(null|!RegExpMatchArray)} */
    const match = mimeType.match(/^([^;]+)(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i);
    return match?.length === 2 &&
        (isSafeImageMimeType(match[1]) || isSafeVideoMimeType(match[1]) ||
            isSafeAudioMimeType(match[1]));
}
/**
 * @param {string} mimeType
 * @return {boolean}
 */
function isSafeImageMimeType(mimeType) {
    return /^image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif|avif)$/i
        .test(mimeType);
}
/**
 * @param {string} mimeType
 * @return {boolean}
 */
function isSafeVideoMimeType(mimeType) {
    return /^video\/(?:mpeg|mp4|ogg|webm|x-matroska|quicktime|x-ms-wmv)$/i.test(mimeType);
}
/**
 * @param {string} mimeType
 * @return {boolean}
 */
function isSafeAudioMimeType(mimeType) {
    return /^audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)$/i
        .test(mimeType);
}
/**
 * Interface representing a scheme that sanitizeUrl can optionally accommodate.
 * Even though this interface could be implemented by user code, the code will
 * ignore any implementation that doesn't come from this file.
 * @record
 */
function Scheme() { }
exports.Scheme = Scheme;
/* istanbul ignore if */
if (false) {
    /**
     * @public
     * @param {string} url
     * @return {boolean}
     */
    Scheme.prototype.isValid = function (url) { };
}
/**
 * @implements {Scheme}
 */
class SchemeImpl {
    /**
     * @public
     * @param {function(string): boolean} isValid
     */
    constructor(isValid) {
        this.isValid = isValid;
    }
}
/* istanbul ignore if */
if (false) {
    /**
     * @const {function(string): boolean}
     * @public
     */
    SchemeImpl.prototype.isValid;
}
/**
 * @param {!Scheme} scheme
 * @return {boolean}
 */
function isValidScheme(scheme) {
    return scheme instanceof SchemeImpl;
}
/**
 * @param {string} scheme
 * @return {!Scheme}
 */
function simpleScheme(scheme) {
    return new SchemeImpl((/**
     * @param {string} url
     * @return {boolean}
     */
    (url) => {
        return url.substr(0, scheme.length + 1).toLowerCase() === (scheme + ':');
    }));
}
/** @type {!Scheme} */
const RELATIVE_SCHEME = new SchemeImpl((/**
 * @param {string} url
 * @return {boolean}
 */
(url) => /^[^:]*([/?#]|$)/.test(url)));
/** @type {!Scheme} */
const CALLTO_SCHEME = new SchemeImpl((/**
 * @param {string} url
 * @return {boolean}
 */
(url) => /^callto:\+?\d*$/i.test(url)));
/** @type {!Scheme} */
const SSH_SCHEME = new SchemeImpl((/**
 * @param {string} url
 * @return {boolean}
 */
(url) => (url.indexOf('ssh://') === 0)));
/** @type {!Scheme} */
const EXTENSION_SCHEME = new SchemeImpl((/**
 * @param {string} url
 * @return {boolean}
 */
(url) => {
    return url.indexOf('chrome-extension://') === 0 ||
        url.indexOf('moz-extension://') === 0 ||
        url.indexOf('ms-browser-extension://') === 0;
}));
/** @type {!Scheme} */
const SIP_SCHEME = new SchemeImpl((/**
 * @param {string} url
 * @return {boolean}
 */
(url) => {
    return url.indexOf('sip://') === 0 || url.indexOf('sips://') === 0;
}));
// This used to be an enum, we preserved the name avoid changing the API.
// tslint:disable:enforce-name-casing
/**
 * The list of schemes sanitizeUrl can optionally accommodate.
 * @type {{TEL: !Scheme, CALLTO: !Scheme, SSH: !Scheme, RTSP: !Scheme, DATA: !Scheme, HTTP: !Scheme, HTTPS: !Scheme, EXTENSION: !Scheme, FTP: !Scheme, RELATIVE: !Scheme, MAILTO: !Scheme, INTENT: !Scheme, MARKET: !Scheme, ITMS: !Scheme, ITMS_APPSS: !Scheme, ITMS_SERVICES: !Scheme, FACEBOOK_MESSENGER: !Scheme, WHATSAPP: !Scheme, SIP: !Scheme, SMS: !Scheme}}
 */
exports.SanitizableUrlScheme = {
    TEL: simpleScheme('tel'),
    CALLTO: CALLTO_SCHEME,
    SSH: SSH_SCHEME,
    RTSP: simpleScheme('rtsp'),
    DATA: simpleScheme('data'),
    HTTP: simpleScheme('http'),
    HTTPS: simpleScheme('https'),
    EXTENSION: EXTENSION_SCHEME,
    FTP: simpleScheme('ftp'),
    RELATIVE: RELATIVE_SCHEME,
    MAILTO: simpleScheme('mailto'),
    INTENT: simpleScheme('intent'),
    MARKET: simpleScheme('market'),
    ITMS: simpleScheme('itms'),
    ITMS_APPSS: simpleScheme('itms-appss'),
    ITMS_SERVICES: simpleScheme('itms-services'),
    FACEBOOK_MESSENGER: simpleScheme('fb-messenger'),
    WHATSAPP: simpleScheme('whatsapp'),
    SIP: SIP_SCHEME,
    SMS: simpleScheme('sms'),
};
// tslint:enable:enforce-name-casing
/**
 * List of schemes used by default.
 * @type {!Array<!Scheme>}
 */
const DEFAULT_SCHEMES = [
    exports.SanitizableUrlScheme.DATA,
    exports.SanitizableUrlScheme.HTTP,
    exports.SanitizableUrlScheme.HTTPS,
    exports.SanitizableUrlScheme.MAILTO,
    exports.SanitizableUrlScheme.FTP,
    exports.SanitizableUrlScheme.RELATIVE,
];
/**
 * Creates a SafeUrl object from a string `url` by sanitizing it.
 *
 * Note: If your url is partially known statically, you should prefer using the
 * `safeUrl` function directly.
 *
 * The input string is validated against the set of `allowedSchemes`, which
 * defaults to a set of commonly used safe URL schemes. If validation fails,
 * `undefined` is returned.
 *
 * If no `allowedSchemes` are passed, the `url` may use the http, https, mailto,
 * ftp or data schemes, or a relative URL (i.e., a URL without a scheme;
 * specifically, a scheme-relative, absolute-path-relative, or path-relative
 * URL).
 *
 * Other supported schemes don't have direct security issues (i.e. no JS
 * execution), but their inherent capabilities are not touched: for instance, if
 * you allow TEL only, you won't get javascript execution, but the resulting
 * link could still potentially be used to call toll numbers.
 * @param {string} url
 * @param {!ReadonlyArray<!Scheme>=} allowedSchemes
 * @return {(undefined|!tsickle_url_impl_4.SafeUrl)}
 */
function trySanitizeUrl(url, allowedSchemes = DEFAULT_SCHEMES) {
    // Using simple iteration because the compiler doesn't optimize this well for
    // es5.
    for (let i = 0; i < allowedSchemes.length; ++i) {
        /** @type {!Scheme} */
        const scheme = allowedSchemes[i];
        if (isValidScheme(scheme) && scheme.isValid(url)) {
            return (0, url_impl_1.createUrlInternal)(url);
        }
    }
    return undefined;
}
exports.trySanitizeUrl = trySanitizeUrl;
/**
 * Creates a SafeUrl object from a string `url` by sanitizing it.
 *
 * Works the same way as `trySanitizeUrl`, but returns an innocuous url instead
 * of `undefined`.
 * @param {string} url
 * @param {!ReadonlyArray<!Scheme>=} allowedSchemes
 * @return {!tsickle_url_impl_4.SafeUrl}
 */
function sanitizeUrl(url, allowedSchemes = DEFAULT_SCHEMES) {
    return trySanitizeUrl(url, allowedSchemes) || url_impl_1.INNOCUOUS_URL;
}
exports.sanitizeUrl = sanitizeUrl;
/**
 * Creates a SafeUrl object from a Blob or MediaSource. For blobs, the function
 * validates that the Blob's type is amongst the safe MIME types, and throws if
 * that's not the case.
 * @param {(!Blob|!MediaSource)} source
 * @return {!tsickle_url_impl_4.SafeUrl}
 */
function objectUrlFromSafeSource(source) {
    // MediaSource support in Safari is limited
    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource#browser_compatibility
    if (typeof MediaSource !== 'undefined' && source instanceof MediaSource) {
        return (0, url_impl_1.createUrlInternal)(URL.createObjectURL(source));
    }
    /** @type {!Blob} */
    const blob = (/** @type {!Blob} */ (source));
    if (!isSafeMimeType(blob.type)) {
        /** @type {string} */
        let message = '';
        if (dev_1.DEV_MODE) {
            message = `unsafe blob MIME type: ${blob.type}`;
        }
        throw new Error(message);
    }
    return (0, url_impl_1.createUrlInternal)(URL.createObjectURL(blob));
}
exports.objectUrlFromSafeSource = objectUrlFromSafeSource;
/**
 * Creates a SafeUrl object from a MediaSource.
 * @deprecated Use objectUrlFromSafeSource.
 * @param {!MediaSource} media
 * @return {!tsickle_url_impl_4.SafeUrl}
 */
function fromMediaSource(media) {
    // MediaSource support in Safari is limited
    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource#browser_compatibility
    if (typeof MediaSource !== 'undefined' && media instanceof MediaSource) {
        return (0, url_impl_1.createUrlInternal)(URL.createObjectURL(media));
    }
    /** @type {string} */
    let message = '';
    if (dev_1.DEV_MODE) {
        message =
            `fromMediaSource only accepts MediaSource instances, but was called with ${media}.`;
    }
    throw new Error(message);
}
exports.fromMediaSource = fromMediaSource;
/**
 * Builds SafeUrl object from a TrustedResourceUrl. This is safe because
 * TrustedResourceUrl is more tightly restricted than SafeUrl.
 * @deprecated Unwrap to string instead. SafeUrl sinks accept string values.
 * @param {!tsickle_resource_url_impl_2.TrustedResourceUrl} url
 * @return {!tsickle_url_impl_4.SafeUrl}
 */
function fromTrustedResourceUrl(url) {
    return (0, url_impl_1.createUrlInternal)((0, resource_url_impl_1.unwrapResourceUrl)(url).toString());
}
exports.fromTrustedResourceUrl = fromTrustedResourceUrl;
/**
 * Checks whether this url prefix contains:
 *  - a fully specified and valid scheme
 *  - a character forcing it to be a relative url
 *
 * Since this function is only called with compile-time constants, we don't need
 * to be as careful as in `sanitizeUrl` and we can just check that the scheme is
 * valid and non-'javascript:'. If we discover other dangerous schemes we want
 * to prevent, we can statically find all instances and refactor them. See
 * https://url.spec.whatwg.org/#url-scheme-string for scheme validation.
 * @param {string} prefix
 * @param {boolean} isWholeUrl
 * @return {boolean}
 */
function isSafeUrlPrefix(prefix, isWholeUrl) {
    /** @type {number} */
    const markerIdx = prefix.search(/[:/?#]/);
    if (markerIdx < 0) {
        // If we don't find a marker, but there is no interpolation, the url is
        // relative
        return isWholeUrl;
    }
    if (prefix.charAt(markerIdx) !== ':') {
        // Relative URL
        return true;
    }
    /** @type {string} */
    const scheme = prefix.substring(0, markerIdx).toLowerCase();
    return /^[a-z][a-z\d+.-]*$/.test(scheme) && scheme !== 'javascript';
}
/**
 * Builds a SafeUrl from a template literal.
 *
 * Use this function if your url has a static prefix containing the whole scheme
 * of the url.
 *
 * This factory is a template literal tag function. It should be called with
 * a template literal, with or without embedded expressions. For example,
 *               safeUrl`./somepath.html`;
 * or
 *               safeUrl`data:text/html;base64,${btoa('<div></div>')}`;
 *
 * To be successfully built, we must ensure that the scheme is correctly defined
 * and not dangerous. In practice this means the first chunk of the template
 * must satisfy one of the following conditions:
 * - Start with an explicit scheme that is valid and is not `javascript`
 *    (e.g. safeUrl`https:${...}`)
 * - Start with a prefix that ensures the url is relative
 *    (e.g. safeUrl`./${...}` or safeUrl`#${...}`)
 * Embedded expressions are interpolated as-is and no URL encoding is applied.
 * @param {!TemplateStringsArray} templateObj
 * @param {...*} rest
 * @return {!tsickle_url_impl_4.SafeUrl}
 */
function safeUrl(templateObj, ...rest) {
    if (dev_1.DEV_MODE) {
        (0, string_literal_1.assertIsTemplateObject)(templateObj, rest.length);
    }
    /** @type {string} */
    const prefix = templateObj[0];
    if (dev_1.DEV_MODE) {
        if (!isSafeUrlPrefix(prefix, rest.length === 0)) {
            throw new Error(`Trying to interpolate with unsupported prefix: ${prefix}`);
        }
    }
    /** @type {!Array<string>} */
    const urlParts = [prefix];
    for (let i = 0; i < rest.length; i++) {
        urlParts.push(String(rest[i]));
        urlParts.push(templateObj[i + 1]);
    }
    return (0, url_impl_1.createUrlInternal)(urlParts.join(''));
}
exports.safeUrl = safeUrl;
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/reporting/reporting.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/reporting/reporting.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.reporting.reporting');
var module = module || { id: 'third_party/javascript/safevalues/reporting/reporting.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_html_builders_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_builders");
const tsickle_html_sanitizer_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer");
const tsickle_dev_3 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const html_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_builders');
const html_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer');
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
/**
 * If {\@link legacyUnsafeHtml} is being used with a
 * `reportingId` to enable reporting, the percentage of sampled calls that
 * will be checked for active content. The key is the first character of the
 * `reportingId` and the float is the proportion of requests (in the range
 * 0.0-1.0).
 * @type {!Object<string,number>}
 */
const REPORTING_ID_PREFIX_TO_SAMPLING_RATE = {
    '0': 1.0,
    '1': 1.0,
};
/**
 * If {\@link legacyUnsafeHtml} is being used with a
 * `reportingId` to enable reporting, the percentage of sampled calls that
 * will trigger a heartbeat report to notify us that the function is being
 * called. The key is the first character of the `reportingId` and the float
 * is the proportion of requests (in the range 0.0-1.0).
 *
 * Note: This means that effectively samplingRate*heartbeatRate calls will send
 * a heartbeat.
 * @type {!Object<string,number>}
 */
const REPORTING_ID_PREFIX_TO_HEARTBEAT_RATE = {
    '0': 0.1,
    '1': 0.1,
};
/**
 * Options for configuring reporting used for {\@link legacyUnsafeHtml}.
 * @record
 */
function ReportingOptions() { }
exports.ReportingOptions = ReportingOptions;
/* istanbul ignore if */
if (false) {
    /**
     * A unique ID that identifies the callsite of a specific legacy conversion.
     * If this option is set, the legacy conversion becomes a report-only legacy
     * conversion that logs whether the callsite can be converted to a safer
     * alternative to the go/security-collector. See
     * go/report-only-safehtml-legacy-exemptions for more details on this design
     * and project.
     *
     * This is set via LSC and should not be manually changed.
     * @type {string}
     * @public
     */
    ReportingOptions.prototype.reportingId;
    /**
     * Override {\@link DEFAULT_SAMPLING_RATE} for this specific
     * legacy conversion. It is generally not necessary to use this override
     * unless this legacy conversion is triggering a massive number of reports and
     * it is necessary to decrease the sampling rate to decrease the number of
     * reports.
     * @type {(undefined|number)}
     * @public
     */
    ReportingOptions.prototype.samplingRate;
    /**
     * Override {\@link DEFAULT_HEARTBEAT_RATE} for this specific
     * legacy conversion. It is generally not necessary to use this override
     * unless this legacy conversion is triggering a massive number of reports and
     * it is necessary to decrease the sampling rate to decrease the number of
     * reports.
     * @type {(undefined|number)}
     * @public
     */
    ReportingOptions.prototype.heartbeatRate;
    /**
     * Override for how reports associated with this legacy conversion will be
     * sent to the go/security-collector. It is generally not necessary to use
     * this override unless a caller needs to change how reports are collected
     * (e.g. choosing to collect them via a service's own collection
     * infrastructure).
     * @type {(undefined|function(string, string): void)}
     * @public
     */
    ReportingOptions.prototype.sendReport;
}
/**
 * Passes through the given HTML string unchanged, but logs metadata about
 * whether various transformations would have changed the input to the security
 * collector.
 *
 * Note that this purposefully does not return a SafeHtml and is meant to be
 * used in scenarios where we do not want to introduce a legacy conversion.
 * @param {string} s
 * @param {(undefined|!ReportingOptions)=} options
 * @return {string}
 */
function reportOnlyHtmlPassthrough(s, options) {
    if (!options || !isCallSampled(options) || isReportingDisabled()) {
        return s;
    }
    if (isBrowserIncompatibleWithSanitizing()) {
        // Avoid sanitization for browsers that are incompatible with the sanitizer
        // so that this function never crashes.
        return s;
    }
    maybeSendHeartbeat(options);
    /** @type {boolean} */
    const changedBySanitizing = isChangedBySanitizing(s, options);
    if (!changedBySanitizing) {
        // Note: If something gets changed by the sanitizer, it will also
        // inevitably get changed by escaping as the sanitizer will always
        // preserve single text nodes.
        isChangedByEscaping(s, options);
    }
    return s;
}
exports.reportOnlyHtmlPassthrough = reportOnlyHtmlPassthrough;
/**
 * @return {boolean}
 */
function isBrowserIncompatibleWithSanitizing() {
    // Currently the only known incompatibility is cobalt which doesn't support
    // document.createDocumentFragment. See b/28115809. This method of detecting
    // if DocumentFragment is supported is based on
    // google3/chrome/dongle/web_framework/app_cobalt/polyfills/document_fragment.ts?rcl=482322361
    // TODO(b/255336776): Remove this once the sanitizer is able to run on Cobalt
    return !('DocumentFragment' in window);
}
/**
 * @param {!ReportingOptions} options
 * @return {boolean}
 */
function isCallSampled(options) {
    return Math.random() <
        (options.samplingRate ??
            REPORTING_ID_PREFIX_TO_SAMPLING_RATE[options.reportingId[0]] ?? 0.0);
}
/**
 * @return {boolean}
 */
function isReportingDisabled() {
    // Note that if it is undefined, then that means reporting should be enabled
    return window['SAFEVALUES_REPORTING'] === false;
}
/**
 * @param {!ReportingOptions} options
 * @return {void}
 */
function maybeSendHeartbeat(options) {
    if (Math.random() <
        (options.heartbeatRate ??
            REPORTING_ID_PREFIX_TO_HEARTBEAT_RATE[options.reportingId[0]] ?? 0.0)) {
        // Report a heartbeat signifying that the legacy conversion is being called
        reportLegacyConversion(options, ReportingType.HEARTBEAT);
    }
}
/**
 * @param {string} s
 * @param {!ReportingOptions} options
 * @return {boolean}
 */
function isChangedByEscaping(s, options) {
    if ((0, html_builders_1.htmlEscape)(s).toString() !== s) {
        // The legacy conversion is being used with something other than plain
        // text
        reportLegacyConversion(options, ReportingType.HTML_CHANGED_BY_ESCAPING);
        return true;
    }
    return false;
}
/**
 * @param {string} s
 * @param {!ReportingOptions} options
 * @return {boolean}
 */
function isChangedBySanitizing(s, options) {
    // First try checking if it is changed by the super lenient sanitizer. If it
    // is changed by the super lenient sanitizer, report that and return true.
    try {
        (0, html_sanitizer_1.superLenientlySanitizeHtmlAssertUnchanged)(s);
        // Continue
    }
    catch (e) {
        // A regex that matches corp domains to ensure that we only record
        // additional data if the request is in dev mode AND is an internal request
        // from a Googler. External facing domains should never be added to this
        // list.
        /** @type {!RegExp} */
        const corpRe = /([.]corp[.]google[.]com|[.]proxy[.]googleprod[.]com|[.]googlers[.]com)$/;
        if (dev_1.DEV_MODE && corpRe.test(window.location.hostname) &&
            e instanceof Error) {
            reportLegacyConversion(options, ReportingType.HTML_CHANGED_BY_SUPER_LENIENT_SANITIZING, (/** @type {!Error} */ (e)).message);
        }
        else {
            reportLegacyConversion(options, ReportingType.HTML_CHANGED_BY_SUPER_LENIENT_SANITIZING);
        }
        return true;
    }
    // If it isn't changed by the super lenient sanitizer, fall back to the
    // relaxed sanitizer.
    try {
        (0, html_sanitizer_1.lenientlySanitizeHtmlAssertUnchanged)(s);
        // Continue
    }
    catch {
        reportLegacyConversion(options, ReportingType.HTML_CHANGED_BY_RELAXED_SANITIZING);
        return true;
    }
    // If it isn't changed by the relaxed sanitizer, see if it is changed by the
    // strict sanitizer. If possible we'd rather migrate legacy conversions to the
    // strict sanitizer.
    try {
        (0, html_sanitizer_1.sanitizeHtmlAssertUnchanged)(s);
        // Continue
    }
    catch {
        reportLegacyConversion(options, ReportingType.HTML_CHANGED_BY_SANITIZING);
        return true;
    }
    // It wasn't changed by either sanitizer
    return false;
}
/**
 * The type of the report
 * @enum {string}
 */
const ReportingType = {
    // The type if the report signifies just that the legacy conversion was
    // called.
    HEARTBEAT: "HEARTBEAT",
    // The type if the report signifies that the legacy conversion code crashed.
    CRASHED: "CRASHED",
    // The type if the report signifies that escaping the input changed it.
    HTML_CHANGED_BY_ESCAPING: "H_ESCAPE",
    // The type if the report signifies that sanitizing the input with the strict
    // sanitizer changed it.
    HTML_CHANGED_BY_SANITIZING: "H_SANITIZE",
    // The type if the report signifies that sanitizing the input with the relaxed
    // sanitizer changed it.
    HTML_CHANGED_BY_RELAXED_SANITIZING: "H_RSANITIZE",
    // The type if the report signifies that sanitizing the input with the super
    // lenient sanitizer changed it.
    HTML_CHANGED_BY_SUPER_LENIENT_SANITIZING: "H_SLSANITIZE",
};
/**
 * @param {!ReportingOptions} options
 * @param {!ReportingType} type
 * @param {(undefined|string)=} additionalData
 * @return {void}
 */
function reportLegacyConversion(options, type, additionalData) {
    /** @type {?} */
    let sendReport = undefined;
    if (exports.TEST_ONLY.sendReport) {
        sendReport = exports.TEST_ONLY.sendReport;
    }
    else if (typeof window !== 'undefined' && window.navigator &&
        window.navigator.sendBeacon !== undefined) {
        sendReport = navigator.sendBeacon.bind(navigator);
    }
    else {
        sendReport = sendBeaconPolyfill;
    }
    /** @type {!ReportingPayload} */
    const payload = {
        'host': window.location.hostname,
        'type': type,
        'additionalData': additionalData,
    };
    sendReport('https://csp.withgoogle.com/csp/lcreport/' + options.reportingId, JSON.stringify(payload));
}
/**
 * A very naive polyfill for navigator.sendBeacon for browsers that don't
 * support navigator.sendBeacon.
 * @param {string} url
 * @param {string} body
 * @return {void}
 */
function sendBeaconPolyfill(url, body) {
    /** @type {!XMLHttpRequest} */
    const req = new XMLHttpRequest();
    req.open('POST', url);
    req.setRequestHeader('Content-Type', 'application/json');
    req.send(body);
}
/**
 * @record
 */
function TestOnlyOptions() { }
/* istanbul ignore if */
if (false) {
    /**
     * @type {(undefined|function(string, string): void)}
     * @public
     */
    TestOnlyOptions.prototype.sendReport;
    /**
     * @type {function(): void}
     * @public
     */
    TestOnlyOptions.prototype.reset;
}
/** @type {!TestOnlyOptions} */
exports.TEST_ONLY = {
    reset: (/**
     * @return {void}
     */
    () => {
        exports.TEST_ONLY.sendReport = undefined;
    })
};
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/index.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/index.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.index');
var module = module || { id: 'third_party/javascript/safevalues/index.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_attribute_builders_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.attribute_builders");
const tsickle_html_builders_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_builders");
const tsickle_html_sanitizer_3 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer");
const tsickle_html_sanitizer_builder_4 = goog.requireType("google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer_builder");
const tsickle_resource_url_builders_5 = goog.requireType("google3.third_party.javascript.safevalues.builders.resource_url_builders");
const tsickle_script_builders_6 = goog.requireType("google3.third_party.javascript.safevalues.builders.script_builders");
const tsickle_style_builders_7 = goog.requireType("google3.third_party.javascript.safevalues.builders.style_builders");
const tsickle_style_sheet_builders_8 = goog.requireType("google3.third_party.javascript.safevalues.builders.style_sheet_builders");
const tsickle_url_builders_9 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_builders");
const tsickle_url_sanitizer_10 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_attribute_impl_11 = goog.requireType("google3.third_party.javascript.safevalues.internals.attribute_impl");
const tsickle_html_impl_12 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_resource_url_impl_13 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_script_impl_14 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_style_impl_15 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_impl");
const tsickle_style_sheet_impl_16 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_sheet_impl");
const tsickle_url_impl_17 = goog.requireType("google3.third_party.javascript.safevalues.internals.url_impl");
const tsickle_reporting_18 = goog.requireType("google3.third_party.javascript.safevalues.reporting.reporting");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/** Safe builders */
const attribute_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.attribute_builders');
exports.safeAttrPrefix = attribute_builders_1.safeAttrPrefix;
const html_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_builders');
exports.concatHtmls = html_builders_1.concatHtmls;
exports.htmlEscape = html_builders_1.htmlEscape;
exports.scriptToHtml = html_builders_1.scriptToHtml;
exports.scriptUrlToHtml = html_builders_1.scriptUrlToHtml;
const html_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer');
exports.sanitizeHtml = html_sanitizer_1.sanitizeHtml;
exports.sanitizeHtmlAssertUnchanged = html_sanitizer_1.sanitizeHtmlAssertUnchanged;
exports.sanitizeHtmlToFragment = html_sanitizer_1.sanitizeHtmlToFragment;
/** @typedef {!tsickle_html_sanitizer_3.HtmlSanitizer} */
exports.HtmlSanitizer; // re-export typedef
const html_sanitizer_builder_1 = goog.require('google3.third_party.javascript.safevalues.builders.html_sanitizer.html_sanitizer_builder');
exports.HtmlSanitizerBuilder = html_sanitizer_builder_1.HtmlSanitizerBuilder;
const resource_url_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.resource_url_builders');
exports.appendParams = resource_url_builders_1.appendParams;
exports.appendPathSegment = resource_url_builders_1.appendPathSegment;
exports.objectUrlFromScript = resource_url_builders_1.objectUrlFromScript;
exports.replaceFragment = resource_url_builders_1.replaceFragment;
exports.trustedResourceUrl = resource_url_builders_1.trustedResourceUrl;
const script_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.script_builders');
exports.concatScripts = script_builders_1.concatScripts;
exports.safeScript = script_builders_1.safeScript;
exports.safeScriptWithArgs = script_builders_1.safeScriptWithArgs;
exports.valueAsScript = script_builders_1.valueAsScript;
const style_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.style_builders'); // LINE-INTERNAL
exports.concatStyles = style_builders_1.concatStyles;
exports.safeStyle = style_builders_1.safeStyle;
// LINE-INTERNAL
const style_sheet_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.style_sheet_builders');
exports.concatStyleSheets = style_sheet_builders_1.concatStyleSheets;
exports.safeStyleSheet = style_sheet_builders_1.safeStyleSheet;
const url_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_builders'); // LINE-INTERNAL
exports.fromMediaSource = url_builders_1.fromMediaSource;
exports.fromTrustedResourceUrl = url_builders_1.fromTrustedResourceUrl;
exports.objectUrlFromSafeSource = url_builders_1.objectUrlFromSafeSource;
exports.safeUrl = url_builders_1.safeUrl;
exports.SanitizableUrlScheme = url_builders_1.SanitizableUrlScheme;
exports.sanitizeUrl = url_builders_1.sanitizeUrl;
exports.trySanitizeUrl = url_builders_1.trySanitizeUrl;
/** @typedef {!tsickle_url_builders_9.Scheme} */
exports.Scheme; // re-export typedef
// LINE-INTERNAL
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer'); // LINE-INTERNAL
exports.addJavaScriptUrlSanitizationCallback = url_sanitizer_1.addJavaScriptUrlSanitizationCallback;
exports.removeJavaScriptUrlSanitizationCallback = url_sanitizer_1.removeJavaScriptUrlSanitizationCallback;
// LINE-INTERNAL
/** Types, constants and unwrappers */
const attribute_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.attribute_impl');
exports.SafeAttributePrefix = attribute_impl_1.SafeAttributePrefix;
exports.unwrapAttributePrefix = attribute_impl_1.unwrapAttributePrefix;
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
exports.EMPTY_HTML = html_impl_1.EMPTY_HTML;
exports.isHtml = html_impl_1.isHtml;
exports.SafeHtml = html_impl_1.SafeHtml;
exports.unwrapHtml = html_impl_1.unwrapHtml;
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
exports.isResourceUrl = resource_url_impl_1.isResourceUrl;
exports.TrustedResourceUrl = resource_url_impl_1.TrustedResourceUrl;
exports.unwrapResourceUrl = resource_url_impl_1.unwrapResourceUrl;
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
exports.EMPTY_SCRIPT = script_impl_1.EMPTY_SCRIPT;
exports.isScript = script_impl_1.isScript;
exports.SafeScript = script_impl_1.SafeScript;
exports.unwrapScript = script_impl_1.unwrapScript;
const style_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_impl'); // LINE-INTERNAL
exports.isStyle = style_impl_1.isStyle;
exports.SafeStyle = style_impl_1.SafeStyle;
exports.unwrapStyle = style_impl_1.unwrapStyle;
// LINE-INTERNAL
const style_sheet_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_sheet_impl');
exports.isStyleSheet = style_sheet_impl_1.isStyleSheet;
exports.SafeStyleSheet = style_sheet_impl_1.SafeStyleSheet;
exports.unwrapStyleSheet = style_sheet_impl_1.unwrapStyleSheet;
const url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.url_impl'); // LINE-INTERNAL
exports.ABOUT_BLANK = url_impl_1.ABOUT_BLANK;
exports.INNOCUOUS_URL = url_impl_1.INNOCUOUS_URL;
exports.isUrl = url_impl_1.isUrl;
exports.SafeUrl = url_impl_1.SafeUrl;
exports.unwrapUrl = url_impl_1.unwrapUrl;
// LINE-INTERNAL
const reporting_1 = goog.require('google3.third_party.javascript.safevalues.reporting.reporting'); // LINE-INTERNAL
exports.reportOnlyHtmlPassthrough = reporting_1.reportOnlyHtmlPassthrough;
// LINE-INTERNAL
// BEGIN-INTERNAL
// clang-format off
const html_builders_2 = html_builders_1;
exports.createHtml = html_builders_2.createHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNQSxtSEFBNkQ7QUFBckQsOENBQUEsY0FBYyxDQUFBO0FBQ3RCLHlHQUFnRztBQUF4RixzQ0FBQSxXQUFXLENBQUE7QUFBRSxxQ0FBQSxVQUFVLENBQUE7QUFBRSx1Q0FBQSxZQUFZLENBQUE7QUFBRSwwQ0FBQSxlQUFlLENBQUE7QUFDOUQsMEhBQTBJO0FBQW5ILHdDQUFBLFlBQVksQ0FBQTtBQUFFLHVEQUFBLDJCQUEyQixDQUFBO0FBQUUsa0RBQUEsc0JBQXNCLENBQUE7OztBQUN4RiwwSUFBc0Y7QUFBOUUsd0RBQUEsb0JBQW9CLENBQUE7QUFDNUIseUhBQTJJO0FBQW5JLCtDQUFBLFlBQVksQ0FBQTtBQUFFLG9EQUFBLGlCQUFpQixDQUFBO0FBQUUsc0RBQUEsbUJBQW1CLENBQUE7QUFBRSxrREFBQSxlQUFlLENBQUE7QUFBRSxxREFBQSxrQkFBa0IsQ0FBQTtBQUNqRyw2R0FBd0c7QUFBaEcsMENBQUEsYUFBYSxDQUFBO0FBQUUsdUNBQUEsVUFBVSxDQUFBO0FBQUUsK0NBQUEsa0JBQWtCLENBQUE7QUFBRSwwQ0FBQSxhQUFhLENBQUE7QUFDcEUsMkdBQWtFLENBQUUsZ0JBQWdCO0FBQTVFLHdDQUFBLFlBQVksQ0FBQTtBQUFFLHFDQUFBLFNBQVMsQ0FBQTs7QUFDL0IsdUhBQWtGO0FBQTFFLG1EQUFBLGlCQUFpQixDQUFBO0FBQUUsZ0RBQUEsY0FBYyxDQUFBO0FBQ3pDLHVHQUE2SyxDQUFFLGdCQUFnQjtBQUF2TCx5Q0FBQSxlQUFlLENBQUE7QUFBRSxnREFBQSxzQkFBc0IsQ0FBQTtBQUFFLGlEQUFBLHVCQUF1QixDQUFBO0FBQUUsaUNBQUEsT0FBTyxDQUFBO0FBQUUsOENBQUEsb0JBQW9CLENBQUE7QUFBRSxxQ0FBQSxXQUFXLENBQUE7QUFBVSx3Q0FBQSxjQUFjLENBQUE7Ozs7QUFDNUkseUdBQXVILENBQUUsZ0JBQWdCO0FBQWpJLCtEQUFBLG9DQUFvQyxDQUFBO0FBQUUsa0VBQUEsdUNBQXVDLENBQUE7OztBQUVyRiw0R0FBc0Y7QUFBOUUsK0NBQUEsbUJBQW1CLENBQUE7QUFBRSxpREFBQSxxQkFBcUIsQ0FBQTtBQUNsRCxrR0FBK0U7QUFBdkUsaUNBQUEsVUFBVSxDQUFBO0FBQUUsNkJBQUEsTUFBTSxDQUFBO0FBQUUsK0JBQUEsUUFBUSxDQUFBO0FBQUUsaUNBQUEsVUFBVSxDQUFBO0FBQ2hELGtIQUFtRztBQUEzRiw0Q0FBQSxhQUFhLENBQUE7QUFBRSxpREFBQSxrQkFBa0IsQ0FBQTtBQUFFLGdEQUFBLGlCQUFpQixDQUFBO0FBQzVELHNHQUF5RjtBQUFqRixxQ0FBQSxZQUFZLENBQUE7QUFBRSxpQ0FBQSxRQUFRLENBQUE7QUFBRSxtQ0FBQSxVQUFVLENBQUE7QUFBRSxxQ0FBQSxZQUFZLENBQUE7QUFDeEQsb0dBQXVFLENBQUUsZ0JBQWdCO0FBQWpGLCtCQUFBLE9BQU8sQ0FBQTtBQUFFLGlDQUFBLFNBQVMsQ0FBQTtBQUFFLG1DQUFBLFdBQVcsQ0FBQTs7QUFDdkMsZ0hBQTRGO0FBQXBGLDBDQUFBLFlBQVksQ0FBQTtBQUFFLDRDQUFBLGNBQWMsQ0FBQTtBQUFFLDhDQUFBLGdCQUFnQixDQUFBO0FBQ3RELGdHQUEyRixDQUFFLGdCQUFnQjtBQUFyRyxpQ0FBQSxXQUFXLENBQUE7QUFBRSxtQ0FBQSxhQUFhLENBQUE7QUFBRSwyQkFBQSxLQUFLLENBQUE7QUFBRSw2QkFBQSxPQUFPLENBQUE7QUFBRSwrQkFBQSxTQUFTLENBQUE7O0FBQzdELGtHQUFnRSxDQUFFLGdCQUFnQjtBQUExRSxnREFBQSx5QkFBeUIsQ0FBQTs7OztBQUdqQyx3Q0FBb0Q7QUFBNUMscUNBQUEsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG4vKiogU2FmZSBidWlsZGVycyAqL1xuZXhwb3J0IHtzYWZlQXR0clByZWZpeH0gZnJvbSAnLi9idWlsZGVycy9hdHRyaWJ1dGVfYnVpbGRlcnMnO1xuZXhwb3J0IHtjb25jYXRIdG1scywgaHRtbEVzY2FwZSwgc2NyaXB0VG9IdG1sLCBzY3JpcHRVcmxUb0h0bWx9IGZyb20gJy4vYnVpbGRlcnMvaHRtbF9idWlsZGVycyc7XG5leHBvcnQge0h0bWxTYW5pdGl6ZXIsIHNhbml0aXplSHRtbCwgc2FuaXRpemVIdG1sQXNzZXJ0VW5jaGFuZ2VkLCBzYW5pdGl6ZUh0bWxUb0ZyYWdtZW50fSBmcm9tICcuL2J1aWxkZXJzL2h0bWxfc2FuaXRpemVyL2h0bWxfc2FuaXRpemVyJztcbmV4cG9ydCB7SHRtbFNhbml0aXplckJ1aWxkZXJ9IGZyb20gJy4vYnVpbGRlcnMvaHRtbF9zYW5pdGl6ZXIvaHRtbF9zYW5pdGl6ZXJfYnVpbGRlcic7XG5leHBvcnQge2FwcGVuZFBhcmFtcywgYXBwZW5kUGF0aFNlZ21lbnQsIG9iamVjdFVybEZyb21TY3JpcHQsIHJlcGxhY2VGcmFnbWVudCwgdHJ1c3RlZFJlc291cmNlVXJsfSBmcm9tICcuL2J1aWxkZXJzL3Jlc291cmNlX3VybF9idWlsZGVycyc7XG5leHBvcnQge2NvbmNhdFNjcmlwdHMsIHNhZmVTY3JpcHQsIHNhZmVTY3JpcHRXaXRoQXJncywgdmFsdWVBc1NjcmlwdH0gZnJvbSAnLi9idWlsZGVycy9zY3JpcHRfYnVpbGRlcnMnO1xuZXhwb3J0IHtjb25jYXRTdHlsZXMsIHNhZmVTdHlsZX0gZnJvbSAnLi9idWlsZGVycy9zdHlsZV9idWlsZGVycyc7ICAvLyBMSU5FLUlOVEVSTkFMXG5leHBvcnQge2NvbmNhdFN0eWxlU2hlZXRzLCBzYWZlU3R5bGVTaGVldH0gZnJvbSAnLi9idWlsZGVycy9zdHlsZV9zaGVldF9idWlsZGVycyc7XG5leHBvcnQge2Zyb21NZWRpYVNvdXJjZSwgZnJvbVRydXN0ZWRSZXNvdXJjZVVybCwgb2JqZWN0VXJsRnJvbVNhZmVTb3VyY2UsIHNhZmVVcmwsIFNhbml0aXphYmxlVXJsU2NoZW1lLCBzYW5pdGl6ZVVybCwgU2NoZW1lLCB0cnlTYW5pdGl6ZVVybH0gZnJvbSAnLi9idWlsZGVycy91cmxfYnVpbGRlcnMnOyAgLy8gTElORS1JTlRFUk5BTFxuZXhwb3J0IHthZGRKYXZhU2NyaXB0VXJsU2FuaXRpemF0aW9uQ2FsbGJhY2ssIHJlbW92ZUphdmFTY3JpcHRVcmxTYW5pdGl6YXRpb25DYWxsYmFja30gZnJvbSAnLi9idWlsZGVycy91cmxfc2FuaXRpemVyJzsgIC8vIExJTkUtSU5URVJOQUxcbi8qKiBUeXBlcywgY29uc3RhbnRzIGFuZCB1bndyYXBwZXJzICovXG5leHBvcnQge1NhZmVBdHRyaWJ1dGVQcmVmaXgsIHVud3JhcEF0dHJpYnV0ZVByZWZpeH0gZnJvbSAnLi9pbnRlcm5hbHMvYXR0cmlidXRlX2ltcGwnO1xuZXhwb3J0IHtFTVBUWV9IVE1MLCBpc0h0bWwsIFNhZmVIdG1sLCB1bndyYXBIdG1sfSBmcm9tICcuL2ludGVybmFscy9odG1sX2ltcGwnO1xuZXhwb3J0IHtpc1Jlc291cmNlVXJsLCBUcnVzdGVkUmVzb3VyY2VVcmwsIHVud3JhcFJlc291cmNlVXJsfSBmcm9tICcuL2ludGVybmFscy9yZXNvdXJjZV91cmxfaW1wbCc7XG5leHBvcnQge0VNUFRZX1NDUklQVCwgaXNTY3JpcHQsIFNhZmVTY3JpcHQsIHVud3JhcFNjcmlwdH0gZnJvbSAnLi9pbnRlcm5hbHMvc2NyaXB0X2ltcGwnO1xuZXhwb3J0IHtpc1N0eWxlLCBTYWZlU3R5bGUsIHVud3JhcFN0eWxlfSBmcm9tICcuL2ludGVybmFscy9zdHlsZV9pbXBsJzsgIC8vIExJTkUtSU5URVJOQUxcbmV4cG9ydCB7aXNTdHlsZVNoZWV0LCBTYWZlU3R5bGVTaGVldCwgdW53cmFwU3R5bGVTaGVldH0gZnJvbSAnLi9pbnRlcm5hbHMvc3R5bGVfc2hlZXRfaW1wbCc7XG5leHBvcnQge0FCT1VUX0JMQU5LLCBJTk5PQ1VPVVNfVVJMLCBpc1VybCwgU2FmZVVybCwgdW53cmFwVXJsfSBmcm9tICcuL2ludGVybmFscy91cmxfaW1wbCc7ICAvLyBMSU5FLUlOVEVSTkFMXG5leHBvcnQge3JlcG9ydE9ubHlIdG1sUGFzc3Rocm91Z2h9IGZyb20gJy4vcmVwb3J0aW5nL3JlcG9ydGluZyc7ICAvLyBMSU5FLUlOVEVSTkFMXG4vLyBCRUdJTi1JTlRFUk5BTFxuLy8gY2xhbmctZm9ybWF0IG9mZlxuZXhwb3J0IHtjcmVhdGVIdG1sfSBmcm9tICcuL2J1aWxkZXJzL2h0bWxfYnVpbGRlcnMnO1xuLy8gY2xhbmctZm9ybWF0IG9uXG4vLyBFTkQtSU5URVJOQUxcblxuLy8gQkVHSU4tSU5URVJOQUxcbmdvb2cudHNNaWdyYXRpb25OYW1lZEV4cG9ydHNTaGltKCdzYWZldmFsdWVzJyk7XG5nb29nLnRzTWlncmF0aW9uRXhwb3J0c1NoaW1EZWNsYXJlTGVnYWN5TmFtZXNwYWNlKCk7XG4vLyBFTkQtSU5URVJOQUxcbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/index.tsmes.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview generator:ts_migration_exports_shim.ts
 * original_file:third_party/javascript/safevalues/index.ts
 * pintomodule absent in original_file
 */
goog.module('safevalues');
goog.module.declareLegacyNamespace();
var mainModule = goog.require('google3.third_party.javascript.safevalues.index');
exports.safeAttrPrefix = mainModule.safeAttrPrefix;
exports.concatHtmls = mainModule.concatHtmls;
exports.htmlEscape = mainModule.htmlEscape;
exports.scriptToHtml = mainModule.scriptToHtml;
exports.scriptUrlToHtml = mainModule.scriptUrlToHtml;
exports.HtmlSanitizer = mainModule.HtmlSanitizer;
exports.sanitizeHtml = mainModule.sanitizeHtml;
exports.sanitizeHtmlAssertUnchanged = mainModule.sanitizeHtmlAssertUnchanged;
exports.sanitizeHtmlToFragment = mainModule.sanitizeHtmlToFragment;
exports.HtmlSanitizerBuilder = mainModule.HtmlSanitizerBuilder;
exports.appendParams = mainModule.appendParams;
exports.appendPathSegment = mainModule.appendPathSegment;
exports.objectUrlFromScript = mainModule.objectUrlFromScript;
exports.replaceFragment = mainModule.replaceFragment;
exports.trustedResourceUrl = mainModule.trustedResourceUrl;
exports.concatScripts = mainModule.concatScripts;
exports.safeScript = mainModule.safeScript;
exports.safeScriptWithArgs = mainModule.safeScriptWithArgs;
exports.valueAsScript = mainModule.valueAsScript;
exports.concatStyles = mainModule.concatStyles;
exports.safeStyle = mainModule.safeStyle;
exports.concatStyleSheets = mainModule.concatStyleSheets;
exports.safeStyleSheet = mainModule.safeStyleSheet;
exports.fromMediaSource = mainModule.fromMediaSource;
exports.fromTrustedResourceUrl = mainModule.fromTrustedResourceUrl;
exports.objectUrlFromSafeSource = mainModule.objectUrlFromSafeSource;
exports.safeUrl = mainModule.safeUrl;
exports.SanitizableUrlScheme = mainModule.SanitizableUrlScheme;
exports.sanitizeUrl = mainModule.sanitizeUrl;
exports.Scheme = mainModule.Scheme;
exports.trySanitizeUrl = mainModule.trySanitizeUrl;
exports.addJavaScriptUrlSanitizationCallback = mainModule.addJavaScriptUrlSanitizationCallback;
exports.removeJavaScriptUrlSanitizationCallback = mainModule.removeJavaScriptUrlSanitizationCallback;
exports.SafeAttributePrefix = mainModule.SafeAttributePrefix;
exports.unwrapAttributePrefix = mainModule.unwrapAttributePrefix;
exports.EMPTY_HTML = mainModule.EMPTY_HTML;
exports.isHtml = mainModule.isHtml;
exports.SafeHtml = mainModule.SafeHtml;
exports.unwrapHtml = mainModule.unwrapHtml;
exports.isResourceUrl = mainModule.isResourceUrl;
exports.TrustedResourceUrl = mainModule.TrustedResourceUrl;
exports.unwrapResourceUrl = mainModule.unwrapResourceUrl;
exports.EMPTY_SCRIPT = mainModule.EMPTY_SCRIPT;
exports.isScript = mainModule.isScript;
exports.SafeScript = mainModule.SafeScript;
exports.unwrapScript = mainModule.unwrapScript;
exports.isStyle = mainModule.isStyle;
exports.SafeStyle = mainModule.SafeStyle;
exports.unwrapStyle = mainModule.unwrapStyle;
exports.isStyleSheet = mainModule.isStyleSheet;
exports.SafeStyleSheet = mainModule.SafeStyleSheet;
exports.unwrapStyleSheet = mainModule.unwrapStyleSheet;
exports.ABOUT_BLANK = mainModule.ABOUT_BLANK;
exports.INNOCUOUS_URL = mainModule.INNOCUOUS_URL;
exports.isUrl = mainModule.isUrl;
exports.SafeUrl = mainModule.SafeUrl;
exports.unwrapUrl = mainModule.unwrapUrl;
exports.reportOnlyHtmlPassthrough = mainModule.reportOnlyHtmlPassthrough;
exports.createHtml = mainModule.createHtml;

;return exports;});

//javascript/typescript/contrib/check.closure.js
goog.loadModule(function(exports) {'use strict';/**
 *
 * @fileoverview Helper methods for checking program state.
 *
 * Statically all helpers assert that the type of the input is sufficiently
 * narrow. At runtime the helpers behave in two different ways:
 * - checkExhaustive* - unconditionally throws.
 * - assumeExhaustive* - does nothing.
 *
 * Prefer `checkExhaustive()` unless you find yourself writing
 * `try {
 *    checkExhaustive(value);
 *  } catch (error) {
 *    // Handle the error.
 *  }`
 * in which case use `assumeExhaustive()` directly, without the `try`.
 *
 * Generated from: javascript/typescript/contrib/check.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.javascript.typescript.contrib.check');
var module = module || { id: 'javascript/typescript/contrib/check.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
/**
 * Throw an exception on unexpected values.
 *
 * checkExhaustive can be used along with type narrowing to ensure at
 * compile time that all possible types for a value have been handled. For cases
 * where exhaustiveness can not be guaranteed at compile time (i.e. proto enums)
 * an exception will be thrown.
 *
 * A common use-case is in switch statements:
 *
 * ```
 * // enumValue: Enum.A | Enum.B
 * switch(enumValue) {
 *   case Enum.A:
 *   case Enum.B:
 *     break;
 *   default:
 *     checkExhaustive(enumValue);
 * }
 * ```
 *
 * This method throws an exception rather than using an assertion because
 * assertions are stripped in production code and we need the check to fail in
 * production.
 *
 * @param {?} value The value to be checked
 * @param {(undefined|string)=} msg An optional error message to throw
 * @return {?}
 */
function checkExhaustive(value, msg) {
    return checkExhaustiveAllowing(value, msg);
}
exports.checkExhaustive = checkExhaustive;
/**
 * Throw an exception on unexpected values.
 *
 * checkExhaustiveAllowing is similar to checkExhaustive, with one difference
 * that user can specify expected type of value other than 'never'.
 *
 * The template parameter is absolutely required so that the type checker can
 * actually ensure that nothing other than the explicitly-allowed types is
 * passed.  If the allowed type is broader than you expect, consider trying a
 * different approach to narrow it, or else using the go/guards-and-assertions
 * library to make a different kind of assertion.
 *
 * It is useful when enum contains values that should never occur. Those should
 * be passed as the type argument to checkExhaustiveAllowing. A common use-case
 * would be like:
 *
 * ```
 * // enumValue: Enum.A | Enum.B | Enum.UNSPECIFIED | Enum.UNKNOWN
 * switch(enumValue) {
 *   case Enum.A:
 *   case Enum.B:
 *     break;
 *   default:
 *     checkExhaustiveAllowing<Enum.UNSPECIFIED|Enum.UNKNOWN>(enumValue);
 * }
 * ```
 *
 * @template Allowed, Arg
 * @param {Arg} value The value to be checked
 * @param {string=} msg An optional error message to throw
 * @return {?}
 */
function checkExhaustiveAllowing(value, msg = `unexpected value ${value}!`) {
    throw new Error(msg);
}
exports.checkExhaustiveAllowing = checkExhaustiveAllowing;
/**
 * Type argument for legacy incorrect usages of `checkExhaustiveAllowing`.
 * This function is intended to be called with an explicit template parameter,
 * but this was not always enforced. When the parameter is elided, the type
 * checker cannot actually verify anything useful. This placeholder type allows
 * legacy callsites to continue passing type checking, but should not be used in
 * new calls.
 *
 * Consider replacing the call to `checkExhaustiveAllowing` with a call to the
 * Guards and Assertions library (go/guards-and-assertions).
 * @typedef {*}
 */
exports.LegacyIncorrectUsage;
/**
 * Fail to compile on unexpected values.
 *
 * assumeExhaustive can be used along with type narrowing to ensure at compile
 * time that all possible types for a value have been handled. At runtime it is
 * a no-op.
 *
 * A common use-case is in switch statements:
 *
 * ```
 * // sensibleDefault: string
 * // numericEnumValue: Enum.A | Enum.B
 * switch(numericEnumValue) {
 *   case Enum.A:
 *     return 'A';
 *   case Enum.B:
 *     return 'B';
 *   default:
 *     assumeExhaustive(numericEnumValue);
 *     return sensibleDefault;
 * }
 * ```
 * @param {?} value
 * @return {void}
 */
function assumeExhaustive(value) { }
exports.assumeExhaustive = assumeExhaustive;
/**
 * Fail to compile on unexpected values.
 *
 * assumeExhaustiveAllowing is similar to assumeExhaustive, with one difference
 * that user can specify expected type of value other than 'never'.
 *
 * It is useful when enum contains values that should never occur. Those should
 * be passed as the type argument to assumeExhaustiveAllowing. A common use-case
 * would be like:
 *
 * ```
 * // enumValue: Enum.A | Enum.B | Enum.UNSPECIFIED | Enum.UNKNOWN
 * switch(enumValue) {
 *   case Enum.A:
 *     break;
 *   case Enum.B:
 *     break;
 *   default:
 *     assumeExhaustiveAllowing<Enum.UNSPECIFIED|Enum.UNKNOWN>(enumValue);
 *     break;
 * }
 * ```
 * @template Allowed, Arg
 * @param {Arg} value
 * @return {void}
 */
function assumeExhaustiveAllowing(value) { }
exports.assumeExhaustiveAllowing = assumeExhaustiveAllowing;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9qYXZhc2NyaXB0L3R5cGVzY3JpcHQvY29udHJpYi9jaGVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZDQSxTQUFnQixlQUFlLENBQUMsS0FBWSxFQUFFLEdBQVk7SUFDeEQsT0FBTyx1QkFBdUIsQ0FBUSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUZELDBDQUVDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQ0QsU0FDQSx1QkFBdUIsQ0FDbkIsS0FBVSxFQUFFLEdBQUcsR0FBRyxvQkFBb0IsS0FBSyxHQUFHO0lBQ2hELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkIsQ0FBQztBQUpELDBEQUlDOzs7Ozs7Ozs7Ozs7O0FBYUQsNkJBQTJDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCM0MsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBWSxJQUFTLENBQUM7QUFBdkQsNENBQXVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QnZELFNBQ0Esd0JBQXdCLENBQ3BCLEtBQVUsSUFBUyxDQUFDO0FBRnhCLDREQUV3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBIZWxwZXIgbWV0aG9kcyBmb3IgY2hlY2tpbmcgcHJvZ3JhbSBzdGF0ZS5cbiAqXG4gKiBTdGF0aWNhbGx5IGFsbCBoZWxwZXJzIGFzc2VydCB0aGF0IHRoZSB0eXBlIG9mIHRoZSBpbnB1dCBpcyBzdWZmaWNpZW50bHlcbiAqIG5hcnJvdy4gQXQgcnVudGltZSB0aGUgaGVscGVycyBiZWhhdmUgaW4gdHdvIGRpZmZlcmVudCB3YXlzOlxuICogLSBjaGVja0V4aGF1c3RpdmUqIC0gdW5jb25kaXRpb25hbGx5IHRocm93cy5cbiAqIC0gYXNzdW1lRXhoYXVzdGl2ZSogLSBkb2VzIG5vdGhpbmcuXG4gKlxuICogUHJlZmVyIGBjaGVja0V4aGF1c3RpdmUoKWAgdW5sZXNzIHlvdSBmaW5kIHlvdXJzZWxmIHdyaXRpbmdcbiAqIGB0cnkge1xuICogICAgY2hlY2tFeGhhdXN0aXZlKHZhbHVlKTtcbiAqICB9IGNhdGNoIChlcnJvcikge1xuICogICAgLy8gSGFuZGxlIHRoZSBlcnJvci5cbiAqICB9YFxuICogaW4gd2hpY2ggY2FzZSB1c2UgYGFzc3VtZUV4aGF1c3RpdmUoKWAgZGlyZWN0bHksIHdpdGhvdXQgdGhlIGB0cnlgLlxuICovXG5cbi8qKlxuICogVGhyb3cgYW4gZXhjZXB0aW9uIG9uIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICpcbiAqIGNoZWNrRXhoYXVzdGl2ZSBjYW4gYmUgdXNlZCBhbG9uZyB3aXRoIHR5cGUgbmFycm93aW5nIHRvIGVuc3VyZSBhdFxuICogY29tcGlsZSB0aW1lIHRoYXQgYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBhIHZhbHVlIGhhdmUgYmVlbiBoYW5kbGVkLiBGb3IgY2FzZXNcbiAqIHdoZXJlIGV4aGF1c3RpdmVuZXNzIGNhbiBub3QgYmUgZ3VhcmFudGVlZCBhdCBjb21waWxlIHRpbWUgKGkuZS4gcHJvdG8gZW51bXMpXG4gKiBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG4gKlxuICogQSBjb21tb24gdXNlLWNhc2UgaXMgaW4gc3dpdGNoIHN0YXRlbWVudHM6XG4gKlxuICogYGBgXG4gKiAvLyBlbnVtVmFsdWU6IEVudW0uQSB8IEVudW0uQlxuICogc3dpdGNoKGVudW1WYWx1ZSkge1xuICogICBjYXNlIEVudW0uQTpcbiAqICAgY2FzZSBFbnVtLkI6XG4gKiAgICAgYnJlYWs7XG4gKiAgIGRlZmF1bHQ6XG4gKiAgICAgY2hlY2tFeGhhdXN0aXZlKGVudW1WYWx1ZSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIG1ldGhvZCB0aHJvd3MgYW4gZXhjZXB0aW9uIHJhdGhlciB0aGFuIHVzaW5nIGFuIGFzc2VydGlvbiBiZWNhdXNlXG4gKiBhc3NlcnRpb25zIGFyZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uIGNvZGUgYW5kIHdlIG5lZWQgdGhlIGNoZWNrIHRvIGZhaWwgaW5cbiAqIHByb2R1Y3Rpb24uXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjaGVja2VkXG4gKiBAcGFyYW0gbXNnIEFuIG9wdGlvbmFsIGVycm9yIG1lc3NhZ2UgdG8gdGhyb3dcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRXhoYXVzdGl2ZSh2YWx1ZTogbmV2ZXIsIG1zZz86IHN0cmluZyk6IG5ldmVyIHtcbiAgcmV0dXJuIGNoZWNrRXhoYXVzdGl2ZUFsbG93aW5nPG5ldmVyPih2YWx1ZSwgbXNnKTtcbn1cblxuLyoqXG4gKiBUaHJvdyBhbiBleGNlcHRpb24gb24gdW5leHBlY3RlZCB2YWx1ZXMuXG4gKlxuICogY2hlY2tFeGhhdXN0aXZlQWxsb3dpbmcgaXMgc2ltaWxhciB0byBjaGVja0V4aGF1c3RpdmUsIHdpdGggb25lIGRpZmZlcmVuY2VcbiAqIHRoYXQgdXNlciBjYW4gc3BlY2lmeSBleHBlY3RlZCB0eXBlIG9mIHZhbHVlIG90aGVyIHRoYW4gJ25ldmVyJy5cbiAqXG4gKiBUaGUgdGVtcGxhdGUgcGFyYW1ldGVyIGlzIGFic29sdXRlbHkgcmVxdWlyZWQgc28gdGhhdCB0aGUgdHlwZSBjaGVja2VyIGNhblxuICogYWN0dWFsbHkgZW5zdXJlIHRoYXQgbm90aGluZyBvdGhlciB0aGFuIHRoZSBleHBsaWNpdGx5LWFsbG93ZWQgdHlwZXMgaXNcbiAqIHBhc3NlZC4gIElmIHRoZSBhbGxvd2VkIHR5cGUgaXMgYnJvYWRlciB0aGFuIHlvdSBleHBlY3QsIGNvbnNpZGVyIHRyeWluZyBhXG4gKiBkaWZmZXJlbnQgYXBwcm9hY2ggdG8gbmFycm93IGl0LCBvciBlbHNlIHVzaW5nIHRoZSBnby9ndWFyZHMtYW5kLWFzc2VydGlvbnNcbiAqIGxpYnJhcnkgdG8gbWFrZSBhIGRpZmZlcmVudCBraW5kIG9mIGFzc2VydGlvbi5cbiAqXG4gKiBJdCBpcyB1c2VmdWwgd2hlbiBlbnVtIGNvbnRhaW5zIHZhbHVlcyB0aGF0IHNob3VsZCBuZXZlciBvY2N1ci4gVGhvc2Ugc2hvdWxkXG4gKiBiZSBwYXNzZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQgdG8gY2hlY2tFeGhhdXN0aXZlQWxsb3dpbmcuIEEgY29tbW9uIHVzZS1jYXNlXG4gKiB3b3VsZCBiZSBsaWtlOlxuICpcbiAqIGBgYFxuICogLy8gZW51bVZhbHVlOiBFbnVtLkEgfCBFbnVtLkIgfCBFbnVtLlVOU1BFQ0lGSUVEIHwgRW51bS5VTktOT1dOXG4gKiBzd2l0Y2goZW51bVZhbHVlKSB7XG4gKiAgIGNhc2UgRW51bS5BOlxuICogICBjYXNlIEVudW0uQjpcbiAqICAgICBicmVhaztcbiAqICAgZGVmYXVsdDpcbiAqICAgICBjaGVja0V4aGF1c3RpdmVBbGxvd2luZzxFbnVtLlVOU1BFQ0lGSUVEfEVudW0uVU5LTk9XTj4oZW51bVZhbHVlKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2hlY2tlZFxuICogQHBhcmFtIG1zZyBBbiBvcHRpb25hbCBlcnJvciBtZXNzYWdlIHRvIHRocm93XG4gKi9cbmV4cG9ydCBmdW5jdGlvblxuY2hlY2tFeGhhdXN0aXZlQWxsb3dpbmc8QWxsb3dlZCA9IG5ldmVyLCBBcmcgZXh0ZW5kcyBBbGxvd2VkID0gQWxsb3dlZD4oXG4gICAgdmFsdWU6IEFyZywgbXNnID0gYHVuZXhwZWN0ZWQgdmFsdWUgJHt2YWx1ZX0hYCk6IG5ldmVyIHtcbiAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG59XG5cbi8qKlxuICogVHlwZSBhcmd1bWVudCBmb3IgbGVnYWN5IGluY29ycmVjdCB1c2FnZXMgb2YgYGNoZWNrRXhoYXVzdGl2ZUFsbG93aW5nYC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIHdpdGggYW4gZXhwbGljaXQgdGVtcGxhdGUgcGFyYW1ldGVyLFxuICogYnV0IHRoaXMgd2FzIG5vdCBhbHdheXMgZW5mb3JjZWQuIFdoZW4gdGhlIHBhcmFtZXRlciBpcyBlbGlkZWQsIHRoZSB0eXBlXG4gKiBjaGVja2VyIGNhbm5vdCBhY3R1YWxseSB2ZXJpZnkgYW55dGhpbmcgdXNlZnVsLiBUaGlzIHBsYWNlaG9sZGVyIHR5cGUgYWxsb3dzXG4gKiBsZWdhY3kgY2FsbHNpdGVzIHRvIGNvbnRpbnVlIHBhc3NpbmcgdHlwZSBjaGVja2luZywgYnV0IHNob3VsZCBub3QgYmUgdXNlZCBpblxuICogbmV3IGNhbGxzLlxuICpcbiAqIENvbnNpZGVyIHJlcGxhY2luZyB0aGUgY2FsbCB0byBgY2hlY2tFeGhhdXN0aXZlQWxsb3dpbmdgIHdpdGggYSBjYWxsIHRvIHRoZVxuICogR3VhcmRzIGFuZCBBc3NlcnRpb25zIGxpYnJhcnkgKGdvL2d1YXJkcy1hbmQtYXNzZXJ0aW9ucykuXG4gKi9cbmV4cG9ydCB0eXBlIExlZ2FjeUluY29ycmVjdFVzYWdlID0gdW5rbm93bjtcblxuLyoqXG4gKiBGYWlsIHRvIGNvbXBpbGUgb24gdW5leHBlY3RlZCB2YWx1ZXMuXG4gKlxuICogYXNzdW1lRXhoYXVzdGl2ZSBjYW4gYmUgdXNlZCBhbG9uZyB3aXRoIHR5cGUgbmFycm93aW5nIHRvIGVuc3VyZSBhdCBjb21waWxlXG4gKiB0aW1lIHRoYXQgYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBhIHZhbHVlIGhhdmUgYmVlbiBoYW5kbGVkLiBBdCBydW50aW1lIGl0IGlzXG4gKiBhIG5vLW9wLlxuICpcbiAqIEEgY29tbW9uIHVzZS1jYXNlIGlzIGluIHN3aXRjaCBzdGF0ZW1lbnRzOlxuICpcbiAqIGBgYFxuICogLy8gc2Vuc2libGVEZWZhdWx0OiBzdHJpbmdcbiAqIC8vIG51bWVyaWNFbnVtVmFsdWU6IEVudW0uQSB8IEVudW0uQlxuICogc3dpdGNoKG51bWVyaWNFbnVtVmFsdWUpIHtcbiAqICAgY2FzZSBFbnVtLkE6XG4gKiAgICAgcmV0dXJuICdBJztcbiAqICAgY2FzZSBFbnVtLkI6XG4gKiAgICAgcmV0dXJuICdCJztcbiAqICAgZGVmYXVsdDpcbiAqICAgICBhc3N1bWVFeGhhdXN0aXZlKG51bWVyaWNFbnVtVmFsdWUpO1xuICogICAgIHJldHVybiBzZW5zaWJsZURlZmF1bHQ7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc3VtZUV4aGF1c3RpdmUodmFsdWU6IG5ldmVyKTogdm9pZCB7fVxuXG4vKipcbiAqIEZhaWwgdG8gY29tcGlsZSBvbiB1bmV4cGVjdGVkIHZhbHVlcy5cbiAqXG4gKiBhc3N1bWVFeGhhdXN0aXZlQWxsb3dpbmcgaXMgc2ltaWxhciB0byBhc3N1bWVFeGhhdXN0aXZlLCB3aXRoIG9uZSBkaWZmZXJlbmNlXG4gKiB0aGF0IHVzZXIgY2FuIHNwZWNpZnkgZXhwZWN0ZWQgdHlwZSBvZiB2YWx1ZSBvdGhlciB0aGFuICduZXZlcicuXG4gKlxuICogSXQgaXMgdXNlZnVsIHdoZW4gZW51bSBjb250YWlucyB2YWx1ZXMgdGhhdCBzaG91bGQgbmV2ZXIgb2NjdXIuIFRob3NlIHNob3VsZFxuICogYmUgcGFzc2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50IHRvIGFzc3VtZUV4aGF1c3RpdmVBbGxvd2luZy4gQSBjb21tb24gdXNlLWNhc2VcbiAqIHdvdWxkIGJlIGxpa2U6XG4gKlxuICogYGBgXG4gKiAvLyBlbnVtVmFsdWU6IEVudW0uQSB8IEVudW0uQiB8IEVudW0uVU5TUEVDSUZJRUQgfCBFbnVtLlVOS05PV05cbiAqIHN3aXRjaChlbnVtVmFsdWUpIHtcbiAqICAgY2FzZSBFbnVtLkE6XG4gKiAgICAgYnJlYWs7XG4gKiAgIGNhc2UgRW51bS5COlxuICogICAgIGJyZWFrO1xuICogICBkZWZhdWx0OlxuICogICAgIGFzc3VtZUV4aGF1c3RpdmVBbGxvd2luZzxFbnVtLlVOU1BFQ0lGSUVEfEVudW0uVU5LTk9XTj4oZW51bVZhbHVlKTtcbiAqICAgICBicmVhaztcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb25cbmFzc3VtZUV4aGF1c3RpdmVBbGxvd2luZzxBbGxvd2VkID0gbmV2ZXIsIEFyZyBleHRlbmRzIEFsbG93ZWQgPSBBbGxvd2VkPihcbiAgICB2YWx1ZTogQXJnKTogdm9pZCB7fVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/anchor.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/anchor.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.anchor');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/anchor.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * Sets the Href attribute from the given Url.
 * @param {!HTMLAnchorElement} anchor
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setHref(anchor, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        anchor.href = sanitizedUrl;
    }
}
exports.setHref = setHref;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5jaG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9lbGVtZW50cy9hbmNob3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EseUdBQXNFOzs7Ozs7O0FBS3RFLFNBQWdCLE9BQU8sQ0FBQyxNQUF5QixFQUFFLEdBQVE7O1VBQ25ELFlBQVksR0FBRyxJQUFBLG1DQUFtQixFQUFDLEdBQUcsQ0FBQztJQUM3QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsTUFBTSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7S0FDNUI7QUFDSCxDQUFDO0FBTEQsMEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7dW53cmFwVXJsT3JTYW5pdGl6ZSwgVXJsfSBmcm9tICcuLi8uLi9idWlsZGVycy91cmxfc2FuaXRpemVyJztcblxuLyoqXG4gKiBTZXRzIHRoZSBIcmVmIGF0dHJpYnV0ZSBmcm9tIHRoZSBnaXZlbiBVcmwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIcmVmKGFuY2hvcjogSFRNTEFuY2hvckVsZW1lbnQsIHVybDogVXJsKSB7XG4gIGNvbnN0IHNhbml0aXplZFVybCA9IHVud3JhcFVybE9yU2FuaXRpemUodXJsKTtcbiAgaWYgKHNhbml0aXplZFVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYW5jaG9yLmhyZWYgPSBzYW5pdGl6ZWRVcmw7XG4gIH1cbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/elements/area.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/area.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.area');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/area.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * Sets the Href attribute from the given Url.
 * @param {!HTMLAreaElement} area
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setHref(area, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        area.href = sanitizedUrl;
    }
}
exports.setHref = setHref;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZWxlbWVudHMvYXJlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSx5R0FBc0U7Ozs7Ozs7QUFLdEUsU0FBZ0IsT0FBTyxDQUFDLElBQXFCLEVBQUUsR0FBUTs7VUFDL0MsWUFBWSxHQUFHLElBQUEsbUNBQW1CLEVBQUMsR0FBRyxDQUFDO0lBQzdDLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztLQUMxQjtBQUNILENBQUM7QUFMRCwwQkFLQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHt1bndyYXBVcmxPclNhbml0aXplLCBVcmx9IGZyb20gJy4uLy4uL2J1aWxkZXJzL3VybF9zYW5pdGl6ZXInO1xuXG4vKipcbiAqIFNldHMgdGhlIEhyZWYgYXR0cmlidXRlIGZyb20gdGhlIGdpdmVuIFVybC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEhyZWYoYXJlYTogSFRNTEFyZWFFbGVtZW50LCB1cmw6IFVybCkge1xuICBjb25zdCBzYW5pdGl6ZWRVcmwgPSB1bndyYXBVcmxPclNhbml0aXplKHVybCk7XG4gIGlmIChzYW5pdGl6ZWRVcmwgIT09IHVuZGVmaW5lZCkge1xuICAgIGFyZWEuaHJlZiA9IHNhbml0aXplZFVybDtcbiAgfVxufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/base.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/base.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.base');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/base.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/**
 * Sets the Href attribute from the given TrustedResourceUrl.
 * @param {!HTMLBaseElement} baseEl
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} url
 * @return {void}
 */
function setHref(baseEl, url) {
    baseEl.href = (/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(url)));
}
exports.setHref = setHref;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZWxlbWVudHMvYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLGtIQUF3Rjs7Ozs7OztBQUt4RixTQUFnQixPQUFPLENBQUMsTUFBdUIsRUFBRSxHQUF1QjtJQUN0RSxNQUFNLENBQUMsSUFBSSxHQUFHLHdCQUFBLElBQUEscUNBQWlCLEVBQUMsR0FBRyxDQUFDLEVBQVUsQ0FBQztBQUNqRCxDQUFDO0FBRkQsMEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7VHJ1c3RlZFJlc291cmNlVXJsLCB1bndyYXBSZXNvdXJjZVVybH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL3Jlc291cmNlX3VybF9pbXBsJztcblxuLyoqXG4gKiBTZXRzIHRoZSBIcmVmIGF0dHJpYnV0ZSBmcm9tIHRoZSBnaXZlbiBUcnVzdGVkUmVzb3VyY2VVcmwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIcmVmKGJhc2VFbDogSFRNTEJhc2VFbGVtZW50LCB1cmw6IFRydXN0ZWRSZXNvdXJjZVVybCkge1xuICBiYXNlRWwuaHJlZiA9IHVud3JhcFJlc291cmNlVXJsKHVybCkgYXMgc3RyaW5nO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/button.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/button.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.button');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/button.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * Sets the Formaction attribute from the given Url.
 * @param {!HTMLButtonElement} button
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setFormaction(button, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        button.formAction = sanitizedUrl;
    }
}
exports.setFormaction = setFormaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9lbGVtZW50cy9idXR0b24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EseUdBQXNFOzs7Ozs7O0FBS3RFLFNBQWdCLGFBQWEsQ0FBQyxNQUF5QixFQUFFLEdBQVE7O1VBQ3pELFlBQVksR0FBRyxJQUFBLG1DQUFtQixFQUFDLEdBQUcsQ0FBQztJQUM3QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsTUFBTSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUM7S0FDbEM7QUFDSCxDQUFDO0FBTEQsc0NBS0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7dW53cmFwVXJsT3JTYW5pdGl6ZSwgVXJsfSBmcm9tICcuLi8uLi9idWlsZGVycy91cmxfc2FuaXRpemVyJztcblxuLyoqXG4gKiBTZXRzIHRoZSBGb3JtYWN0aW9uIGF0dHJpYnV0ZSBmcm9tIHRoZSBnaXZlbiBVcmwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRGb3JtYWN0aW9uKGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQsIHVybDogVXJsKSB7XG4gIGNvbnN0IHNhbml0aXplZFVybCA9IHVud3JhcFVybE9yU2FuaXRpemUodXJsKTtcbiAgaWYgKHNhbml0aXplZFVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgYnV0dG9uLmZvcm1BY3Rpb24gPSBzYW5pdGl6ZWRVcmw7XG4gIH1cbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/elements/element.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview This contains safe wrappers for properties that aren't specific
 * to one kind of HTMLElement (like innerHTML), plus other setters and functions
 * that are not tied to elements (like location.href or Worker constructor).
 *
 * Generated from: third_party/javascript/safevalues/dom/elements/element.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.element');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/element.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_attribute_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.attribute_impl");
const tsickle_html_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_style_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_impl");
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const attribute_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.attribute_impl');
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
const style_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_impl'); // LINE-INTERNAL
// LINE-INTERNAL
/**
 * Safely set {\@link Element.innerHTML} on a given ShadowRoot or Element which
 * may not be a `<script>` element or a `<style>` element.
 * @template T
 * @param {?} elOrRoot
 * @param {!tsickle_html_impl_3.SafeHtml} v
 * @return {void}
 */
function setInnerHtml(elOrRoot, v) {
    if (isElement(elOrRoot)) {
        throwIfScriptOrStyle(elOrRoot);
    }
    (/** @type {(!Element|!ShadowRoot)} */ (elOrRoot)).innerHTML = (/** @type {string} */ ((0, html_impl_1.unwrapHtml)(v)));
}
exports.setInnerHtml = setInnerHtml;
/**
 * Safely set {\@link Element.outerHTML} for the given Element.
 * @param {!Element} e
 * @param {!tsickle_html_impl_3.SafeHtml} v
 * @return {void}
 */
function setOuterHtml(e, v) {
    /** @type {(null|!HTMLElement)} */
    const parent = e.parentElement;
    if (parent !== null) {
        throwIfScriptOrStyle(parent);
    }
    e.outerHTML = (/** @type {string} */ ((0, html_impl_1.unwrapHtml)(v)));
}
exports.setOuterHtml = setOuterHtml;
// BEGIN-INTERNAL
/**
 * Set `ElementCSSInlineStyle.cssText` for the given `ElementCSSInlineStyle`.
 * @param {!ElementCSSInlineStyle} e
 * @param {!tsickle_style_impl_4.SafeStyle} v
 * @return {void}
 */
function setCssText(e, v) {
    e.style.cssText = (0, style_impl_1.unwrapStyle)(v);
}
exports.setCssText = setCssText;
// END-INTERNAL
/**
 * Safely call {\@link Element.insertAdjacentHTML} for the given Element.
 * @template T
 * @param {?} element
 * @param {string} position
 * @param {!tsickle_html_impl_3.SafeHtml} v
 * @return {void}
 */
function insertAdjacentHtml(element, position, v) {
    /** @type {(null|!HTMLElement|?)} */
    const tagContext = (position === 'beforebegin' || position === 'afterend') ?
        element.parentElement :
        element;
    if (tagContext !== null) {
        throwIfScriptOrStyle(tagContext);
    }
    element.insertAdjacentHTML(position, (/** @type {string} */ ((0, html_impl_1.unwrapHtml)(v))));
}
exports.insertAdjacentHtml = insertAdjacentHtml;
/**
 * Given a set of known-to-be-safe prefixes (e.g., "data-", "aria-", "js"),
 * return a setter function that allows you to set attributes on an element,
 * as long as the names of the attributes to be set has one of the prefixes.
 *
 * The returned setter ensures that setting any dangerous attribute, e.g.,
 * "src", "href" will cause an exception. This is intended to be used as the
 * safe alterantive of `Element#setAttribute`, when applications need to set
 * attributes that do not have security implications and do not have a
 * corresponding DOM property.
 * @param {!tsickle_attribute_impl_2.SafeAttributePrefix} prefix
 * @param {...!tsickle_attribute_impl_2.SafeAttributePrefix} otherPrefixes
 * @return {function(!Element, string, string): void}
 */
function buildPrefixedAttributeSetter(prefix, ...otherPrefixes) {
    /** @type {!Array<!tsickle_attribute_impl_2.SafeAttributePrefix>} */
    const prefixes = [prefix, ...otherPrefixes];
    return (/**
     * @param {!Element} e
     * @param {string} attr
     * @param {string} value
     * @return {void}
     */
    (e, attr, value) => {
        setPrefixedAttribute(prefixes, e, attr, value);
    });
}
exports.buildPrefixedAttributeSetter = buildPrefixedAttributeSetter;
/**
 * The safe alternative to Element#setAttribute. The function takes a list of
 * `SafeAttributePrefix`, making developer intention explicit. The attribute
 * to be set must has one of the safe prefixes, otherwise the function throws
 * an Error.
 * @param {!ReadonlyArray<!tsickle_attribute_impl_2.SafeAttributePrefix>} attrPrefixes
 * @param {!Element} e
 * @param {string} attr
 * @param {string} value
 * @return {void}
 */
function setPrefixedAttribute(attrPrefixes, e, attr, value) {
    if (attrPrefixes.length === 0) {
        /** @type {string} */
        let message = '';
        if (dev_1.DEV_MODE) {
            message = 'No prefixes are provided';
        }
        throw new Error(message);
    }
    /** @type {!Array<string>} */
    const prefixes = attrPrefixes.map((/**
     * @param {!tsickle_attribute_impl_2.SafeAttributePrefix} s
     * @return {string}
     */
    s => (0, attribute_impl_1.unwrapAttributePrefix)(s)));
    /** @type {string} */
    const attrLower = attr.toLowerCase();
    if (prefixes.every((/**
     * @param {string} p
     * @return {boolean}
     */
    p => attrLower.indexOf(p) !== 0))) {
        throw new Error(`Attribute "${attr}" does not match any of the allowed prefixes.`);
    }
    e.setAttribute(attr, value);
}
exports.setPrefixedAttribute = setPrefixedAttribute;
/**
 * @param {!Element} element
 * @return {void}
 */
function throwIfScriptOrStyle(element) {
    /** @type {string} */
    let message = '';
    /** @type {string} */
    const tagName = element.tagName;
    if (tagName === 'SCRIPT' || tagName === 'STYLE') {
        if (dev_1.DEV_MODE) {
            if (tagName === 'SCRIPT') {
                message = 'Use safeScriptEl.setTextContent with a SafeScript.';
            }
            else {
                message = 'Use safeStyleEl.setTextContent with a SafeStyleSheet.';
            }
        }
        throw new Error(message);
    }
}
/**
 * @param {(!Element|!ShadowRoot)} elOrRoot
 * @return {boolean}
 */
function isElement(elOrRoot) {
    return elOrRoot.nodeType === 1; // Node.ELEMENT_NODE
}
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/dom/elements/embed.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/embed.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.embed');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/embed.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/**
 * Sets the Src attribute from the given SafeUrl.
 * @param {!HTMLEmbedElement} embedEl
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} url
 * @return {void}
 */
function setSrc(embedEl, url) {
    embedEl.src = (/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(url)));
}
exports.setSrc = setSrc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2VsZW1lbnRzL2VtYmVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esa0hBQXdGOzs7Ozs7O0FBS3hGLFNBQWdCLE1BQU0sQ0FBQyxPQUF5QixFQUFFLEdBQXVCO0lBQ3ZFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsd0JBQUEsSUFBQSxxQ0FBaUIsRUFBQyxHQUFHLENBQUMsRUFBVSxDQUFDO0FBQ2pELENBQUM7QUFGRCx3QkFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtUcnVzdGVkUmVzb3VyY2VVcmwsIHVud3JhcFJlc291cmNlVXJsfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvcmVzb3VyY2VfdXJsX2ltcGwnO1xuXG4vKipcbiAqIFNldHMgdGhlIFNyYyBhdHRyaWJ1dGUgZnJvbSB0aGUgZ2l2ZW4gU2FmZVVybC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNyYyhlbWJlZEVsOiBIVE1MRW1iZWRFbGVtZW50LCB1cmw6IFRydXN0ZWRSZXNvdXJjZVVybCkge1xuICBlbWJlZEVsLnNyYyA9IHVud3JhcFJlc291cmNlVXJsKHVybCkgYXMgc3RyaW5nO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/form.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/form.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.form');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/form.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * Sets the Action attribute from the given Url.
 * @param {!HTMLFormElement} form
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setAction(form, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        form.action = sanitizedUrl;
    }
}
exports.setAction = setAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZWxlbWVudHMvZm9ybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSx5R0FBc0U7Ozs7Ozs7QUFLdEUsU0FBZ0IsU0FBUyxDQUFDLElBQXFCLEVBQUUsR0FBUTs7VUFDakQsWUFBWSxHQUFHLElBQUEsbUNBQW1CLEVBQUMsR0FBRyxDQUFDO0lBQzdDLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztLQUM1QjtBQUNILENBQUM7QUFMRCw4QkFLQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHt1bndyYXBVcmxPclNhbml0aXplLCBVcmx9IGZyb20gJy4uLy4uL2J1aWxkZXJzL3VybF9zYW5pdGl6ZXInO1xuXG4vKipcbiAqIFNldHMgdGhlIEFjdGlvbiBhdHRyaWJ1dGUgZnJvbSB0aGUgZ2l2ZW4gVXJsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aW9uKGZvcm06IEhUTUxGb3JtRWxlbWVudCwgdXJsOiBVcmwpIHtcbiAgY29uc3Qgc2FuaXRpemVkVXJsID0gdW53cmFwVXJsT3JTYW5pdGl6ZSh1cmwpO1xuICBpZiAoc2FuaXRpemVkVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICBmb3JtLmFjdGlvbiA9IHNhbml0aXplZFVybDtcbiAgfVxufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/iframe.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview Safe iframe helpers and go/intents-for-iframes-for-closure
 *
 * Generated from: third_party/javascript/safevalues/dom/elements/iframe.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.iframe');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/iframe.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_check_1 = goog.requireType("google3.javascript.typescript.contrib.check");
const tsickle_url_sanitizer_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_html_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_resource_url_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_SafeUrl_5 = goog.requireType("goog.html.SafeUrl");
const check_1 = goog.require('google3.javascript.typescript.contrib.check'); // LINE-INTERNAL
// LINE-INTERNAL
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer'); // LINE-INTERNAL
// LINE-INTERNAL
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const html_impl_2 = html_impl_1; // LINE-INTERNAL
// LINE-INTERNAL
/**
 * Sets the Src attribute using a TrustedResourceUrl
 * @param {!HTMLIFrameElement} iframe
 * @param {!tsickle_resource_url_impl_4.TrustedResourceUrl} v
 * @return {void}
 */
function setSrc(iframe, v) {
    iframe.src = (0, resource_url_impl_1.unwrapResourceUrl)(v).toString();
}
exports.setSrc = setSrc;
/**
 * Sets the Srcdoc attribute using a SafeHtml
 * @param {!HTMLIFrameElement} iframe
 * @param {!tsickle_html_impl_3.SafeHtml} v
 * @return {void}
 */
function setSrcdoc(iframe, v) {
    iframe.srcdoc = (/** @type {string} */ ((0, html_impl_1.unwrapHtml)(v)));
}
exports.setSrcdoc = setSrcdoc;
/**
 * Intent is an enum of 'embed intents' -- reasons to embed some content that
 * are used for security defaults.
 *
 * @see http://go/iframe-intents
 * @enum {number}
 */
const Intent = {
    /**
     * Rich-text like content formatted with HTML tags, but which does not need to
     * run scripts, forms or other potentially dangerous non-formatting content.
     *
     * Example: a license agreement.
     */
    FORMATTED_HTML_CONTENT: 0,
    /**
     * @deprecated Due to b/277904676 this intent does not set the sandbox
     *     properly, use `FORMATTED_HTML_CONTENT` instead.
     */
    HTML_FORMATTED_CONTENT: 1,
    /**
     * Embed some content created by Google and its employees.
     *
     * Example: a widget to display some content in our app.
     */
    EMBEDDED_INTERNAL_CONTENT: 2,
    /**
     * Trusted content created outside of Google.
     *
     * Example: a checkin widget for a partner airline
     */
    EMBEDDED_TRUSTED_EXTERNAL_CONTENT: 3,
};
exports.Intent = Intent;
Intent[Intent.FORMATTED_HTML_CONTENT] = 'FORMATTED_HTML_CONTENT';
Intent[Intent.HTML_FORMATTED_CONTENT] = 'HTML_FORMATTED_CONTENT';
Intent[Intent.EMBEDDED_INTERNAL_CONTENT] = 'EMBEDDED_INTERNAL_CONTENT';
Intent[Intent.EMBEDDED_TRUSTED_EXTERNAL_CONTENT] = 'EMBEDDED_TRUSTED_EXTERNAL_CONTENT';
/** @enum {string} */
const SandboxDirective = {
    ALLOW_SAME_ORIGIN: "allow-same-origin",
    ALLOW_SCRIPTS: "allow-scripts",
    ALLOW_FORMS: "allow-forms",
    ALLOW_POPUPS: "allow-popups",
    ALLOW_POPUPS_TO_ESCAPE_SANDBOX: "allow-popups-to-escape-sandbox",
    ALLOW_STORAGE_ACCESS_BY_USER_ACTIVATION: "allow-storage-access-by-user-activation",
};
/**
 * setSandboxDirectives sets the given sandbox directives on the given iframe.
 * Deletes any existing directives.
 * @param {!HTMLIFrameElement} ifr iframe element.
 * @param {!ReadonlyArray<!SandboxDirective>} directives list of directives to set
 * @param {boolean=} legacyResetBehaviour Use old behaviour which causes b/277904676
 * @return {void} void.
 */
function setSandboxDirectives(ifr, directives, legacyResetBehaviour = false) {
    if (legacyResetBehaviour) {
        // DOMTokenList.add() has a variadic form, i.e.
        // DOMTokenList.add('allow-same-origin', 'allow-scripts') in all browsers
        // but IE10. This can be reduced to i.sandbox.add(...directives) /
        // i.sandbox.remove(...directives) if IE10 support is ever dropped.
        while (ifr.sandbox.length > 0) {
            ifr.sandbox.remove((/** @type {string} */ (ifr.sandbox.item(0))));
        }
    }
    else {
        ifr.setAttribute('sandbox', '');
    }
    // Cannot be a for..of loop due to GWS conformance rule:
    // go/gws-inline-js-conformance#heading=h.cecxx7mh5dc5
    for (let i = 0; i < directives.length; i++) {
        if (!(ifr.sandbox.supports) || ifr.sandbox.supports(directives[i])) {
            ifr.sandbox.add(directives[i]);
        }
    }
}
/**
 * TypeCannotBeUsedWithIntentError is a type of {\@link Error} that is returned
 * when
 * {\@link setSrcWithIntent} or {\@link setSrcdocWithIntent} is called
 * with parameters of the wrong type.
 * @extends {Error}
 */
class TypeCannotBeUsedWithIntentError extends Error {
    /**
     * @public
     * @param {string} type
     * @param {!Intent} intent
     */
    constructor(type, intent) {
        super(`${type} cannot be used with intent ${Intent[intent]}`);
        this.type = type;
        this.intent = intent;
        this.name = 'TypeCannotBeUsedWithIntentError';
    }
}
exports.TypeCannotBeUsedWithIntentError = TypeCannotBeUsedWithIntentError;
/* istanbul ignore if */
if (false) {
    /**
     * @type {string}
     * @public
     */
    TypeCannotBeUsedWithIntentError.prototype.name;
    /**
     * @type {string}
     * @public
     */
    TypeCannotBeUsedWithIntentError.prototype.type;
    /**
     * @type {!Intent}
     * @public
     */
    TypeCannotBeUsedWithIntentError.prototype.intent;
}
/**
 * @param {!HTMLIFrameElement} element
 * @param {!Intent} intent
 * @param {(string|!tsickle_SafeUrl_5|!tsickle_resource_url_impl_4.TrustedResourceUrl)} src
 * @return {void}
 */
function setSrcWithIntent(element, intent, src) {
    // if srcdoc was already set, unset it to prevent using an src policy with
    // an srcdoc
    element.removeAttribute('srcdoc');
    switch (intent) {
        case Intent.FORMATTED_HTML_CONTENT: {
            if (src instanceof resource_url_impl_1.TrustedResourceUrl) {
                throw new TypeCannotBeUsedWithIntentError('TrustedResourceUrl', Intent.FORMATTED_HTML_CONTENT);
            }
            setSandboxDirectives(element, []);
            /** @type {(undefined|string)} */
            const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(src);
            if (sanitizedUrl !== undefined) {
                element.src = sanitizedUrl;
            }
            return;
        }
        case Intent.HTML_FORMATTED_CONTENT: {
            if (src instanceof resource_url_impl_1.TrustedResourceUrl) {
                throw new TypeCannotBeUsedWithIntentError('TrustedResourceUrl', Intent.HTML_FORMATTED_CONTENT);
            }
            setSandboxDirectives(element, [], /* legacyResetBehaviour */ true);
            /** @type {(undefined|string)} */
            const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(src);
            if (sanitizedUrl !== undefined) {
                element.src = sanitizedUrl;
            }
            return;
        }
        case Intent.EMBEDDED_INTERNAL_CONTENT: {
            if (!(src instanceof resource_url_impl_1.TrustedResourceUrl)) {
                throw new TypeCannotBeUsedWithIntentError(typeof src, Intent.EMBEDDED_INTERNAL_CONTENT);
            }
            setSandboxDirectives(element, [
                SandboxDirective.ALLOW_SAME_ORIGIN,
                SandboxDirective.ALLOW_SCRIPTS,
                SandboxDirective.ALLOW_FORMS,
                SandboxDirective.ALLOW_POPUPS,
                SandboxDirective.ALLOW_POPUPS_TO_ESCAPE_SANDBOX,
                SandboxDirective.ALLOW_STORAGE_ACCESS_BY_USER_ACTIVATION,
            ]);
            setSrc(element, src);
            return;
        }
        case Intent.EMBEDDED_TRUSTED_EXTERNAL_CONTENT: {
            if (src instanceof resource_url_impl_1.TrustedResourceUrl) {
                throw new TypeCannotBeUsedWithIntentError('TrustedResourceUrl', Intent.EMBEDDED_TRUSTED_EXTERNAL_CONTENT);
            }
            setSandboxDirectives(element, [
                SandboxDirective.ALLOW_SAME_ORIGIN,
                SandboxDirective.ALLOW_SCRIPTS,
                SandboxDirective.ALLOW_FORMS,
                SandboxDirective.ALLOW_POPUPS,
                SandboxDirective.ALLOW_POPUPS_TO_ESCAPE_SANDBOX,
                SandboxDirective.ALLOW_STORAGE_ACCESS_BY_USER_ACTIVATION,
            ]);
            /** @type {(undefined|string)} */
            const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(src);
            if (sanitizedUrl !== undefined) {
                element.src = sanitizedUrl;
            }
            return;
        }
        default:
            (0, check_1.checkExhaustive)(intent);
    }
}
exports.setSrcWithIntent = setSrcWithIntent;
/**
 * @param {!HTMLIFrameElement} element
 * @param {!Intent} intent
 * @param {(string|!tsickle_html_impl_3.SafeHtml)} srcdoc
 * @return {void}
 */
function setSrcdocWithIntent(element, intent, srcdoc) {
    // if src was already set, unset it to prevent using an src policy with an
    // srcdoc
    element.removeAttribute('src');
    switch (intent) {
        case Intent.FORMATTED_HTML_CONTENT: {
            if (srcdoc instanceof html_impl_1.SafeHtml) {
                throw new TypeCannotBeUsedWithIntentError('SafeHtml', Intent.FORMATTED_HTML_CONTENT);
            }
            // type assertion required as declare global syntax is pollutive in
            // google3 at the time of writing.
            ((/** @type {?} */ (element))).csp =
                'default-src \'none\'';
            setSandboxDirectives(element, []);
            setSrcdoc(element, (0, html_impl_2.createHtmlInternal)(srcdoc));
            return;
        }
        case Intent.HTML_FORMATTED_CONTENT: {
            if (srcdoc instanceof html_impl_1.SafeHtml) {
                throw new TypeCannotBeUsedWithIntentError('SafeHtml', Intent.HTML_FORMATTED_CONTENT);
            }
            // type assertion required as declare global syntax is pollutive in
            // google3 at the time of writing.
            ((/** @type {?} */ (element))).csp =
                'default-src \'none\'';
            setSandboxDirectives(element, [], /* legacyResetBehaviour */ true);
            setSrcdoc(element, (0, html_impl_2.createHtmlInternal)(srcdoc));
            return;
        }
        case Intent.EMBEDDED_INTERNAL_CONTENT: {
            if (!(srcdoc instanceof html_impl_1.SafeHtml)) {
                throw new TypeCannotBeUsedWithIntentError('string', Intent.EMBEDDED_INTERNAL_CONTENT);
            }
            setSandboxDirectives(element, [
                SandboxDirective.ALLOW_SAME_ORIGIN,
                SandboxDirective.ALLOW_SCRIPTS,
                SandboxDirective.ALLOW_FORMS,
                SandboxDirective.ALLOW_POPUPS,
                SandboxDirective.ALLOW_POPUPS_TO_ESCAPE_SANDBOX,
                SandboxDirective.ALLOW_STORAGE_ACCESS_BY_USER_ACTIVATION,
            ]);
            setSrcdoc(element, srcdoc);
            return;
        }
        case Intent.EMBEDDED_TRUSTED_EXTERNAL_CONTENT: {
            if (srcdoc instanceof html_impl_1.SafeHtml) {
                throw new TypeCannotBeUsedWithIntentError('SafeHtml', Intent.EMBEDDED_INTERNAL_CONTENT);
            }
            setSandboxDirectives(element, [
                SandboxDirective.ALLOW_SCRIPTS,
                SandboxDirective.ALLOW_FORMS,
                SandboxDirective.ALLOW_POPUPS,
                SandboxDirective.ALLOW_POPUPS_TO_ESCAPE_SANDBOX,
                SandboxDirective.ALLOW_STORAGE_ACCESS_BY_USER_ACTIVATION,
            ]);
            setSrcdoc(element, (0, html_impl_2.createHtmlInternal)(srcdoc));
            return;
        }
        default:
            (0, check_1.checkExhaustive)(intent);
    }
}
exports.setSrcdocWithIntent = setSrcdocWithIntent;
//# sourceMappingURL=data:application/json;base64,
;return exports;});

//third_party/javascript/safevalues/dom/elements/input.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/input.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.input');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/input.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * Sets the Formaction attribute from the given Url.
 * @param {!HTMLInputElement} input
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setFormaction(input, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        input.formAction = sanitizedUrl;
    }
}
exports.setFormaction = setFormaction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2VsZW1lbnRzL2lucHV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHlHQUFzRTs7Ozs7OztBQUt0RSxTQUFnQixhQUFhLENBQUMsS0FBdUIsRUFBRSxHQUFROztVQUN2RCxZQUFZLEdBQUcsSUFBQSxtQ0FBbUIsRUFBQyxHQUFHLENBQUM7SUFDN0MsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLEtBQUssQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDO0tBQ2pDO0FBQ0gsQ0FBQztBQUxELHNDQUtDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge3Vud3JhcFVybE9yU2FuaXRpemUsIFVybH0gZnJvbSAnLi4vLi4vYnVpbGRlcnMvdXJsX3Nhbml0aXplcic7XG5cbi8qKlxuICogU2V0cyB0aGUgRm9ybWFjdGlvbiBhdHRyaWJ1dGUgZnJvbSB0aGUgZ2l2ZW4gVXJsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Rm9ybWFjdGlvbihpbnB1dDogSFRNTElucHV0RWxlbWVudCwgdXJsOiBVcmwpIHtcbiAgY29uc3Qgc2FuaXRpemVkVXJsID0gdW53cmFwVXJsT3JTYW5pdGl6ZSh1cmwpO1xuICBpZiAoc2FuaXRpemVkVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpbnB1dC5mb3JtQWN0aW9uID0gc2FuaXRpemVkVXJsO1xuICB9XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/elements/link.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/link.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.link');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/link.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_resource_url_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_SafeUrl_3 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/* Values from google3/webutil/html/types/codegen/html5_contract.textpb */ 
// LINE-INTERNAL
/** @type {!Array<?>} */
const SAFE_URL_REL_VALUES = (/** @type {!Array<?>} */ ([
    'alternate',
    'author',
    'bookmark',
    'canonical',
    'cite',
    'help',
    'icon',
    'license',
    'next',
    'prefetch',
    'dns-prefetch',
    'prerender',
    'preconnect',
    'preload',
    'prev',
    'search',
    'subresource',
]));
/**
 * Values of the "rel" attribute when "href" should accept `SafeUrl` instead of
 * `TrustedResourceUrl`.
 * @typedef {string}
 */
exports.SafeUrlRelTypes;
/**
 * Values of the "rel" attribute when "href" should accept a
 * `TrustedResourceUrl`. Note that this list is not exhaustive and is here just
 * for better documentation, any unknown "rel" values will also require passing
 * a `TrustedResourceUrl` "href".
 * @typedef {string}
 */
exports.TrustedResourecUrlRelTypes;
/**
 * @param {!HTMLLinkElement} link
 * @param {(string|!tsickle_SafeUrl_3|!tsickle_resource_url_impl_2.TrustedResourceUrl)} url
 * @param {string} rel
 * @return {void}
 */
function setHrefAndRel(link, url, rel) {
    if ((0, resource_url_impl_1.isResourceUrl)(url)) {
        link.href = (0, resource_url_impl_1.unwrapResourceUrl)(url).toString();
    }
    else {
        if (((/** @type {!ReadonlyArray<string>} */ (SAFE_URL_REL_VALUES))).indexOf(rel) === -1) {
            throw new Error(`TrustedResourceUrl href attribute required with rel="${rel}"`);
        }
        /** @type {(undefined|string)} */
        const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
        if (sanitizedUrl === undefined) {
            return;
        }
        link.href = sanitizedUrl;
    }
    link.rel = rel;
}
exports.setHrefAndRel = setHrefAndRel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZWxlbWVudHMvbGluay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EseUdBQXNFO0FBQ3RFLGtIQUF1Rzs7OztNQUdqRyxtQkFBbUIsR0FBRywyQkFBQTtJQUMxQixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsY0FBYztJQUNkLFdBQVc7SUFDWCxZQUFZO0lBQ1osU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsYUFBYTtDQUNkLEVBQVM7Ozs7OztBQU1WLHdCQUFpRTs7Ozs7Ozs7QUFRakUsbUNBQWlFOzs7Ozs7O0FBdUJqRSxTQUFnQixhQUFhLENBQ3pCLElBQXFCLEVBQUUsR0FBMkIsRUFBRSxHQUFXO0lBQ2pFLElBQUksSUFBQSxpQ0FBYSxFQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBQSxxQ0FBaUIsRUFBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMvQztTQUFNO1FBQ0wsSUFBSSxDQUFDLHdDQUFBLG1CQUFtQixFQUFxQixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQ1gsd0RBQXdELEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDckU7O2NBQ0ssWUFBWSxHQUFHLElBQUEsbUNBQW1CLEVBQUMsR0FBRyxDQUFDO1FBQzdDLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUM5QixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztLQUMxQjtJQUNELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLENBQUM7QUFoQkQsc0NBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge3Vud3JhcFVybE9yU2FuaXRpemUsIFVybH0gZnJvbSAnLi4vLi4vYnVpbGRlcnMvdXJsX3Nhbml0aXplcic7XG5pbXBvcnQge2lzUmVzb3VyY2VVcmwsIFRydXN0ZWRSZXNvdXJjZVVybCwgdW53cmFwUmVzb3VyY2VVcmx9IGZyb20gJy4uLy4uL2ludGVybmFscy9yZXNvdXJjZV91cmxfaW1wbCc7XG5cbi8qIFZhbHVlcyBmcm9tIGdvb2dsZTMvd2VidXRpbC9odG1sL3R5cGVzL2NvZGVnZW4vaHRtbDVfY29udHJhY3QudGV4dHBiICovICAvLyBMSU5FLUlOVEVSTkFMXG5jb25zdCBTQUZFX1VSTF9SRUxfVkFMVUVTID0gW1xuICAnYWx0ZXJuYXRlJyxcbiAgJ2F1dGhvcicsXG4gICdib29rbWFyaycsXG4gICdjYW5vbmljYWwnLFxuICAnY2l0ZScsXG4gICdoZWxwJyxcbiAgJ2ljb24nLFxuICAnbGljZW5zZScsXG4gICduZXh0JyxcbiAgJ3ByZWZldGNoJyxcbiAgJ2Rucy1wcmVmZXRjaCcsXG4gICdwcmVyZW5kZXInLFxuICAncHJlY29ubmVjdCcsXG4gICdwcmVsb2FkJyxcbiAgJ3ByZXYnLFxuICAnc2VhcmNoJyxcbiAgJ3N1YnJlc291cmNlJyxcbl0gYXMgY29uc3Q7XG5cbi8qKlxuICogVmFsdWVzIG9mIHRoZSBcInJlbFwiIGF0dHJpYnV0ZSB3aGVuIFwiaHJlZlwiIHNob3VsZCBhY2NlcHQgYFNhZmVVcmxgIGluc3RlYWQgb2ZcbiAqIGBUcnVzdGVkUmVzb3VyY2VVcmxgLlxuICovXG5leHBvcnQgdHlwZSBTYWZlVXJsUmVsVHlwZXMgPSB0eXBlb2YgU0FGRV9VUkxfUkVMX1ZBTFVFU1tudW1iZXJdO1xuXG4vKipcbiAqIFZhbHVlcyBvZiB0aGUgXCJyZWxcIiBhdHRyaWJ1dGUgd2hlbiBcImhyZWZcIiBzaG91bGQgYWNjZXB0IGFcbiAqIGBUcnVzdGVkUmVzb3VyY2VVcmxgLiBOb3RlIHRoYXQgdGhpcyBsaXN0IGlzIG5vdCBleGhhdXN0aXZlIGFuZCBpcyBoZXJlIGp1c3RcbiAqIGZvciBiZXR0ZXIgZG9jdW1lbnRhdGlvbiwgYW55IHVua25vd24gXCJyZWxcIiB2YWx1ZXMgd2lsbCBhbHNvIHJlcXVpcmUgcGFzc2luZ1xuICogYSBgVHJ1c3RlZFJlc291cmNlVXJsYCBcImhyZWZcIi5cbiAqL1xuZXhwb3J0IHR5cGUgVHJ1c3RlZFJlc291cmVjVXJsUmVsVHlwZXMgPSAnc3R5bGVzaGVldCd8J21hbmlmZXN0JztcblxuLyoqXG4gKiBTYWZlbHkgc2V0cyBhIGxpbmsgZWxlbWVudCdzIFwiaHJlZlwiIHByb3BlcnR5IHVzaW5nIGEgc2Vuc2l0aXZlIFwicmVsXCIgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIcmVmQW5kUmVsKFxuICAgIGxpbms6IEhUTUxMaW5rRWxlbWVudCwgdXJsOiBUcnVzdGVkUmVzb3VyY2VVcmwsXG4gICAgcmVsOiBUcnVzdGVkUmVzb3VyZWNVcmxSZWxUeXBlcyk6IHZvaWQ7XG5cbi8qKlxuICogU2FmZWx5IHNldHMgYSBsaW5rIGVsZW1lbnQncyBcImhyZWZcIiBwcm9wZXJ0eSB1c2luZyBhIG5vbi1zZW5zaXRpdmUgXCJyZWxcIlxuICogdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRIcmVmQW5kUmVsKFxuICAgIGxpbms6IEhUTUxMaW5rRWxlbWVudCwgdXJsOiBVcmwsIHJlbDogU2FmZVVybFJlbFR5cGVzKTogdm9pZDtcblxuLyoqXG4gKiBTYWZlbHkgc2V0cyBhIGxpbmsgZWxlbWVudCdzIFwiaHJlZlwiIHByb3BlcnR5IHVzaW5nIGFuIGFyYml0cmFyeSBcInJlbFwiXG4gKiB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEhyZWZBbmRSZWwoXG4gICAgbGluazogSFRNTExpbmtFbGVtZW50LCB1cmw6IFRydXN0ZWRSZXNvdXJjZVVybCwgcmVsOiBzdHJpbmcpOiB2b2lkO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0SHJlZkFuZFJlbChcbiAgICBsaW5rOiBIVE1MTGlua0VsZW1lbnQsIHVybDogVHJ1c3RlZFJlc291cmNlVXJsfFVybCwgcmVsOiBzdHJpbmcpIHtcbiAgaWYgKGlzUmVzb3VyY2VVcmwodXJsKSkge1xuICAgIGxpbmsuaHJlZiA9IHVud3JhcFJlc291cmNlVXJsKHVybCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKFNBRkVfVVJMX1JFTF9WQUxVRVMgYXMgcmVhZG9ubHkgc3RyaW5nW10pLmluZGV4T2YocmVsKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgVHJ1c3RlZFJlc291cmNlVXJsIGhyZWYgYXR0cmlidXRlIHJlcXVpcmVkIHdpdGggcmVsPVwiJHtyZWx9XCJgKTtcbiAgICB9XG4gICAgY29uc3Qgc2FuaXRpemVkVXJsID0gdW53cmFwVXJsT3JTYW5pdGl6ZSh1cmwpO1xuICAgIGlmIChzYW5pdGl6ZWRVcmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsaW5rLmhyZWYgPSBzYW5pdGl6ZWRVcmw7XG4gIH1cbiAgbGluay5yZWwgPSByZWw7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/elements/object.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/object.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.object');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/object.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/**
 * Sets the data attribute using a TrustedResourceUrl
 * @param {!HTMLObjectElement} obj
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} v
 * @return {void}
 */
function setData(obj, v) {
    obj.data = (/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(v)));
}
exports.setData = setData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9lbGVtZW50cy9vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxrSEFBd0Y7Ozs7Ozs7QUFHeEYsU0FBZ0IsT0FBTyxDQUFDLEdBQXNCLEVBQUUsQ0FBcUI7SUFDbkUsR0FBRyxDQUFDLElBQUksR0FBRyx3QkFBQSxJQUFBLHFDQUFpQixFQUFDLENBQUMsQ0FBQyxFQUFVLENBQUM7QUFDNUMsQ0FBQztBQUZELDBCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1RydXN0ZWRSZXNvdXJjZVVybCwgdW53cmFwUmVzb3VyY2VVcmx9IGZyb20gJy4uLy4uL2ludGVybmFscy9yZXNvdXJjZV91cmxfaW1wbCc7XG5cbi8qKiBTZXRzIHRoZSBkYXRhIGF0dHJpYnV0ZSB1c2luZyBhIFRydXN0ZWRSZXNvdXJjZVVybCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldERhdGEob2JqOiBIVE1MT2JqZWN0RWxlbWVudCwgdjogVHJ1c3RlZFJlc291cmNlVXJsKSB7XG4gIG9iai5kYXRhID0gdW53cmFwUmVzb3VyY2VVcmwodikgYXMgc3RyaW5nO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/elements/script.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/script.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.script');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/script.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_script_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
/**
 * Returns CSP nonce, if set for any script tag.
 * @param {!Window} win
 * @return {string}
 */
function getScriptNonceFromWindow(win) {
    /** @type {!Document} */
    const doc = win.document;
    // document.querySelector can be undefined in non-browser environments.
    /** @type {(null|!HTMLScriptElement)} */
    const script = doc.querySelector?.('script[nonce]');
    if (script) {
        // Try to get the nonce from the IDL property first, because browsers that
        // implement additional nonce protection features (currently only Chrome) to
        // prevent nonce stealing via CSS do not expose the nonce via attributes.
        // See https://github.com/whatwg/html/issues/2369
        return script['nonce'] || script.getAttribute('nonce') || '';
    }
    return '';
}
/**
 * Propagates CSP nonce to dynamically created scripts.
 * @param {!HTMLScriptElement} script
 * @return {void}
 */
function setNonceForScriptElement(script) {
    /** @type {(null|?)} */
    const win = script.ownerDocument && script.ownerDocument.defaultView;
    /** @type {string} */
    const nonce = getScriptNonceFromWindow(win || window);
    if (nonce) {
        script.setAttribute('nonce', nonce);
    }
}
/**
 * Sets textContent from the given SafeScript.
 * @param {!HTMLScriptElement} script
 * @param {!tsickle_script_impl_2.SafeScript} v
 * @param {(undefined|{omitNonce: (undefined|boolean)})=} options
 * @return {void}
 */
function setTextContent(script, v, options) {
    script.textContent = (/** @type {string} */ ((0, script_impl_1.unwrapScript)(v)));
    if (options?.omitNonce)
        return;
    setNonceForScriptElement(script);
}
exports.setTextContent = setTextContent;
/**
 * Sets the Src attribute using a TrustedResourceUrl
 * @param {!HTMLScriptElement} script
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} v
 * @param {(undefined|{omitNonce: (undefined|boolean)})=} options
 * @return {void}
 */
function setSrc(script, v, options) {
    script.src = (/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(v)));
    if (options?.omitNonce)
        return;
    setNonceForScriptElement(script);
}
exports.setSrc = setSrc;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9lbGVtZW50cy9zY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0Esa0hBQXdGO0FBQ3hGLHNHQUFxRTs7Ozs7O0FBR3JFLFNBQVMsd0JBQXdCLENBQUMsR0FBVzs7VUFDckMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFROzs7VUFFbEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBb0IsZUFBZSxDQUFDO0lBQ3RFLElBQUksTUFBTSxFQUFFO1FBQ1YsMEVBQTBFO1FBQzFFLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUsaURBQWlEO1FBQ2pELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzlEO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDOzs7Ozs7QUFHRCxTQUFTLHdCQUF3QixDQUFDLE1BQXlCOztVQUNuRCxHQUFHLEdBQUcsTUFBTSxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVc7O1VBQzlELEtBQUssR0FBRyx3QkFBd0IsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDO0lBQ3JELElBQUksS0FBSyxFQUFFO1FBQ1QsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDckM7QUFDSCxDQUFDOzs7Ozs7OztBQUdELFNBQWdCLGNBQWMsQ0FDMUIsTUFBeUIsRUFBRSxDQUFhLEVBQUUsT0FBK0I7SUFDM0UsTUFBTSxDQUFDLFdBQVcsR0FBRyx3QkFBQSxJQUFBLDBCQUFZLEVBQUMsQ0FBQyxDQUFDLEVBQVUsQ0FBQztJQUMvQyxJQUFJLE9BQU8sRUFBRSxTQUFTO1FBQUUsT0FBTztJQUMvQix3QkFBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBTEQsd0NBS0M7Ozs7Ozs7O0FBR0QsU0FBZ0IsTUFBTSxDQUNsQixNQUF5QixFQUFFLENBQXFCLEVBQ2hELE9BQStCO0lBQ2pDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsd0JBQUEsSUFBQSxxQ0FBaUIsRUFBQyxDQUFDLENBQUMsRUFBVSxDQUFDO0lBQzVDLElBQUksT0FBTyxFQUFFLFNBQVM7UUFBRSxPQUFPO0lBQy9CLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFORCx3QkFNQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtUcnVzdGVkUmVzb3VyY2VVcmwsIHVud3JhcFJlc291cmNlVXJsfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvcmVzb3VyY2VfdXJsX2ltcGwnO1xuaW1wb3J0IHtTYWZlU2NyaXB0LCB1bndyYXBTY3JpcHR9IGZyb20gJy4uLy4uL2ludGVybmFscy9zY3JpcHRfaW1wbCc7XG5cbi8qKiBSZXR1cm5zIENTUCBub25jZSwgaWYgc2V0IGZvciBhbnkgc2NyaXB0IHRhZy4gKi9cbmZ1bmN0aW9uIGdldFNjcmlwdE5vbmNlRnJvbVdpbmRvdyh3aW46IFdpbmRvdyk6IHN0cmluZyB7XG4gIGNvbnN0IGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvciBjYW4gYmUgdW5kZWZpbmVkIGluIG5vbi1icm93c2VyIGVudmlyb25tZW50cy5cbiAgY29uc3Qgc2NyaXB0ID0gZG9jLnF1ZXJ5U2VsZWN0b3I/LjxIVE1MU2NyaXB0RWxlbWVudD4oJ3NjcmlwdFtub25jZV0nKTtcbiAgaWYgKHNjcmlwdCkge1xuICAgIC8vIFRyeSB0byBnZXQgdGhlIG5vbmNlIGZyb20gdGhlIElETCBwcm9wZXJ0eSBmaXJzdCwgYmVjYXVzZSBicm93c2VycyB0aGF0XG4gICAgLy8gaW1wbGVtZW50IGFkZGl0aW9uYWwgbm9uY2UgcHJvdGVjdGlvbiBmZWF0dXJlcyAoY3VycmVudGx5IG9ubHkgQ2hyb21lKSB0b1xuICAgIC8vIHByZXZlbnQgbm9uY2Ugc3RlYWxpbmcgdmlhIENTUyBkbyBub3QgZXhwb3NlIHRoZSBub25jZSB2aWEgYXR0cmlidXRlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG4gICAgcmV0dXJuIHNjcmlwdFsnbm9uY2UnXSB8fCBzY3JpcHQuZ2V0QXR0cmlidXRlKCdub25jZScpIHx8ICcnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqIFByb3BhZ2F0ZXMgQ1NQIG5vbmNlIHRvIGR5bmFtaWNhbGx5IGNyZWF0ZWQgc2NyaXB0cy4gKi9cbmZ1bmN0aW9uIHNldE5vbmNlRm9yU2NyaXB0RWxlbWVudChzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50KSB7XG4gIGNvbnN0IHdpbiA9IHNjcmlwdC5vd25lckRvY3VtZW50ICYmIHNjcmlwdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjb25zdCBub25jZSA9IGdldFNjcmlwdE5vbmNlRnJvbVdpbmRvdyh3aW4gfHwgd2luZG93KTtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbn1cblxuLyoqIFNldHMgdGV4dENvbnRlbnQgZnJvbSB0aGUgZ2l2ZW4gU2FmZVNjcmlwdC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRUZXh0Q29udGVudChcbiAgICBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50LCB2OiBTYWZlU2NyaXB0LCBvcHRpb25zPzoge29taXROb25jZT86IGJvb2xlYW59KSB7XG4gIHNjcmlwdC50ZXh0Q29udGVudCA9IHVud3JhcFNjcmlwdCh2KSBhcyBzdHJpbmc7XG4gIGlmIChvcHRpb25zPy5vbWl0Tm9uY2UpIHJldHVybjtcbiAgc2V0Tm9uY2VGb3JTY3JpcHRFbGVtZW50KHNjcmlwdCk7XG59XG5cbi8qKiBTZXRzIHRoZSBTcmMgYXR0cmlidXRlIHVzaW5nIGEgVHJ1c3RlZFJlc291cmNlVXJsICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U3JjKFxuICAgIHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQsIHY6IFRydXN0ZWRSZXNvdXJjZVVybCxcbiAgICBvcHRpb25zPzoge29taXROb25jZT86IGJvb2xlYW59KSB7XG4gIHNjcmlwdC5zcmMgPSB1bndyYXBSZXNvdXJjZVVybCh2KSBhcyBzdHJpbmc7XG4gIGlmIChvcHRpb25zPy5vbWl0Tm9uY2UpIHJldHVybjtcbiAgc2V0Tm9uY2VGb3JTY3JpcHRFbGVtZW50KHNjcmlwdCk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/elements/style.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/style.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.style');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/style.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_style_sheet_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_sheet_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const style_sheet_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_sheet_impl');
/**
 * Safe setters for `HTMLStyleElement`s.
 * @param {!HTMLStyleElement} elem
 * @param {!tsickle_style_sheet_impl_1.SafeStyleSheet} safeStyleSheet
 * @return {void}
 */
function setTextContent(elem, safeStyleSheet) {
    elem.textContent = (0, style_sheet_impl_1.unwrapStyleSheet)(safeStyleSheet);
}
exports.setTextContent = setTextContent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2VsZW1lbnRzL3N0eWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsZ0hBQWtGOzs7Ozs7O0FBR2xGLFNBQWdCLGNBQWMsQ0FDMUIsSUFBc0IsRUFBRSxjQUE4QjtJQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUEsbUNBQWdCLEVBQUMsY0FBYyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUhELHdDQUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1NhZmVTdHlsZVNoZWV0LCB1bndyYXBTdHlsZVNoZWV0fSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvc3R5bGVfc2hlZXRfaW1wbCc7XG5cbi8qKiBTYWZlIHNldHRlcnMgZm9yIGBIVE1MU3R5bGVFbGVtZW50YHMuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQoXG4gICAgZWxlbTogSFRNTFN0eWxlRWxlbWVudCwgc2FmZVN0eWxlU2hlZXQ6IFNhZmVTdHlsZVNoZWV0KSB7XG4gIGVsZW0udGV4dENvbnRlbnQgPSB1bndyYXBTdHlsZVNoZWV0KHNhZmVTdHlsZVNoZWV0KTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/elements/svg.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/svg.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.svg');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/svg.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
/** @type {!Array<string>} */
const UNSAFE_SVG_ATTRIBUTES = [
    'href',
    'xlink:href',
];
/**
 * Set attribute on SVGElement if the attribute doesn't have security
 * implications. If the attribute can potentially cause XSS, throw an error.
 * @param {!SVGElement} svg
 * @param {string} attr
 * @param {string} value
 * @return {void}
 */
function setAttribute(svg, attr, value) {
    attr = attr.toLowerCase();
    if (UNSAFE_SVG_ATTRIBUTES.indexOf(attr) !== -1 || attr.indexOf('on') === 0) {
        /** @type {string} */
        let msg = '';
        if (dev_1.DEV_MODE) {
            msg = `Setting the '${attr}' attribute on SVG can cause XSS.`;
        }
        throw new Error(msg);
    }
    svg.setAttribute(attr, value);
}
exports.setAttribute = setAttribute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9lbGVtZW50cy9zdmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSx3RkFBK0M7O01BRXpDLHFCQUFxQixHQUFHO0lBQzVCLE1BQU07SUFDTixZQUFZO0NBQ2I7Ozs7Ozs7OztBQU1ELFNBQWdCLFlBQVksQ0FBQyxHQUFlLEVBQUUsSUFBWSxFQUFFLEtBQWE7SUFDdkUsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUMxQixJQUFJLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTs7WUFDdEUsR0FBRyxHQUFHLEVBQUU7UUFDWixJQUFJLGNBQVEsRUFBRTtZQUNaLEdBQUcsR0FBRyxnQkFBZ0IsSUFBSSxtQ0FBbUMsQ0FBQztTQUMvRDtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdEI7SUFFRCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBWEQsb0NBV0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7REVWX01PREV9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50L2Rldic7XG5cbmNvbnN0IFVOU0FGRV9TVkdfQVRUUklCVVRFUyA9IFtcbiAgJ2hyZWYnLFxuICAneGxpbms6aHJlZicsXG5dO1xuXG4vKipcbiAqIFNldCBhdHRyaWJ1dGUgb24gU1ZHRWxlbWVudCBpZiB0aGUgYXR0cmlidXRlIGRvZXNuJ3QgaGF2ZSBzZWN1cml0eVxuICogaW1wbGljYXRpb25zLiBJZiB0aGUgYXR0cmlidXRlIGNhbiBwb3RlbnRpYWxseSBjYXVzZSBYU1MsIHRocm93IGFuIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0QXR0cmlidXRlKHN2ZzogU1ZHRWxlbWVudCwgYXR0cjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gIGF0dHIgPSBhdHRyLnRvTG93ZXJDYXNlKCk7XG4gIGlmIChVTlNBRkVfU1ZHX0FUVFJJQlVURVMuaW5kZXhPZihhdHRyKSAhPT0gLTEgfHwgYXR0ci5pbmRleE9mKCdvbicpID09PSAwKSB7XG4gICAgbGV0IG1zZyA9ICcnO1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgbXNnID0gYFNldHRpbmcgdGhlICcke2F0dHJ9JyBhdHRyaWJ1dGUgb24gU1ZHIGNhbiBjYXVzZSBYU1MuYDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cblxuICBzdmcuc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbn0iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/elements/svg_use.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/elements/svg_use.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.elements.svg_use');
var module = module || { id: 'third_party/javascript/safevalues/dom/elements/svg_use.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_log_1 = goog.requireType("goog.log");
const tsickle_url_sanitizer_2 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_dev_3 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const log_1 = goog.require('goog.log'); // LINE-INTERNAL
// LINE-INTERNAL
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
/**
 * Sets the Href attribute from the given URL.
 * javascript: and data: URL are blocked as they can lead to XSS and the <use>
 * element only loads resources same-origin.
 * @param {!SVGUseElement} useEl
 * @param {string} url
 * @return {void}
 */
function setHref(useEl, url) {
    /** @type {(undefined|string)} */
    const scheme = (0, url_sanitizer_1.extractScheme)(url);
    if (scheme === 'javascript:' || scheme === 'data:') {
        if (dev_1.DEV_MODE) {
            /** @type {string} */
            const msg = `A URL with content '${url}' was sanitized away.`;
            // BEGIN-EXTERNAL
            // console.error(msg);
            // END-EXTERNAL
            // BEGIN-INTERNAL
            (0, log_1.warning)((0, log_1.getLogger)('safevalues'), msg);
            // END-INTERNAL
        }
        return;
    }
    // Note that the href property is read-only, so setAttribute must be used.
    useEl.setAttribute('href', url);
}
exports.setHref = setHref;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnX3VzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZWxlbWVudHMvc3ZnX3VzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EsdUNBQWtGLENBQUUsZ0JBQWdCOztBQUVwRyx5R0FBMkQ7QUFDM0Qsd0ZBQStDOzs7Ozs7Ozs7QUFPL0MsU0FBZ0IsT0FBTyxDQUFDLEtBQW9CLEVBQUUsR0FBVzs7VUFDakQsTUFBTSxHQUFHLElBQUEsNkJBQWEsRUFBQyxHQUFHLENBQUM7SUFDakMsSUFBSSxNQUFNLEtBQUssYUFBYSxJQUFJLE1BQU0sS0FBSyxPQUFPLEVBQUU7UUFDbEQsSUFBSSxjQUFRLEVBQUU7O2tCQUNOLEdBQUcsR0FBRyx1QkFBdUIsR0FBRyx1QkFBdUI7Ozs7O1lBSzdELElBQUEsYUFBTyxFQUFDLElBQUEsZUFBUyxFQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLGVBQWU7U0FDaEI7UUFDRCxPQUFPO0tBQ1I7O0lBR0QsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQWpCRCwwQkFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7Z2V0TG9nZ2VyLCB3YXJuaW5nfSBmcm9tICdnb29nbGUzL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvY2xvc3VyZS9sb2cvbG9nJzsgIC8vIExJTkUtSU5URVJOQUxcblxuaW1wb3J0IHtleHRyYWN0U2NoZW1lfSBmcm9tICcuLi8uLi9idWlsZGVycy91cmxfc2FuaXRpemVyJztcbmltcG9ydCB7REVWX01PREV9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50L2Rldic7XG5cbi8qKlxuICogU2V0cyB0aGUgSHJlZiBhdHRyaWJ1dGUgZnJvbSB0aGUgZ2l2ZW4gVVJMLlxuICogamF2YXNjcmlwdDogYW5kIGRhdGE6IFVSTCBhcmUgYmxvY2tlZCBhcyB0aGV5IGNhbiBsZWFkIHRvIFhTUyBhbmQgdGhlIDx1c2U+XG4gKiBlbGVtZW50IG9ubHkgbG9hZHMgcmVzb3VyY2VzIHNhbWUtb3JpZ2luLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SHJlZih1c2VFbDogU1ZHVXNlRWxlbWVudCwgdXJsOiBzdHJpbmcpIHtcbiAgY29uc3Qgc2NoZW1lID0gZXh0cmFjdFNjaGVtZSh1cmwpO1xuICBpZiAoc2NoZW1lID09PSAnamF2YXNjcmlwdDonIHx8IHNjaGVtZSA9PT0gJ2RhdGE6Jykge1xuICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgY29uc3QgbXNnID0gYEEgVVJMIHdpdGggY29udGVudCAnJHt1cmx9JyB3YXMgc2FuaXRpemVkIGF3YXkuYDtcbiAgICAgIC8vIEJFR0lOLUVYVEVSTkFMXG4gICAgICAvLyBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICAvLyBFTkQtRVhURVJOQUxcbiAgICAgIC8vIEJFR0lOLUlOVEVSTkFMXG4gICAgICB3YXJuaW5nKGdldExvZ2dlcignc2FmZXZhbHVlcycpLCBtc2cpO1xuICAgICAgLy8gRU5ELUlOVEVSTkFMXG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIE5vdGUgdGhhdCB0aGUgaHJlZiBwcm9wZXJ0eSBpcyByZWFkLW9ubHksIHNvIHNldEF0dHJpYnV0ZSBtdXN0IGJlIHVzZWQuXG4gIHVzZUVsLnNldEF0dHJpYnV0ZSgnaHJlZicsIHVybCk7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/globals/document.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/document.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.document');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/document.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_html_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
/**
 * write safely calls {\@link Document.write} on the given {\@link Document} with
 * the given {\@link SafeHtml}.
 * @param {!Document} doc
 * @param {!tsickle_html_impl_1.SafeHtml} text
 * @return {void}
 */
function write(doc, text) {
    doc.write((/** @type {string} */ ((0, html_impl_1.unwrapHtml)(text))));
}
exports.write = write;
/** @typedef {?} */
var ValueType;
/**
 * Safely calls {\@link Document.execCommand}. When command is insertHtml, a
 * SafeHtml must be passed in as value.
 * @template Cmd
 * @param {!Document} doc
 * @param {Cmd} command
 * @param {(undefined|?)=} value
 * @return {boolean}
 */
function execCommand(doc, command, value) {
    /** @type {string} */
    const commandString = String(command);
    /** @type {string} */
    let valueArgument = (/** @type {string} */ (value));
    if (commandString.toLowerCase() === 'inserthtml') {
        valueArgument = (/** @type {string} */ ((0, html_impl_1.unwrapHtml)((/** @type {!tsickle_html_impl_1.SafeHtml} */ (value)))));
    }
    return doc.execCommand(commandString, /* showUi= */ false, valueArgument);
}
exports.execCommand = execCommand;
/**
 * Safely calls {\@link Document.execCommand}('insertHtml').
 * @deprecated Use safeDocument.execCommand.
 * @param {!Document} doc
 * @param {!tsickle_html_impl_1.SafeHtml} html
 * @return {boolean}
 */
function execCommandInsertHtml(doc, html) {
    return doc.execCommand('insertHTML', /* showUi= */ false, (/** @type {string} */ ((0, html_impl_1.unwrapHtml)(html))));
}
exports.execCommandInsertHtml = execCommandInsertHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2dsb2JhbHMvZG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxrR0FBK0Q7Ozs7Ozs7O0FBTS9ELFNBQWdCLEtBQUssQ0FBQyxHQUFhLEVBQUUsSUFBYztJQUNqRCxHQUFHLENBQUMsS0FBSyxDQUFDLHdCQUFBLElBQUEsc0JBQVUsRUFBQyxJQUFJLENBQUMsRUFBVSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUZELHNCQUVDOztBQUVELGNBQ3FFOzs7Ozs7Ozs7O0FBTXJFLFNBQWdCLFdBQVcsQ0FDdkIsR0FBYSxFQUFFLE9BQVksRUFBRSxLQUFzQjs7VUFDL0MsYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7O1FBQ2pDLGFBQWEsR0FBRyx3QkFBQSxLQUFLLEVBQVU7SUFDbkMsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFLEtBQUssWUFBWSxFQUFFO1FBQ2hELGFBQWEsR0FBRyx3QkFBQSxJQUFBLHNCQUFVLEVBQUMsK0NBQUEsS0FBSyxFQUFZLENBQUMsRUFBVSxDQUFDO0tBQ3pEO0lBQ0QsT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFSRCxrQ0FRQzs7Ozs7Ozs7QUFNRCxTQUFnQixxQkFBcUIsQ0FBQyxHQUFhLEVBQUUsSUFBYztJQUNqRSxPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQ2xCLFlBQVksRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLHdCQUFBLElBQUEsc0JBQVUsRUFBQyxJQUFJLENBQUMsRUFBVSxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUhELHNEQUdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1NhZmVIdG1sLCB1bndyYXBIdG1sfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvaHRtbF9pbXBsJztcblxuLyoqXG4gKiB3cml0ZSBzYWZlbHkgY2FsbHMge0BsaW5rIERvY3VtZW50LndyaXRlfSBvbiB0aGUgZ2l2ZW4ge0BsaW5rIERvY3VtZW50fSB3aXRoXG4gKiB0aGUgZ2l2ZW4ge0BsaW5rIFNhZmVIdG1sfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlKGRvYzogRG9jdW1lbnQsIHRleHQ6IFNhZmVIdG1sKSB7XG4gIGRvYy53cml0ZSh1bndyYXBIdG1sKHRleHQpIGFzIHN0cmluZyk7XG59XG5cbnR5cGUgVmFsdWVUeXBlPENtZCBleHRlbmRzIHN0cmluZz4gPVxuICAgIExvd2VyY2FzZTxDbWQ+IGV4dGVuZHMgJ2luc2VydGh0bWwnID8gU2FmZUh0bWwgOiBTYWZlSHRtbHxzdHJpbmc7XG5cbi8qKlxuICogU2FmZWx5IGNhbGxzIHtAbGluayBEb2N1bWVudC5leGVjQ29tbWFuZH0uIFdoZW4gY29tbWFuZCBpcyBpbnNlcnRIdG1sLCBhXG4gKiBTYWZlSHRtbCBtdXN0IGJlIHBhc3NlZCBpbiBhcyB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNDb21tYW5kPENtZCBleHRlbmRzIHN0cmluZz4oXG4gICAgZG9jOiBEb2N1bWVudCwgY29tbWFuZDogQ21kLCB2YWx1ZT86IFZhbHVlVHlwZTxDbWQ+KTogYm9vbGVhbiB7XG4gIGNvbnN0IGNvbW1hbmRTdHJpbmcgPSBTdHJpbmcoY29tbWFuZCk7XG4gIGxldCB2YWx1ZUFyZ3VtZW50ID0gdmFsdWUgYXMgc3RyaW5nO1xuICBpZiAoY29tbWFuZFN0cmluZy50b0xvd2VyQ2FzZSgpID09PSAnaW5zZXJ0aHRtbCcpIHtcbiAgICB2YWx1ZUFyZ3VtZW50ID0gdW53cmFwSHRtbCh2YWx1ZSBhcyBTYWZlSHRtbCkgYXMgc3RyaW5nO1xuICB9XG4gIHJldHVybiBkb2MuZXhlY0NvbW1hbmQoY29tbWFuZFN0cmluZywgLyogc2hvd1VpPSAqLyBmYWxzZSwgdmFsdWVBcmd1bWVudCk7XG59XG5cbi8qKlxuICogU2FmZWx5IGNhbGxzIHtAbGluayBEb2N1bWVudC5leGVjQ29tbWFuZH0oJ2luc2VydEh0bWwnKS5cbiAqIEBkZXByZWNhdGVkIFVzZSBzYWZlRG9jdW1lbnQuZXhlY0NvbW1hbmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjQ29tbWFuZEluc2VydEh0bWwoZG9jOiBEb2N1bWVudCwgaHRtbDogU2FmZUh0bWwpOiBib29sZWFuIHtcbiAgcmV0dXJuIGRvYy5leGVjQ29tbWFuZChcbiAgICAgICdpbnNlcnRIVE1MJywgLyogc2hvd1VpPSAqLyBmYWxzZSwgdW53cmFwSHRtbChodG1sKSBhcyBzdHJpbmcpO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/globals/dom_parser.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/dom_parser.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.dom_parser');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/dom_parser.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_dev_1 = goog.requireType("google3.third_party.javascript.safevalues.environment.dev");
const tsickle_html_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const dev_1 = goog.require('google3.third_party.javascript.safevalues.environment.dev');
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
/**
 * Safely parses a string using the HTML parser.
 * @param {!DOMParser} parser
 * @param {!tsickle_html_impl_2.SafeHtml} html
 * @return {!HTMLDocument}
 */
function parseHtml(parser, html) {
    return parseFromString(parser, html, 'text/html');
}
exports.parseHtml = parseHtml;
/**
 * Safely parses a string using the XML parser. If the XML document is found to
 * contain any elements from the HTML or SVG namespaces, an error is thrown for
 * security reasons.
 * @param {!DOMParser} parser
 * @param {string} xml
 * @return {!XMLDocument}
 */
function parseXml(parser, xml) {
    /** @type {!Document} */
    const doc = parseFromString(parser, (0, html_impl_1.createHtmlInternal)(xml), 'text/xml');
    /** @type {!NodeIterator} */
    const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ALL, null, 
    // tslint:disable-next-line:ban-ts-suppressions  // LINE-INTERNAL
    // @ts-ignore: error TS2554: Expected 1-3 arguments, but got 4.
    false);
    /** @type {(null|!Node)} */
    let currentNode;
    while ((currentNode = iterator.nextNode())) {
        if (currentNode instanceof HTMLElement ||
            currentNode instanceof SVGElement) {
            /** @type {string} */
            let message = 'unsafe XML';
            if (dev_1.DEV_MODE) {
                message =
                    `attempted to parse an XML document that embeds HTML or SVG content`;
            }
            throw new Error(message);
        }
    }
    return doc;
}
exports.parseXml = parseXml;
/**
 * Safely parses a string using the HTML or XML parser.
 * @param {!DOMParser} parser
 * @param {!tsickle_html_impl_2.SafeHtml} content
 * @param {string} contentType
 * @return {!Document}
 */
function parseFromString(parser, content, contentType) {
    return parser.parseFromString((/** @type {string} */ ((0, html_impl_1.unwrapHtml)(content))), contentType);
}
exports.parseFromString = parseFromString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tX3BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3RoaXJkX3BhcnR5L2phdmFzY3JpcHQvc2FmZXZhbHVlcy9kb20vZ2xvYmFscy9kb21fcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHdGQUErQztBQUMvQyxrR0FBbUY7Ozs7Ozs7QUFHbkYsU0FBZ0IsU0FBUyxDQUFDLE1BQWlCLEVBQUUsSUFBYztJQUN6RCxPQUFPLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFGRCw4QkFFQzs7Ozs7Ozs7O0FBT0QsU0FBZ0IsUUFBUSxDQUFDLE1BQWlCLEVBQUUsR0FBVzs7VUFDL0MsR0FBRyxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBQSw4QkFBa0IsRUFBQyxHQUFHLENBQUMsRUFBRSxVQUFVLENBQUM7O1VBRWxFLFFBQVEsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQ3hDLEdBQUcsRUFDSCxVQUFVLENBQUMsUUFBUSxFQUNuQixJQUFJO0lBQ0osaUVBQWlFO0lBQ2pFLCtEQUErRDtJQUMvRCxLQUFLLENBQ1I7O1FBRUcsV0FBc0I7SUFDMUIsT0FBTyxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRTtRQUMxQyxJQUFJLFdBQVcsWUFBWSxXQUFXO1lBQ2xDLFdBQVcsWUFBWSxVQUFVLEVBQUU7O2dCQUNqQyxPQUFPLEdBQUcsWUFBWTtZQUMxQixJQUFJLGNBQVEsRUFBRTtnQkFDWixPQUFPO29CQUNILG9FQUFvRSxDQUFDO2FBQzFFO1lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQjtLQUNGO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBMUJELDRCQTBCQzs7Ozs7Ozs7QUFHRCxTQUFnQixlQUFlLENBQzNCLE1BQWlCLEVBQUUsT0FBaUIsRUFDcEMsV0FBbUM7SUFDckMsT0FBTyxNQUFNLENBQUMsZUFBZSxDQUFDLHdCQUFBLElBQUEsc0JBQVUsRUFBQyxPQUFPLENBQUMsRUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFKRCwwQ0FJQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtERVZfTU9ERX0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQvZGV2JztcbmltcG9ydCB7Y3JlYXRlSHRtbEludGVybmFsLCBTYWZlSHRtbCwgdW53cmFwSHRtbH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL2h0bWxfaW1wbCc7XG5cbi8qKiBTYWZlbHkgcGFyc2VzIGEgc3RyaW5nIHVzaW5nIHRoZSBIVE1MIHBhcnNlci4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUh0bWwocGFyc2VyOiBET01QYXJzZXIsIGh0bWw6IFNhZmVIdG1sKTogSFRNTERvY3VtZW50IHtcbiAgcmV0dXJuIHBhcnNlRnJvbVN0cmluZyhwYXJzZXIsIGh0bWwsICd0ZXh0L2h0bWwnKTtcbn1cblxuLyoqXG4gKiBTYWZlbHkgcGFyc2VzIGEgc3RyaW5nIHVzaW5nIHRoZSBYTUwgcGFyc2VyLiBJZiB0aGUgWE1MIGRvY3VtZW50IGlzIGZvdW5kIHRvXG4gKiBjb250YWluIGFueSBlbGVtZW50cyBmcm9tIHRoZSBIVE1MIG9yIFNWRyBuYW1lc3BhY2VzLCBhbiBlcnJvciBpcyB0aHJvd24gZm9yXG4gKiBzZWN1cml0eSByZWFzb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VYbWwocGFyc2VyOiBET01QYXJzZXIsIHhtbDogc3RyaW5nKTogWE1MRG9jdW1lbnQge1xuICBjb25zdCBkb2MgPSBwYXJzZUZyb21TdHJpbmcocGFyc2VyLCBjcmVhdGVIdG1sSW50ZXJuYWwoeG1sKSwgJ3RleHQveG1sJyk7XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3IoXG4gICAgICBkb2MsXG4gICAgICBOb2RlRmlsdGVyLlNIT1dfQUxMLFxuICAgICAgbnVsbCxcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHMtc3VwcHJlc3Npb25zICAvLyBMSU5FLUlOVEVSTkFMXG4gICAgICAvLyBAdHMtaWdub3JlOiBlcnJvciBUUzI1NTQ6IEV4cGVjdGVkIDEtMyBhcmd1bWVudHMsIGJ1dCBnb3QgNC5cbiAgICAgIGZhbHNlLCAgLy8gVGhpcyBpcyByZXF1aXJlZCBpbiBJRSBhbmQgaWdub3JlZCBpbiBvdGhlciBicm93c2Vycy5cbiAgKTtcblxuICBsZXQgY3VycmVudE5vZGU6IE5vZGV8bnVsbDtcbiAgd2hpbGUgKChjdXJyZW50Tm9kZSA9IGl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgaWYgKGN1cnJlbnROb2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcbiAgICAgICAgY3VycmVudE5vZGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgICBsZXQgbWVzc2FnZSA9ICd1bnNhZmUgWE1MJztcbiAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICBtZXNzYWdlID1cbiAgICAgICAgICAgIGBhdHRlbXB0ZWQgdG8gcGFyc2UgYW4gWE1MIGRvY3VtZW50IHRoYXQgZW1iZWRzIEhUTUwgb3IgU1ZHIGNvbnRlbnRgO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb2M7XG59XG5cbi8qKiBTYWZlbHkgcGFyc2VzIGEgc3RyaW5nIHVzaW5nIHRoZSBIVE1MIG9yIFhNTCBwYXJzZXIuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGcm9tU3RyaW5nKFxuICAgIHBhcnNlcjogRE9NUGFyc2VyLCBjb250ZW50OiBTYWZlSHRtbCxcbiAgICBjb250ZW50VHlwZTogRE9NUGFyc2VyU3VwcG9ydGVkVHlwZSk6IERvY3VtZW50IHtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZUZyb21TdHJpbmcodW53cmFwSHRtbChjb250ZW50KSBhcyBzdHJpbmcsIGNvbnRlbnRUeXBlKTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/globals/fetch.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview
 * Functions which allow fetch() on resourceUrls to be
 * interpreted as SafeHtml or SafeScript.
 *
 * Generated from: third_party/javascript/safevalues/dom/globals/fetch.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.fetch');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/fetch.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_html_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.html_impl");
const tsickle_resource_url_impl_2 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
const tsickle_script_impl_3 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_style_sheet_impl_4 = goog.requireType("google3.third_party.javascript.safevalues.internals.style_sheet_impl");
const html_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.html_impl');
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
const style_sheet_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.style_sheet_impl');
/**
 * IncorrectTypeError represents an error that can occur with {\@link
 * fetchResourceUrl} when the server responds with a content type that would be
 * unsafe for the type of content requested.
 * @extends {Error}
 */
class IncorrectContentTypeError extends Error {
    /**
     * @public
     * @param {string} url
     * @param {string} typeName
     * @param {string} contentType
     */
    constructor(url, typeName, contentType) {
        super(`${url} was requested as a ${typeName}, but the response Content-Type, "${contentType} is not appropriate for this type of content.`);
        this.url = url;
        this.typeName = typeName;
        this.contentType = contentType;
    }
}
exports.IncorrectContentTypeError = IncorrectContentTypeError;
/* istanbul ignore if */
if (false) {
    /**
     * @const {string}
     * @public
     */
    IncorrectContentTypeError.prototype.url;
    /**
     * @const {string}
     * @public
     */
    IncorrectContentTypeError.prototype.typeName;
    /**
     * @const {string}
     * @public
     */
    IncorrectContentTypeError.prototype.contentType;
}
/**
 * A SafeResponse is the response value of a {\@link fetchResourceUrl} call.
 * @record
 */
function SafeResponse() { }
exports.SafeResponse = SafeResponse;
/* istanbul ignore if */
if (false) {
    /**
     * html returns this {\@link Response} as a SafeHtml, or throws an error.
     * @public
     * @return {!Promise<!tsickle_html_impl_1.SafeHtml>}
     */
    SafeResponse.prototype.html = function () { };
    /**
     * script returns the fetch response as a {\@link SafeScript}, or returns an
     * error.
     * @public
     * @return {!Promise<!tsickle_script_impl_3.SafeScript>}
     */
    SafeResponse.prototype.script = function () { };
    /**
     * styleSheet returns the fetch response as a {\@link SafeStyleSheet}, or
     * returns an error.
     * @public
     * @return {!Promise<!tsickle_style_sheet_impl_4.SafeStyleSheet>}
     */
    SafeResponse.prototype.styleSheet = function () { };
}
/**
 * This causes the compiler to better optimize `createHtmlInternal` calls, where
 * previously it was building and including the whole module without
 * tree-shaking.
 *
 * TODO(b/254093954) find out why this is and remove this workaround.
 * @param {string} html
 * @return {!tsickle_html_impl_1.SafeHtml}
 */
function privatecreateHtmlInternal(html) {
    return (0, html_impl_1.createHtmlInternal)(html);
}
/**
 * fetches a given {\@link TrustedResourceUrl},
 * and returns a value which can be turned into a given safe type.
 * @param {!tsickle_resource_url_impl_2.TrustedResourceUrl} u
 * @return {!Promise<!SafeResponse>}
 */
async function fetchResourceUrl(u) {
    /** @type {!Response} */
    const response = await fetch((0, resource_url_impl_1.unwrapResourceUrl)(u).toString());
    /**
     * the content type type of the response, excluding any MIME params
     * @type {(undefined|string)}
     */
    const mimeType = response.headers.get('Content-Type')?.split(';', 2)?.[0]?.toLowerCase();
    return {
        /**
         * @public
         * @return {!Promise<!tsickle_html_impl_1.SafeHtml>}
         */
        async html() {
            if (mimeType !== 'text/html') {
                throw new IncorrectContentTypeError(response.url, 'SafeHtml', 'text/html');
            }
            /** @type {string} */
            const text = await response.text();
            return privatecreateHtmlInternal(text);
        },
        /**
         * @public
         * @return {!Promise<!tsickle_script_impl_3.SafeScript>}
         */
        async script() {
            // see:
            // https://html.spec.whatwg.org/multipage/scripting.html#scriptingLanguages
            if (mimeType !== 'text/javascript' &&
                mimeType !== 'application/javascript') {
                throw new IncorrectContentTypeError(response.url, 'SafeScript', 'text/javascript');
            }
            /** @type {string} */
            const text = await response.text();
            return (0, script_impl_1.createScriptInternal)(text);
        },
        /**
         * @public
         * @return {!Promise<!tsickle_style_sheet_impl_4.SafeStyleSheet>}
         */
        async styleSheet() {
            if (mimeType !== 'text/css') {
                throw new IncorrectContentTypeError(response.url, 'SafeStyleSheet', 'text/css');
            }
            /** @type {string} */
            const text = await response.text();
            return (0, style_sheet_impl_1.createStyleSheetInternal)(text);
        }
    };
}
exports.fetchResourceUrl = fetchResourceUrl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmV0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2dsb2JhbHMvZmV0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0Esa0dBQXVFO0FBQ3ZFLGtIQUF3RjtBQUN4RixzR0FBNkU7QUFDN0UsZ0hBQTBGOzs7Ozs7O0FBUTFGLE1BQWEseUJBQTBCLFNBQVEsS0FBSzs7Ozs7OztJQUNsRCxZQUNhLEdBQVcsRUFBVyxRQUFnQixFQUN0QyxXQUFtQjtRQUM5QixLQUFLLENBQUMsR0FBRyxHQUFHLHVCQUNSLFFBQVEscUNBQ1IsV0FBVywrQ0FBK0MsQ0FBQyxDQUFDO1FBSnJELFFBQUcsR0FBSCxHQUFHLENBQVE7UUFBVyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ3RDLGdCQUFXLEdBQVgsV0FBVyxDQUFRO0lBSWhDLENBQUM7Q0FDRjtBQVJELDhEQVFDOzs7Ozs7O0lBTkssd0NBQW9COzs7OztJQUFFLDZDQUF5Qjs7Ozs7SUFDL0MsZ0RBQTRCOzs7Ozs7QUFZbEMsMkJBaUJDOzs7Ozs7Ozs7SUFiQyw4Q0FBMEI7Ozs7Ozs7SUFNMUIsZ0RBQThCOzs7Ozs7O0lBTTlCLG9EQUFzQzs7Ozs7Ozs7Ozs7QUFXeEMsU0FBUyx5QkFBeUIsQ0FBQyxJQUFZO0lBQzdDLE9BQU8sSUFBQSw4QkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDOzs7Ozs7O0FBTU0sS0FBSyxVQUFVLGdCQUFnQixDQUFDLENBQXFCOztVQUVwRCxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBQSxxQ0FBaUIsRUFBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzs7Ozs7VUFJdkQsUUFBUSxHQUNWLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUU7SUFFM0UsT0FBTzs7Ozs7UUFDTCxLQUFLLENBQUMsSUFBSTtZQUNSLElBQUksUUFBUSxLQUFLLFdBQVcsRUFBRTtnQkFDNUIsTUFBTSxJQUFJLHlCQUF5QixDQUMvQixRQUFRLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUM1Qzs7a0JBRUssSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRTtZQUNsQyxPQUFPLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUM7Ozs7O1FBRUQsS0FBSyxDQUFDLE1BQU07WUFDVixPQUFPO1lBQ1AsMkVBQTJFO1lBQzNFLElBQUksUUFBUSxLQUFLLGlCQUFpQjtnQkFDOUIsUUFBUSxLQUFLLHdCQUF3QixFQUFFO2dCQUN6QyxNQUFNLElBQUkseUJBQXlCLENBQy9CLFFBQVEsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixDQUFDLENBQUM7YUFDcEQ7O2tCQUVLLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDbEMsT0FBTyxJQUFBLGtDQUFvQixFQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7Ozs7O1FBRUQsS0FBSyxDQUFDLFVBQVU7WUFDZCxJQUFJLFFBQVEsS0FBSyxVQUFVLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSSx5QkFBeUIsQ0FDL0IsUUFBUSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUNqRDs7a0JBRUssSUFBSSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRTtZQUNsQyxPQUFPLElBQUEsMkNBQXdCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBM0NELDRDQTJDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBGdW5jdGlvbnMgd2hpY2ggYWxsb3cgZmV0Y2goKSBvbiByZXNvdXJjZVVybHMgdG8gYmVcbiAqIGludGVycHJldGVkIGFzIFNhZmVIdG1sIG9yIFNhZmVTY3JpcHQuXG4gKi9cblxuaW1wb3J0IHtjcmVhdGVIdG1sSW50ZXJuYWwsIFNhZmVIdG1sfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvaHRtbF9pbXBsJztcbmltcG9ydCB7VHJ1c3RlZFJlc291cmNlVXJsLCB1bndyYXBSZXNvdXJjZVVybH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL3Jlc291cmNlX3VybF9pbXBsJztcbmltcG9ydCB7Y3JlYXRlU2NyaXB0SW50ZXJuYWwsIFNhZmVTY3JpcHR9IGZyb20gJy4uLy4uL2ludGVybmFscy9zY3JpcHRfaW1wbCc7XG5pbXBvcnQge2NyZWF0ZVN0eWxlU2hlZXRJbnRlcm5hbCwgU2FmZVN0eWxlU2hlZXR9IGZyb20gJy4uLy4uL2ludGVybmFscy9zdHlsZV9zaGVldF9pbXBsJztcblxuXG4vKipcbiAqIEluY29ycmVjdFR5cGVFcnJvciByZXByZXNlbnRzIGFuIGVycm9yIHRoYXQgY2FuIG9jY3VyIHdpdGgge0BsaW5rXG4gKiBmZXRjaFJlc291cmNlVXJsfSB3aGVuIHRoZSBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCBhIGNvbnRlbnQgdHlwZSB0aGF0IHdvdWxkIGJlXG4gKiB1bnNhZmUgZm9yIHRoZSB0eXBlIG9mIGNvbnRlbnQgcmVxdWVzdGVkLlxuICovXG5leHBvcnQgY2xhc3MgSW5jb3JyZWN0Q29udGVudFR5cGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSB1cmw6IHN0cmluZywgcmVhZG9ubHkgdHlwZU5hbWU6IHN0cmluZyxcbiAgICAgIHJlYWRvbmx5IGNvbnRlbnRUeXBlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihgJHt1cmx9IHdhcyByZXF1ZXN0ZWQgYXMgYSAke1xuICAgICAgICB0eXBlTmFtZX0sIGJ1dCB0aGUgcmVzcG9uc2UgQ29udGVudC1UeXBlLCBcIiR7XG4gICAgICAgIGNvbnRlbnRUeXBlfSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHRoaXMgdHlwZSBvZiBjb250ZW50LmApO1xuICB9XG59XG5cblxuXG4vKipcbiAqIEEgU2FmZVJlc3BvbnNlIGlzIHRoZSByZXNwb25zZSB2YWx1ZSBvZiBhIHtAbGluayBmZXRjaFJlc291cmNlVXJsfSBjYWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNhZmVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBodG1sIHJldHVybnMgdGhpcyB7QGxpbmsgUmVzcG9uc2V9IGFzIGEgU2FmZUh0bWwsIG9yIHRocm93cyBhbiBlcnJvci5cbiAgICovXG4gIGh0bWwoKTogUHJvbWlzZTxTYWZlSHRtbD47XG5cbiAgLyoqXG4gICAqIHNjcmlwdCByZXR1cm5zIHRoZSBmZXRjaCByZXNwb25zZSBhcyBhIHtAbGluayBTYWZlU2NyaXB0fSwgb3IgcmV0dXJucyBhblxuICAgKiBlcnJvci5cbiAgICovXG4gIHNjcmlwdCgpOiBQcm9taXNlPFNhZmVTY3JpcHQ+O1xuXG4gIC8qKlxuICAgKiBzdHlsZVNoZWV0IHJldHVybnMgdGhlIGZldGNoIHJlc3BvbnNlIGFzIGEge0BsaW5rIFNhZmVTdHlsZVNoZWV0fSwgb3JcbiAgICogcmV0dXJucyBhbiBlcnJvci5cbiAgICovXG4gIHN0eWxlU2hlZXQoKTogUHJvbWlzZTxTYWZlU3R5bGVTaGVldD47XG59XG5cblxuLyoqXG4gKiBUaGlzIGNhdXNlcyB0aGUgY29tcGlsZXIgdG8gYmV0dGVyIG9wdGltaXplIGBjcmVhdGVIdG1sSW50ZXJuYWxgIGNhbGxzLCB3aGVyZVxuICogcHJldmlvdXNseSBpdCB3YXMgYnVpbGRpbmcgYW5kIGluY2x1ZGluZyB0aGUgd2hvbGUgbW9kdWxlIHdpdGhvdXRcbiAqIHRyZWUtc2hha2luZy5cbiAqXG4gKiBUT0RPKGIvMjU0MDkzOTU0KSBmaW5kIG91dCB3aHkgdGhpcyBpcyBhbmQgcmVtb3ZlIHRoaXMgd29ya2Fyb3VuZC5cbiAqL1xuZnVuY3Rpb24gcHJpdmF0ZWNyZWF0ZUh0bWxJbnRlcm5hbChodG1sOiBzdHJpbmcpOiBTYWZlSHRtbCB7XG4gIHJldHVybiBjcmVhdGVIdG1sSW50ZXJuYWwoaHRtbCk7XG59XG5cbi8qKlxuICogZmV0Y2hlcyBhIGdpdmVuIHtAbGluayBUcnVzdGVkUmVzb3VyY2VVcmx9LFxuICogYW5kIHJldHVybnMgYSB2YWx1ZSB3aGljaCBjYW4gYmUgdHVybmVkIGludG8gYSBnaXZlbiBzYWZlIHR5cGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFJlc291cmNlVXJsKHU6IFRydXN0ZWRSZXNvdXJjZVVybCk6XG4gICAgUHJvbWlzZTxTYWZlUmVzcG9uc2U+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1bndyYXBSZXNvdXJjZVVybCh1KS50b1N0cmluZygpKTtcbiAgLyoqXG4gICAqIHRoZSBjb250ZW50IHR5cGUgdHlwZSBvZiB0aGUgcmVzcG9uc2UsIGV4Y2x1ZGluZyBhbnkgTUlNRSBwYXJhbXNcbiAgICovXG4gIGNvbnN0IG1pbWVUeXBlID1cbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKT8uc3BsaXQoJzsnLCAyKT8uWzBdPy50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiB7XG4gICAgYXN5bmMgaHRtbCgpOiBQcm9taXNlPFNhZmVIdG1sPiB7XG4gICAgICBpZiAobWltZVR5cGUgIT09ICd0ZXh0L2h0bWwnKSB7XG4gICAgICAgIHRocm93IG5ldyBJbmNvcnJlY3RDb250ZW50VHlwZUVycm9yKFxuICAgICAgICAgICAgcmVzcG9uc2UudXJsLCAnU2FmZUh0bWwnLCAndGV4dC9odG1sJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICByZXR1cm4gcHJpdmF0ZWNyZWF0ZUh0bWxJbnRlcm5hbCh0ZXh0KTtcbiAgICB9LFxuXG4gICAgYXN5bmMgc2NyaXB0KCk6IFByb21pc2U8U2FmZVNjcmlwdD4ge1xuICAgICAgLy8gc2VlOlxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2NyaXB0aW5nTGFuZ3VhZ2VzXG4gICAgICBpZiAobWltZVR5cGUgIT09ICd0ZXh0L2phdmFzY3JpcHQnICYmXG4gICAgICAgICAgbWltZVR5cGUgIT09ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0Jykge1xuICAgICAgICB0aHJvdyBuZXcgSW5jb3JyZWN0Q29udGVudFR5cGVFcnJvcihcbiAgICAgICAgICAgIHJlc3BvbnNlLnVybCwgJ1NhZmVTY3JpcHQnLCAndGV4dC9qYXZhc2NyaXB0Jyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICByZXR1cm4gY3JlYXRlU2NyaXB0SW50ZXJuYWwodGV4dCk7XG4gICAgfSxcblxuICAgIGFzeW5jIHN0eWxlU2hlZXQoKTogUHJvbWlzZTxTYWZlU3R5bGVTaGVldD4ge1xuICAgICAgaWYgKG1pbWVUeXBlICE9PSAndGV4dC9jc3MnKSB7XG4gICAgICAgIHRocm93IG5ldyBJbmNvcnJlY3RDb250ZW50VHlwZUVycm9yKFxuICAgICAgICAgICAgcmVzcG9uc2UudXJsLCAnU2FmZVN0eWxlU2hlZXQnLCAndGV4dC9jc3MnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZVNoZWV0SW50ZXJuYWwodGV4dCk7XG4gICAgfVxuICB9O1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/globals/global.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/global.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.global');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/global.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_script_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.script_impl");
const tsickle_fetch_2 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.fetch");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const script_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.script_impl');
const fetch_1 = goog.require('google3.third_party.javascript.safevalues.dom.globals.fetch');
exports.fetchResourceUrl = fetch_1.fetchResourceUrl;
/** @typedef {!tsickle_fetch_2.SafeResponse} */
exports.SafeResponse; // re-export typedef
/**
 * Evaluates a SafeScript value in the given scope using eval.
 *
 * Strongly consider avoiding this, as eval blocks CSP adoption and does not
 * benefit from compiler optimizations.
 * @param {(?|!Window)} win
 * @param {!tsickle_script_impl_1.SafeScript} script
 * @return {*}
 */
function globalEval(win, script) {
    /** @type {(string|!TrustedScript)} */
    const trustedScript = (0, script_impl_1.unwrapScript)(script);
    /** @type {?} */
    let result = ((/** @type {?} */ (win))).eval((/** @type {string} */ (trustedScript)));
    if (result === trustedScript) {
        // https://crbug.com/1024786 manifesting in workers.
        result = ((/** @type {?} */ (win))).eval(trustedScript.toString());
    }
    return result;
}
exports.globalEval = globalEval;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9nbG9iYWxzL2dsb2JhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxzR0FBcUU7QUFFckUsNEZBQXVEO0FBQS9DLG1DQUFBLGdCQUFnQixDQUFBOzs7Ozs7Ozs7Ozs7QUFReEIsU0FBZ0IsVUFBVSxDQUN0QixHQUE2QixFQUFFLE1BQWtCOztVQUM3QyxhQUFhLEdBQUcsSUFBQSwwQkFBWSxFQUFDLE1BQU0sQ0FBQzs7UUFDdEMsTUFBTSxHQUFHLENBQUMsbUJBQUEsR0FBRyxFQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUFBLGFBQWEsRUFBVSxDQUFDO0lBQ3JFLElBQUksTUFBTSxLQUFLLGFBQWEsRUFBRTs7UUFFNUIsTUFBTSxHQUFHLENBQUMsbUJBQUEsR0FBRyxFQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ3BFO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQVRELGdDQVNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1NhZmVTY3JpcHQsIHVud3JhcFNjcmlwdH0gZnJvbSAnLi4vLi4vaW50ZXJuYWxzL3NjcmlwdF9pbXBsJztcblxuZXhwb3J0IHtmZXRjaFJlc291cmNlVXJsLCBTYWZlUmVzcG9uc2V9IGZyb20gJy4vZmV0Y2gnO1xuXG4vKipcbiAqIEV2YWx1YXRlcyBhIFNhZmVTY3JpcHQgdmFsdWUgaW4gdGhlIGdpdmVuIHNjb3BlIHVzaW5nIGV2YWwuXG4gKlxuICogU3Ryb25nbHkgY29uc2lkZXIgYXZvaWRpbmcgdGhpcywgYXMgZXZhbCBibG9ja3MgQ1NQIGFkb3B0aW9uIGFuZCBkb2VzIG5vdFxuICogYmVuZWZpdCBmcm9tIGNvbXBpbGVyIG9wdGltaXphdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnbG9iYWxFdmFsKFxuICAgIHdpbjogV2luZG93fHR5cGVvZiBnbG9iYWxUaGlzLCBzY3JpcHQ6IFNhZmVTY3JpcHQpOiB1bmtub3duIHtcbiAgY29uc3QgdHJ1c3RlZFNjcmlwdCA9IHVud3JhcFNjcmlwdChzY3JpcHQpO1xuICBsZXQgcmVzdWx0ID0gKHdpbiBhcyB0eXBlb2YgZ2xvYmFsVGhpcykuZXZhbCh0cnVzdGVkU2NyaXB0IGFzIHN0cmluZyk7XG4gIGlmIChyZXN1bHQgPT09IHRydXN0ZWRTY3JpcHQpIHtcbiAgICAvLyBodHRwczovL2NyYnVnLmNvbS8xMDI0Nzg2IG1hbmlmZXN0aW5nIGluIHdvcmtlcnMuXG4gICAgcmVzdWx0ID0gKHdpbiBhcyB0eXBlb2YgZ2xvYmFsVGhpcykuZXZhbCh0cnVzdGVkU2NyaXB0LnRvU3RyaW5nKCkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/globals/location.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/location.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.location');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/location.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * setHref safely sets {\@link Location.href} on the given {\@link Location} with
 * given {\@link Url}.
 * @param {!Location} loc
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function setHref(loc, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        loc.href = sanitizedUrl;
    }
}
exports.setHref = setHref;
/**
 * replace safely calls {\@link Location.replace} on the given {\@link Location}
 * with given {\@link Url}.
 * @param {!Location} loc
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function replace(loc, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        loc.replace(sanitizedUrl);
    }
}
exports.replace = replace;
/**
 * assign safely calls {\@link Location.assign} on the given {\@link Location}
 * with given {\@link Url}.
 * @param {!Location} loc
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @return {void}
 */
function assign(loc, url) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        loc.assign(sanitizedUrl);
    }
}
exports.assign = assign;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2dsb2JhbHMvbG9jYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBS0EseUdBQXNFOzs7Ozs7OztBQU10RSxTQUFnQixPQUFPLENBQUMsR0FBYSxFQUFFLEdBQVE7O1VBQ3ZDLFlBQVksR0FBRyxJQUFBLG1DQUFtQixFQUFDLEdBQUcsQ0FBQztJQUM3QyxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsR0FBRyxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7S0FDekI7QUFDSCxDQUFDO0FBTEQsMEJBS0M7Ozs7Ozs7O0FBTUQsU0FBZ0IsT0FBTyxDQUFDLEdBQWEsRUFBRSxHQUFROztVQUN2QyxZQUFZLEdBQUcsSUFBQSxtQ0FBbUIsRUFBQyxHQUFHLENBQUM7SUFDN0MsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDM0I7QUFDSCxDQUFDO0FBTEQsMEJBS0M7Ozs7Ozs7O0FBTUQsU0FBZ0IsTUFBTSxDQUFDLEdBQWEsRUFBRSxHQUFROztVQUN0QyxZQUFZLEdBQUcsSUFBQSxtQ0FBbUIsRUFBQyxHQUFHLENBQUM7SUFDN0MsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDMUI7QUFDSCxDQUFDO0FBTEQsd0JBS0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7dW53cmFwVXJsT3JTYW5pdGl6ZSwgVXJsfSBmcm9tICcuLi8uLi9idWlsZGVycy91cmxfc2FuaXRpemVyJztcblxuLyoqXG4gKiBzZXRIcmVmIHNhZmVseSBzZXRzIHtAbGluayBMb2NhdGlvbi5ocmVmfSBvbiB0aGUgZ2l2ZW4ge0BsaW5rIExvY2F0aW9ufSB3aXRoXG4gKiBnaXZlbiB7QGxpbmsgVXJsfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEhyZWYobG9jOiBMb2NhdGlvbiwgdXJsOiBVcmwpIHtcbiAgY29uc3Qgc2FuaXRpemVkVXJsID0gdW53cmFwVXJsT3JTYW5pdGl6ZSh1cmwpO1xuICBpZiAoc2FuaXRpemVkVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICBsb2MuaHJlZiA9IHNhbml0aXplZFVybDtcbiAgfVxufVxuXG4vKipcbiAqIHJlcGxhY2Ugc2FmZWx5IGNhbGxzIHtAbGluayBMb2NhdGlvbi5yZXBsYWNlfSBvbiB0aGUgZ2l2ZW4ge0BsaW5rIExvY2F0aW9ufVxuICogd2l0aCBnaXZlbiB7QGxpbmsgVXJsfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UobG9jOiBMb2NhdGlvbiwgdXJsOiBVcmwpIHtcbiAgY29uc3Qgc2FuaXRpemVkVXJsID0gdW53cmFwVXJsT3JTYW5pdGl6ZSh1cmwpO1xuICBpZiAoc2FuaXRpemVkVXJsICE9PSB1bmRlZmluZWQpIHtcbiAgICBsb2MucmVwbGFjZShzYW5pdGl6ZWRVcmwpO1xuICB9XG59XG5cbi8qKlxuICogYXNzaWduIHNhZmVseSBjYWxscyB7QGxpbmsgTG9jYXRpb24uYXNzaWdufSBvbiB0aGUgZ2l2ZW4ge0BsaW5rIExvY2F0aW9ufVxuICogd2l0aCBnaXZlbiB7QGxpbmsgVXJsfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihsb2M6IExvY2F0aW9uLCB1cmw6IFVybCkge1xuICBjb25zdCBzYW5pdGl6ZWRVcmwgPSB1bndyYXBVcmxPclNhbml0aXplKHVybCk7XG4gIGlmIChzYW5pdGl6ZWRVcmwgIT09IHVuZGVmaW5lZCkge1xuICAgIGxvYy5hc3NpZ24oc2FuaXRpemVkVXJsKTtcbiAgfVxufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/globals/service_worker_container.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/service_worker_container.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.service_worker_container');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/service_worker_container.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/**
 * Safely registers a service worker by URL
 * @param {!ServiceWorkerContainer} container
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} scriptURL
 * @param {(undefined|!RegistrationOptions)=} options
 * @return {!Promise<!ServiceWorkerRegistration>}
 */
function register(container, scriptURL, options) {
    return container.register((/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(scriptURL))), options);
}
exports.register = register;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZV93b3JrZXJfY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9nbG9iYWxzL3NlcnZpY2Vfd29ya2VyX2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLGtIQUF3Rjs7Ozs7Ozs7QUFHeEYsU0FBZ0IsUUFBUSxDQUNwQixTQUFpQyxFQUFFLFNBQTZCLEVBQ2hFLE9BQTZCO0lBQy9CLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyx3QkFBQSxJQUFBLHFDQUFpQixFQUFDLFNBQVMsQ0FBQyxFQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDN0UsQ0FBQztBQUpELDRCQUlDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1RydXN0ZWRSZXNvdXJjZVVybCwgdW53cmFwUmVzb3VyY2VVcmx9IGZyb20gJy4uLy4uL2ludGVybmFscy9yZXNvdXJjZV91cmxfaW1wbCc7XG5cbi8qKiBTYWZlbHkgcmVnaXN0ZXJzIGEgc2VydmljZSB3b3JrZXIgYnkgVVJMICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXIoXG4gICAgY29udGFpbmVyOiBTZXJ2aWNlV29ya2VyQ29udGFpbmVyLCBzY3JpcHRVUkw6IFRydXN0ZWRSZXNvdXJjZVVybCxcbiAgICBvcHRpb25zPzogUmVnaXN0cmF0aW9uT3B0aW9ucyk6IFByb21pc2U8U2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbj4ge1xuICByZXR1cm4gY29udGFpbmVyLnJlZ2lzdGVyKHVud3JhcFJlc291cmNlVXJsKHNjcmlwdFVSTCkgYXMgc3RyaW5nLCBvcHRpb25zKTtcbn1cbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/globals/url.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/url.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.url');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/url.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_builders_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_builders");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_builders_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_builders'); // LINE-INTERNAL
// LINE-INTERNAL
// BEGIN-EXTERNAL
// /**
//  * A pattern that matches safe MIME types. Only matches image, video and audio
//  * types, with some parameter support (most notably, we haven't implemented the
//  * more complex parts like %-encoded characters or non-alphanumerical ones for
//  * simplicity's sake). Also, the specs are fairly complex, and they don't
//  * necessarily agree with Chrome on some aspects, and so we settled on a subset
//  * where the behavior makes sense to all parties involved.
//  *
//  * The spec is available at https://mimesniff.spec.whatwg.org/ (and see
//  * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of
//  * it).
//  */
//  function isSafeMimeType(mimeType: string): boolean {
//   const match = mimeType.match(/^([^;]+)(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i);
//   return match?.length === 2 &&
//       (isSafeImageMimeType(match[1]) || isSafeVideoMimeType(match[1]) ||
//        isSafeAudioMimeType(match[1]));
// }
//
// function isSafeImageMimeType(mimeType: string): boolean {
//   return /^image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)$/i.test(
//       mimeType);
// }
//
// function isSafeVideoMimeType(mimeType: string): boolean {
//   return /^video\/(?:mpeg|mp4|ogg|webm|x-matroska|quicktime|x-ms-wmv)$/i.test(
//       mimeType);
// }
//
// function isSafeAudioMimeType(mimeType: string): boolean {
//   return /^audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)$/i
//       .test(mimeType);
// }
// END-EXTERNAL
/**
 * Wraps URL.createObjectURL, checking the safety of the source. For blobs, the
 * function validates that the Blob's type is amongst the safe MIME types, and
 * throws if that's not the case. URL.revokeObjectURL should be called on the
 * returned URL to free the resources.
 * @param {(!Blob|!MediaSource)} source
 * @return {string}
 */
function objectUrlFromSafeSource(source) {
    // BEGIN-INTERNAL
    return (0, url_builders_1.objectUrlFromSafeSource)(source).toString();
    // END-INTERNAL
    // BEGIN-EXTERNAL
    // // MediaSource support in Safari is limited
    // // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource#browser_compatibility
    // if (typeof MediaSource !== 'undefined' && source instanceof MediaSource) {
    //   return URL.createObjectURL(source);
    // }
    // const blob = source as Blob;
    // if (!isSafeMimeType(blob.type)) {
    //   let message = '';
    //   if (DEV_MODE) {
    //     message = `unsafe blob MIME type: ${blob.type}`;
    //   }
    //   throw new Error(message);
    // }
    // return URL.createObjectURL(blob);
    // END-EXTERNAL
}
exports.objectUrlFromSafeSource = objectUrlFromSafeSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9nbG9iYWxzL3VybC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLHVHQUFzRyxDQUFFLGdCQUFnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEN4SCxTQUFnQix1QkFBdUIsQ0FBQyxNQUF3QjtJQUM5RCxpQkFBaUI7SUFDakIsT0FBTyxJQUFBLHNDQUE4QixFQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3pELGVBQWU7SUFDZixpQkFBaUI7SUFDakIsOENBQThDO0lBQzlDLHdGQUF3RjtJQUN4Riw2RUFBNkU7SUFDN0Usd0NBQXdDO0lBQ3hDLElBQUk7SUFDSiwrQkFBK0I7SUFDL0Isb0NBQW9DO0lBQ3BDLHNCQUFzQjtJQUN0QixvQkFBb0I7SUFDcEIsdURBQXVEO0lBQ3ZELE1BQU07SUFDTiw4QkFBOEI7SUFDOUIsSUFBSTtJQUNKLG9DQUFvQztJQUNwQyxlQUFlO0FBQ2pCLENBQUM7QUFwQkQsMERBb0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge29iamVjdFVybEZyb21TYWZlU291cmNlIGFzIG9iamVjdFVybEZyb21TYWZlU291cmNlQnVpbGRlcn0gZnJvbSAnLi4vLi4vYnVpbGRlcnMvdXJsX2J1aWxkZXJzJzsgIC8vIExJTkUtSU5URVJOQUxcblxuLy8gQkVHSU4tRVhURVJOQUxcbi8vIC8qKlxuLy8gICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIE1JTUUgdHlwZXMuIE9ubHkgbWF0Y2hlcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvXG4vLyAgKiB0eXBlcywgd2l0aCBzb21lIHBhcmFtZXRlciBzdXBwb3J0IChtb3N0IG5vdGFibHksIHdlIGhhdmVuJ3QgaW1wbGVtZW50ZWQgdGhlXG4vLyAgKiBtb3JlIGNvbXBsZXggcGFydHMgbGlrZSAlLWVuY29kZWQgY2hhcmFjdGVycyBvciBub24tYWxwaGFudW1lcmljYWwgb25lcyBmb3Jcbi8vICAqIHNpbXBsaWNpdHkncyBzYWtlKS4gQWxzbywgdGhlIHNwZWNzIGFyZSBmYWlybHkgY29tcGxleCwgYW5kIHRoZXkgZG9uJ3Rcbi8vICAqIG5lY2Vzc2FyaWx5IGFncmVlIHdpdGggQ2hyb21lIG9uIHNvbWUgYXNwZWN0cywgYW5kIHNvIHdlIHNldHRsZWQgb24gYSBzdWJzZXRcbi8vICAqIHdoZXJlIHRoZSBiZWhhdmlvciBtYWtlcyBzZW5zZSB0byBhbGwgcGFydGllcyBpbnZvbHZlZC5cbi8vICAqXG4vLyAgKiBUaGUgc3BlYyBpcyBhdmFpbGFibGUgYXQgaHR0cHM6Ly9taW1lc25pZmYuc3BlYy53aGF0d2cub3JnLyAoYW5kIHNlZVxuLy8gICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzIzOTcgZm9yIGRhdGE6IHVybHMsIHdoaWNoIG92ZXJyaWRlIHNvbWUgb2Zcbi8vICAqIGl0KS5cbi8vICAqL1xuLy8gIGZ1bmN0aW9uIGlzU2FmZU1pbWVUeXBlKG1pbWVUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbi8vICAgY29uc3QgbWF0Y2ggPSBtaW1lVHlwZS5tYXRjaCgvXihbXjtdKykoPzo7XFx3Kz0oPzpcXHcrfFwiW1xcdzssPSBdK1wiKSkqJC9pKTtcbi8vICAgcmV0dXJuIG1hdGNoPy5sZW5ndGggPT09IDIgJiZcbi8vICAgICAgIChpc1NhZmVJbWFnZU1pbWVUeXBlKG1hdGNoWzFdKSB8fCBpc1NhZmVWaWRlb01pbWVUeXBlKG1hdGNoWzFdKSB8fFxuLy8gICAgICAgIGlzU2FmZUF1ZGlvTWltZVR5cGUobWF0Y2hbMV0pKTtcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBpc1NhZmVJbWFnZU1pbWVUeXBlKG1pbWVUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbi8vICAgcmV0dXJuIC9eaW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnB8eC1pY29ufGhlaWN8aGVpZikkL2kudGVzdChcbi8vICAgICAgIG1pbWVUeXBlKTtcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBpc1NhZmVWaWRlb01pbWVUeXBlKG1pbWVUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbi8vICAgcmV0dXJuIC9edmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibXx4LW1hdHJvc2thfHF1aWNrdGltZXx4LW1zLXdtdikkL2kudGVzdChcbi8vICAgICAgIG1pbWVUeXBlKTtcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBpc1NhZmVBdWRpb01pbWVUeXBlKG1pbWVUeXBlOiBzdHJpbmcpOiBib29sZWFuIHtcbi8vICAgcmV0dXJuIC9eYXVkaW9cXC8oPzozZ3BwMnwzZ3BwfGFhY3xMMTZ8bWlkaXxtcDN8bXA0fG1wZWd8b2dhfG9nZ3xvcHVzfHgtbTRhfHgtbWF0cm9za2F8eC13YXZ8d2F2fHdlYm0pJC9pXG4vLyAgICAgICAudGVzdChtaW1lVHlwZSk7XG4vLyB9XG4vLyBFTkQtRVhURVJOQUxcblxuLyoqXG4gKiBXcmFwcyBVUkwuY3JlYXRlT2JqZWN0VVJMLCBjaGVja2luZyB0aGUgc2FmZXR5IG9mIHRoZSBzb3VyY2UuIEZvciBibG9icywgdGhlXG4gKiBmdW5jdGlvbiB2YWxpZGF0ZXMgdGhhdCB0aGUgQmxvYidzIHR5cGUgaXMgYW1vbmdzdCB0aGUgc2FmZSBNSU1FIHR5cGVzLCBhbmRcbiAqIHRocm93cyBpZiB0aGF0J3Mgbm90IHRoZSBjYXNlLiBVUkwucmV2b2tlT2JqZWN0VVJMIHNob3VsZCBiZSBjYWxsZWQgb24gdGhlXG4gKiByZXR1cm5lZCBVUkwgdG8gZnJlZSB0aGUgcmVzb3VyY2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0VXJsRnJvbVNhZmVTb3VyY2Uoc291cmNlOiBCbG9ifE1lZGlhU291cmNlKTogc3RyaW5nIHtcbiAgLy8gQkVHSU4tSU5URVJOQUxcbiAgcmV0dXJuIG9iamVjdFVybEZyb21TYWZlU291cmNlQnVpbGRlcihzb3VyY2UpLnRvU3RyaW5nKCk7XG4gIC8vIEVORC1JTlRFUk5BTFxuICAvLyBCRUdJTi1FWFRFUk5BTFxuICAvLyAvLyBNZWRpYVNvdXJjZSBzdXBwb3J0IGluIFNhZmFyaSBpcyBsaW1pdGVkXG4gIC8vIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NZWRpYVNvdXJjZSNicm93c2VyX2NvbXBhdGliaWxpdHlcbiAgLy8gaWYgKHR5cGVvZiBNZWRpYVNvdXJjZSAhPT0gJ3VuZGVmaW5lZCcgJiYgc291cmNlIGluc3RhbmNlb2YgTWVkaWFTb3VyY2UpIHtcbiAgLy8gICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChzb3VyY2UpO1xuICAvLyB9XG4gIC8vIGNvbnN0IGJsb2IgPSBzb3VyY2UgYXMgQmxvYjtcbiAgLy8gaWYgKCFpc1NhZmVNaW1lVHlwZShibG9iLnR5cGUpKSB7XG4gIC8vICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgLy8gICBpZiAoREVWX01PREUpIHtcbiAgLy8gICAgIG1lc3NhZ2UgPSBgdW5zYWZlIGJsb2IgTUlNRSB0eXBlOiAke2Jsb2IudHlwZX1gO1xuICAvLyAgIH1cbiAgLy8gICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIC8vIH1cbiAgLy8gcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gIC8vIEVORC1FWFRFUk5BTFxufVxuXG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/globals/window.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/window.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.window');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/window.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_url_sanitizer_1 = goog.requireType("google3.third_party.javascript.safevalues.builders.url_sanitizer");
const tsickle_SafeUrl_2 = goog.requireType("goog.html.SafeUrl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const url_sanitizer_1 = goog.require('google3.third_party.javascript.safevalues.builders.url_sanitizer');
/**
 * open calls {\@link Window.open} on the given {\@link Window}, given a
 * target {\@link Url}.
 * @param {!Window} win
 * @param {(string|!tsickle_SafeUrl_2)} url
 * @param {(undefined|string)=} target
 * @param {(undefined|string)=} features
 * @return {(null|!Window)}
 */
function open(win, url, target, features) {
    /** @type {(undefined|string)} */
    const sanitizedUrl = (0, url_sanitizer_1.unwrapUrlOrSanitize)(url);
    if (sanitizedUrl !== undefined) {
        return win.open(sanitizedUrl, target, features);
    }
    return null;
}
exports.open = open;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9nbG9iYWxzL3dpbmRvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSx5R0FBc0U7Ozs7Ozs7Ozs7QUFNdEUsU0FBZ0IsSUFBSSxDQUNoQixHQUFXLEVBQUUsR0FBUSxFQUFFLE1BQWUsRUFBRSxRQUFpQjs7VUFDckQsWUFBWSxHQUFHLElBQUEsbUNBQW1CLEVBQUMsR0FBRyxDQUFDO0lBQzdDLElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtRQUM5QixPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztLQUNqRDtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQVBELG9CQU9DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge3Vud3JhcFVybE9yU2FuaXRpemUsIFVybH0gZnJvbSAnLi4vLi4vYnVpbGRlcnMvdXJsX3Nhbml0aXplcic7XG5cbi8qKlxuICogb3BlbiBjYWxscyB7QGxpbmsgV2luZG93Lm9wZW59IG9uIHRoZSBnaXZlbiB7QGxpbmsgV2luZG93fSwgZ2l2ZW4gYVxuICogdGFyZ2V0IHtAbGluayBVcmx9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb3BlbihcbiAgICB3aW46IFdpbmRvdywgdXJsOiBVcmwsIHRhcmdldD86IHN0cmluZywgZmVhdHVyZXM/OiBzdHJpbmcpOiBXaW5kb3d8bnVsbCB7XG4gIGNvbnN0IHNhbml0aXplZFVybCA9IHVud3JhcFVybE9yU2FuaXRpemUodXJsKTtcbiAgaWYgKHNhbml0aXplZFVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHdpbi5vcGVuKHNhbml0aXplZFVybCwgdGFyZ2V0LCBmZWF0dXJlcyk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=
;return exports;});

//third_party/javascript/safevalues/dom/globals/worker.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview added by tsickle
 * Generated from: third_party/javascript/safevalues/dom/globals/worker.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.globals.worker');
var module = module || { id: 'third_party/javascript/safevalues/dom/globals/worker.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_resource_url_impl_1 = goog.requireType("google3.third_party.javascript.safevalues.internals.resource_url_impl");
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
const resource_url_impl_1 = goog.require('google3.third_party.javascript.safevalues.internals.resource_url_impl');
/**
 * ScopeWithImportScripts is an {\@link WindowOrWorkerGlobalScope} that also
 * has {\@link WorkerGlobalScope.importScripts} as {\@link WorkerGlobalScope} in
 * some cases cannot be depended on directly.
 * @record
 * @extends {WindowOrWorkerGlobalScope}
 */
function ScopeWithImportScripts() { }
exports.ScopeWithImportScripts = ScopeWithImportScripts;
/* istanbul ignore if */
if (false) {
    /**
     * @type {function(...string): void}
     * @public
     */
    ScopeWithImportScripts.prototype.importScripts;
}
/**
 * Safely creates a Web Worker.
 *
 * Example usage:
 *   const trustedResourceUrl = trustedResourceUrl`/safe_script.js`;
 *   safedom.safeWorker.create(trustedResourceUrl);
 * which is a safe alternative to
 *   new Worker(url);
 * The latter can result in loading untrusted code.
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} url
 * @param {(undefined|*)=} options
 * @return {!Worker}
 */
function create(url, options) {
    return new Worker((/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(url))), options);
}
exports.create = create;
/**
 * Safely creates a shared Web Worker.
 * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} url
 * @param {(undefined|string|!WorkerOptions)=} options
 * @return {!SharedWorker}
 */
function createShared(url, options) {
    return new SharedWorker((/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(url))), options);
}
exports.createShared = createShared;
/**
 * Safely calls importScripts
 * @param {!ScopeWithImportScripts} scope
 * @param {...!tsickle_resource_url_impl_1.TrustedResourceUrl} urls
 * @return {void}
 */
function importScripts(scope, ...urls) {
    scope.importScripts(...urls.map((/**
     * @param {!tsickle_resource_url_impl_1.TrustedResourceUrl} url
     * @return {string}
     */
    url => (/** @type {string} */ ((0, resource_url_impl_1.unwrapResourceUrl)(url))))));
}
exports.importScripts = importScripts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGhpcmRfcGFydHkvamF2YXNjcmlwdC9zYWZldmFsdWVzL2RvbS9nbG9iYWxzL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBLGtIQUF3Rjs7Ozs7Ozs7QUFVeEYscUNBRUM7Ozs7Ozs7O0lBREMsK0NBQTBDOzs7Ozs7Ozs7Ozs7Ozs7QUFhNUMsU0FBZ0IsTUFBTSxDQUFDLEdBQXVCLEVBQUUsT0FBWTtJQUMxRCxPQUFPLElBQUksTUFBTSxDQUFDLHdCQUFBLElBQUEscUNBQWlCLEVBQUMsR0FBRyxDQUFDLEVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBRkQsd0JBRUM7Ozs7Ozs7QUFHRCxTQUFnQixZQUFZLENBQ3hCLEdBQXVCLEVBQUUsT0FBOEI7SUFDekQsT0FBTyxJQUFJLFlBQVksQ0FBQyx3QkFBQSxJQUFBLHFDQUFpQixFQUFDLEdBQUcsQ0FBQyxFQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckUsQ0FBQztBQUhELG9DQUdDOzs7Ozs7O0FBR0QsU0FBZ0IsYUFBYSxDQUN6QixLQUE2QixFQUFFLEdBQUcsSUFBMEI7SUFDOUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHOzs7O0lBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyx3QkFBQSxJQUFBLHFDQUFpQixFQUFDLEdBQUcsQ0FBQyxFQUFVLEVBQUMsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFIRCxzQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtUcnVzdGVkUmVzb3VyY2VVcmwsIHVud3JhcFJlc291cmNlVXJsfSBmcm9tICcuLi8uLi9pbnRlcm5hbHMvcmVzb3VyY2VfdXJsX2ltcGwnO1xuXG4vLyBXZSBjYW4ndCBkZXBlbmQgb24gV29ya2VyR2xvYmFsU2NvcGUgZGlyZWN0bHksIGFzIGxpYi53ZWJ3b3JrZXIuZC50cyBhbHRlcnNcbi8vIHRoZSBnbG9iYWwgc2NvcGUgdHlwaW5nLlxuXG4vKipcbiAqIFNjb3BlV2l0aEltcG9ydFNjcmlwdHMgaXMgYW4ge0BsaW5rIFdpbmRvd09yV29ya2VyR2xvYmFsU2NvcGV9IHRoYXQgYWxzb1xuICogaGFzIHtAbGluayBXb3JrZXJHbG9iYWxTY29wZS5pbXBvcnRTY3JpcHRzfSBhcyB7QGxpbmsgV29ya2VyR2xvYmFsU2NvcGV9IGluXG4gKiBzb21lIGNhc2VzIGNhbm5vdCBiZSBkZXBlbmRlZCBvbiBkaXJlY3RseS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY29wZVdpdGhJbXBvcnRTY3JpcHRzIGV4dGVuZHMgV2luZG93T3JXb3JrZXJHbG9iYWxTY29wZSB7XG4gIGltcG9ydFNjcmlwdHM6ICguLi51cmw6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuXG4vKipcbiAqIFNhZmVseSBjcmVhdGVzIGEgV2ViIFdvcmtlci5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICBjb25zdCB0cnVzdGVkUmVzb3VyY2VVcmwgPSB0cnVzdGVkUmVzb3VyY2VVcmxgL3NhZmVfc2NyaXB0LmpzYDtcbiAqICAgc2FmZWRvbS5zYWZlV29ya2VyLmNyZWF0ZSh0cnVzdGVkUmVzb3VyY2VVcmwpO1xuICogd2hpY2ggaXMgYSBzYWZlIGFsdGVybmF0aXZlIHRvXG4gKiAgIG5ldyBXb3JrZXIodXJsKTtcbiAqIFRoZSBsYXR0ZXIgY2FuIHJlc3VsdCBpbiBsb2FkaW5nIHVudHJ1c3RlZCBjb2RlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKHVybDogVHJ1c3RlZFJlc291cmNlVXJsLCBvcHRpb25zPzoge30pOiBXb3JrZXIge1xuICByZXR1cm4gbmV3IFdvcmtlcih1bndyYXBSZXNvdXJjZVVybCh1cmwpIGFzIHN0cmluZywgb3B0aW9ucyk7XG59XG5cbi8qKiBTYWZlbHkgY3JlYXRlcyBhIHNoYXJlZCBXZWIgV29ya2VyLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNoYXJlZChcbiAgICB1cmw6IFRydXN0ZWRSZXNvdXJjZVVybCwgb3B0aW9ucz86IHN0cmluZ3xXb3JrZXJPcHRpb25zKTogU2hhcmVkV29ya2VyIHtcbiAgcmV0dXJuIG5ldyBTaGFyZWRXb3JrZXIodW53cmFwUmVzb3VyY2VVcmwodXJsKSBhcyBzdHJpbmcsIG9wdGlvbnMpO1xufVxuXG4vKiogU2FmZWx5IGNhbGxzIGltcG9ydFNjcmlwdHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBpbXBvcnRTY3JpcHRzKFxuICAgIHNjb3BlOiBTY29wZVdpdGhJbXBvcnRTY3JpcHRzLCAuLi51cmxzOiBUcnVzdGVkUmVzb3VyY2VVcmxbXSk6IHZvaWQge1xuICBzY29wZS5pbXBvcnRTY3JpcHRzKC4uLnVybHMubWFwKHVybCA9PiB1bndyYXBSZXNvdXJjZVVybCh1cmwpIGFzIHN0cmluZykpO1xufVxuIl19
;return exports;});

//third_party/javascript/safevalues/dom/index.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 *
 * @fileoverview This file re-exports all of the wrappers to ensure that we have
 * a clearly defined interface.
 *
 * Generated from: third_party/javascript/safevalues/dom/index.ts
 * @suppress {checkTypes} added by tsickle
 * @suppress {extraRequire} added by tsickle
 * @suppress {missingRequire} added by tsickle
 * @suppress {uselessCode} added by tsickle
 * @suppress {missingReturn} added by tsickle
 * @suppress {unusedPrivateMembers} added by tsickle
 * @suppress {missingOverride} added by tsickle
 * @suppress {const} added by tsickle
 */
goog.module('google3.third_party.javascript.safevalues.dom.index');
var module = module || { id: 'third_party/javascript/safevalues/dom/index.closure.js' };
goog.require('google3.third_party.javascript.tslib.tslib');
const tsickle_anchor_1 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.anchor");
const tsickle_area_2 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.area");
const tsickle_base_3 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.base");
const tsickle_button_4 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.button");
const tsickle_element_5 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.element");
const tsickle_embed_6 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.embed");
const tsickle_form_7 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.form");
const tsickle_iframe_8 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.iframe");
const tsickle_input_9 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.input");
const tsickle_link_10 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.link");
const tsickle_object_11 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.object");
const tsickle_script_12 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.script");
const tsickle_style_13 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.style");
const tsickle_svg_14 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.svg");
const tsickle_svg_use_15 = goog.requireType("google3.third_party.javascript.safevalues.dom.elements.svg_use");
const tsickle_document_16 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.document");
const tsickle_dom_parser_17 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.dom_parser");
const tsickle_global_18 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.global");
const tsickle_location_19 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.location");
const tsickle_range_20 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.range");
const tsickle_service_worker_container_21 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.service_worker_container");
const tsickle_url_22 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.url");
const tsickle_window_23 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.window");
const tsickle_worker_24 = goog.requireType("google3.third_party.javascript.safevalues.dom.globals.worker");
const tsickle_module_1_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.anchor');
/** @const */
exports.safeAnchorEl = tsickle_module_1_;
const tsickle_module_2_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.area');
/** @const */
exports.safeAreaEl = tsickle_module_2_;
const tsickle_module_3_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.base');
/** @const */
exports.safeBaseEl = tsickle_module_3_;
const tsickle_module_4_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.button');
/** @const */
exports.safeButtonEl = tsickle_module_4_;
const tsickle_module_5_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.element');
/** @const */
exports.safeElement = tsickle_module_5_;
const tsickle_module_6_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.embed');
/** @const */
exports.safeEmbedEl = tsickle_module_6_;
const tsickle_module_7_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.form');
/** @const */
exports.safeFormEl = tsickle_module_7_;
const tsickle_module_8_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.iframe');
/** @const */
exports.safeIframeEl = tsickle_module_8_;
const tsickle_module_9_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.input');
/** @const */
exports.safeInputEl = tsickle_module_9_;
const tsickle_module_10_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.link');
/** @const */
exports.safeLinkEl = tsickle_module_10_;
const tsickle_module_11_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.object');
/** @const */
exports.safeObjectEl = tsickle_module_11_;
const tsickle_module_12_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.script');
/** @const */
exports.safeScriptEl = tsickle_module_12_;
const tsickle_module_13_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.style');
/** @const */
exports.safeStyleEl = tsickle_module_13_;
const tsickle_module_14_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.svg');
/** @const */
exports.safeSvgEl = tsickle_module_14_;
const tsickle_module_15_ = goog.require('google3.third_party.javascript.safevalues.dom.elements.svg_use');
/** @const */
exports.safeSvgUseEl = tsickle_module_15_;
const tsickle_module_16_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.document');
/** @const */
exports.safeDocument = tsickle_module_16_;
const tsickle_module_17_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.dom_parser');
/** @const */
exports.safeDomParser = tsickle_module_17_;
const tsickle_module_18_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.global');
/** @const */
exports.safeGlobal = tsickle_module_18_;
const tsickle_module_19_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.location');
/** @const */
exports.safeLocation = tsickle_module_19_;
const tsickle_module_20_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.range');
/** @const */
exports.safeRange = tsickle_module_20_;
const tsickle_module_21_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.service_worker_container');
/** @const */
exports.safeServiceWorkerContainer = tsickle_module_21_;
const tsickle_module_22_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.url');
/** @const */
exports.safeUrl = tsickle_module_22_;
const tsickle_module_23_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.window');
/** @const */
exports.safeWindow = tsickle_module_23_;
const tsickle_module_24_ = goog.require('google3.third_party.javascript.safevalues.dom.globals.worker');
/** @const */
exports.safeWorker = tsickle_module_24_;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90aGlyZF9wYXJ0eS9qYXZhc2NyaXB0L3NhZmV2YWx1ZXMvZG9tL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVQSx3R0FBa0Q7O0FBQWxELHlDQUFrRDtBQUNsRCxzR0FBOEM7O0FBQTlDLHVDQUE4QztBQUM5QyxzR0FBOEM7O0FBQTlDLHVDQUE4QztBQUM5Qyx3R0FBa0Q7O0FBQWxELHlDQUFrRDtBQUNsRCx5R0FBa0Q7O0FBQWxELHdDQUFrRDtBQUNsRCx1R0FBZ0Q7O0FBQWhELHdDQUFnRDtBQUNoRCxzR0FBOEM7O0FBQTlDLHVDQUE4QztBQUM5Qyx3R0FBa0Q7O0FBQWxELHlDQUFrRDtBQUNsRCx1R0FBZ0Q7O0FBQWhELHdDQUFnRDtBQUNoRCx1R0FBOEM7O0FBQTlDLHdDQUE4QztBQUM5Qyx5R0FBa0Q7O0FBQWxELDBDQUFrRDtBQUNsRCx5R0FBa0Q7O0FBQWxELDBDQUFrRDtBQUNsRCx3R0FBZ0Q7O0FBQWhELHlDQUFnRDtBQUNoRCxzR0FBNEM7O0FBQTVDLHVDQUE0QztBQUM1QywwR0FBbUQ7O0FBQW5ELDBDQUFtRDtBQUNuRCwwR0FBbUQ7O0FBQW5ELDBDQUFtRDtBQUNuRCw0R0FBc0Q7O0FBQXRELDJDQUFzRDtBQUN0RCx3R0FBK0M7O0FBQS9DLHdDQUErQztBQUMvQywwR0FBbUQ7O0FBQW5ELDBDQUFtRDtBQUNuRCx1R0FBNkM7O0FBQTdDLHVDQUE2QztBQUM3QywwSEFBaUY7O0FBQWpGLHdEQUFpRjtBQUNqRixxR0FBeUM7O0FBQXpDLHFDQUF5QztBQUN6Qyx3R0FBK0M7O0FBQS9DLHdDQUErQztBQUMvQyx3R0FBK0M7O0FBQS9DLHdDQUErQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IFRoaXMgZmlsZSByZS1leHBvcnRzIGFsbCBvZiB0aGUgd3JhcHBlcnMgdG8gZW5zdXJlIHRoYXQgd2UgaGF2ZVxuICogYSBjbGVhcmx5IGRlZmluZWQgaW50ZXJmYWNlLlxuICovXG5cbmV4cG9ydCAqIGFzIHNhZmVBbmNob3JFbCBmcm9tICcuL2VsZW1lbnRzL2FuY2hvcic7XG5leHBvcnQgKiBhcyBzYWZlQXJlYUVsIGZyb20gJy4vZWxlbWVudHMvYXJlYSc7XG5leHBvcnQgKiBhcyBzYWZlQmFzZUVsIGZyb20gJy4vZWxlbWVudHMvYmFzZSc7XG5leHBvcnQgKiBhcyBzYWZlQnV0dG9uRWwgZnJvbSAnLi9lbGVtZW50cy9idXR0b24nO1xuZXhwb3J0ICogYXMgc2FmZUVsZW1lbnQgZnJvbSAnLi9lbGVtZW50cy9lbGVtZW50JztcbmV4cG9ydCAqIGFzIHNhZmVFbWJlZEVsIGZyb20gJy4vZWxlbWVudHMvZW1iZWQnO1xuZXhwb3J0ICogYXMgc2FmZUZvcm1FbCBmcm9tICcuL2VsZW1lbnRzL2Zvcm0nO1xuZXhwb3J0ICogYXMgc2FmZUlmcmFtZUVsIGZyb20gJy4vZWxlbWVudHMvaWZyYW1lJztcbmV4cG9ydCAqIGFzIHNhZmVJbnB1dEVsIGZyb20gJy4vZWxlbWVudHMvaW5wdXQnO1xuZXhwb3J0ICogYXMgc2FmZUxpbmtFbCBmcm9tICcuL2VsZW1lbnRzL2xpbmsnO1xuZXhwb3J0ICogYXMgc2FmZU9iamVjdEVsIGZyb20gJy4vZWxlbWVudHMvb2JqZWN0JztcbmV4cG9ydCAqIGFzIHNhZmVTY3JpcHRFbCBmcm9tICcuL2VsZW1lbnRzL3NjcmlwdCc7XG5leHBvcnQgKiBhcyBzYWZlU3R5bGVFbCBmcm9tICcuL2VsZW1lbnRzL3N0eWxlJztcbmV4cG9ydCAqIGFzIHNhZmVTdmdFbCBmcm9tICcuL2VsZW1lbnRzL3N2Zyc7XG5leHBvcnQgKiBhcyBzYWZlU3ZnVXNlRWwgZnJvbSAnLi9lbGVtZW50cy9zdmdfdXNlJztcbmV4cG9ydCAqIGFzIHNhZmVEb2N1bWVudCBmcm9tICcuL2dsb2JhbHMvZG9jdW1lbnQnO1xuZXhwb3J0ICogYXMgc2FmZURvbVBhcnNlciBmcm9tICcuL2dsb2JhbHMvZG9tX3BhcnNlcic7XG5leHBvcnQgKiBhcyBzYWZlR2xvYmFsIGZyb20gJy4vZ2xvYmFscy9nbG9iYWwnO1xuZXhwb3J0ICogYXMgc2FmZUxvY2F0aW9uIGZyb20gJy4vZ2xvYmFscy9sb2NhdGlvbic7XG5leHBvcnQgKiBhcyBzYWZlUmFuZ2UgZnJvbSAnLi9nbG9iYWxzL3JhbmdlJztcbmV4cG9ydCAqIGFzIHNhZmVTZXJ2aWNlV29ya2VyQ29udGFpbmVyIGZyb20gJy4vZ2xvYmFscy9zZXJ2aWNlX3dvcmtlcl9jb250YWluZXInO1xuZXhwb3J0ICogYXMgc2FmZVVybCBmcm9tICcuL2dsb2JhbHMvdXJsJztcbmV4cG9ydCAqIGFzIHNhZmVXaW5kb3cgZnJvbSAnLi9nbG9iYWxzL3dpbmRvdyc7XG5leHBvcnQgKiBhcyBzYWZlV29ya2VyIGZyb20gJy4vZ2xvYmFscy93b3JrZXInO1xuXG4vLyBCRUdJTi1JTlRFUk5BTFxuZ29vZy50c01pZ3JhdGlvbk5hbWVkRXhwb3J0c1NoaW0oJ3NhZmV2YWx1ZXMuZG9tJyk7XG5nb29nLnRzTWlncmF0aW9uRXhwb3J0c1NoaW1EZWNsYXJlTGVnYWN5TmFtZXNwYWNlKCk7XG4vLyBFTkQtSU5URVJOQUxcbiJdfQ==
;return exports;});

//third_party/javascript/safevalues/dom/index.tsmes.closure.js
goog.loadModule(function(exports) {'use strict';/**
 * @fileoverview generator:ts_migration_exports_shim.ts
 * original_file:third_party/javascript/safevalues/dom/index.ts
 * pintomodule absent in original_file
 */
goog.module('safevalues.dom');
goog.module.declareLegacyNamespace();
var mainModule = goog.require('google3.third_party.javascript.safevalues.dom.index');
exports.safeAnchorEl = mainModule.safeAnchorEl;
exports.safeAreaEl = mainModule.safeAreaEl;
exports.safeBaseEl = mainModule.safeBaseEl;
exports.safeButtonEl = mainModule.safeButtonEl;
exports.safeElement = mainModule.safeElement;
exports.safeEmbedEl = mainModule.safeEmbedEl;
exports.safeFormEl = mainModule.safeFormEl;
exports.safeIframeEl = mainModule.safeIframeEl;
exports.safeInputEl = mainModule.safeInputEl;
exports.safeLinkEl = mainModule.safeLinkEl;
exports.safeObjectEl = mainModule.safeObjectEl;
exports.safeScriptEl = mainModule.safeScriptEl;
exports.safeStyleEl = mainModule.safeStyleEl;
exports.safeSvgEl = mainModule.safeSvgEl;
exports.safeSvgUseEl = mainModule.safeSvgUseEl;
exports.safeDocument = mainModule.safeDocument;
exports.safeDomParser = mainModule.safeDomParser;
exports.safeGlobal = mainModule.safeGlobal;
exports.safeLocation = mainModule.safeLocation;
exports.safeRange = mainModule.safeRange;
exports.safeServiceWorkerContainer = mainModule.safeServiceWorkerContainer;
exports.safeUrl = mainModule.safeUrl;
exports.safeWindow = mainModule.safeWindow;
exports.safeWorker = mainModule.safeWorker;

;return exports;});

//corp/hiring/rabbithole/game/static/js/utils/countries.js
goog.loadModule(function(exports) {'use strict';goog.module('utils.countries');

const countries = [
  'Afghanistan',
  'Åland Islands',
  'Albania',
  'Algeria',
  'American Samoa',
  'Andorra',
  'Angola',
  'Anguilla',
  'Antarctica',
  'Antigua & Barbuda',
  'Argentina',
  'Armenia',
  'Aruba',
  'Australia',
  'Austria',
  'Azerbaijan',
  'Bahamas',
  'Bahrain',
  'Bangladesh',
  'Barbados',
  'Belarus',
  'Belgium',
  'Belize',
  'Benin',
  'Bermuda',
  'Bhutan',
  'Bolivia',
  'Bosnia & Herzegovina',
  'Botswana',
  'Bouvet Island',
  'Brazil',
  'British Indian Ocean Territory',
  'British Virgin Islands',
  'Brunei',
  'Bulgaria',
  'Burkina Faso',
  'Burundi',
  'Cambodia',
  'Cameroon',
  'Canada',
  'Cape Verde',
  'Caribbean Netherlands',
  'Cayman Islands',
  'Central African Republic',
  'Chad',
  'Chile',
  'China',
  'Christmas Island',
  'Cocos (Keeling) Islands',
  'Colombia',
  'Comoros',
  'Congo (DRC)',
  'Congo (Republic)',
  'Cook Islands',
  'Costa Rica',
  'Côte d’Ivoire',
  'Croatia',
  'Cuba',
  'Curaçao',
  'Cyprus',
  'Czech Republic',
  'Denmark',
  'Djibouti',
  'Dominica',
  'Dominican Republic',
  'Ecuador',
  'Egypt',
  'El Salvador',
  'Equatorial Guinea',
  'Eritrea',
  'Estonia',
  'Ethiopia',
  'Falkland Islands (Islas Malvinas)',
  'Faroe Islands',
  'Fiji',
  'Finland',
  'France',
  'French Guiana',
  'French Polynesia',
  'French Southern Territories',
  'Gabon',
  'Gambia',
  'Georgia',
  'Germany',
  'Ghana',
  'Gibraltar',
  'Greece',
  'Greenland',
  'Grenada',
  'Guadeloupe',
  'Guam',
  'Guatemala',
  'Guernsey',
  'Guinea',
  'Guinea-Bissau',
  'Guyana',
  'Haiti',
  'Heard & McDonald Islands',
  'Honduras',
  'Hong Kong',
  'Hungary',
  'Iceland',
  'India',
  'Indonesia',
  'Iran',
  'Iraq',
  'Ireland',
  'Isle of Man',
  'Israel',
  'Italy',
  'Jamaica',
  'Japan',
  'Jersey',
  'Jordan',
  'Kazakhstan',
  'Kenya',
  'Kiribati',
  'Kuwait',
  'Kyrgyzstan',
  'Laos',
  'Latvia',
  'Lebanon',
  'Lesotho',
  'Liberia',
  'Libya',
  'Liechtenstein',
  'Lithuania',
  'Luxembourg',
  'Macau',
  'Macedonia (FYROM)',
  'Madagascar',
  'Malawi',
  'Malaysia',
  'Maldives',
  'Mali',
  'Malta',
  'Marshall Islands',
  'Martinique',
  'Mauritania',
  'Mauritius',
  'Mayotte',
  'Mexico',
  'Micronesia',
  'Moldova',
  'Monaco',
  'Mongolia',
  'Montenegro',
  'Montserrat',
  'Morocco',
  'Mozambique',
  'Myanmar (Burma)',
  'Namibia',
  'Nauru',
  'Nepal',
  'Netherlands',
  'New Caledonia',
  'New Zealand',
  'Nicaragua',
  'Niger',
  'Nigeria',
  'Niue',
  'Norfolk Island',
  'North Korea',
  'Northern Mariana Islands',
  'Norway',
  'Oman',
  'Pakistan',
  'Palau',
  'Palestine',
  'Panama',
  'Papua New Guinea',
  'Paraguay',
  'Peru',
  'Philippines',
  'Pitcairn Islands',
  'Poland',
  'Portugal',
  'Puerto Rico',
  'Qatar',
  'Réunion',
  'Romania',
  'Russia',
  'Rwanda',
  'Samoa',
  'San Marino',
  'São Tomé & Príncipe',
  'Saudi Arabia',
  'Senegal',
  'Serbia',
  'Seychelles',
  'Sierra Leone',
  'Singapore',
  'Sint Maarten',
  'Slovakia',
  'Slovenia',
  'Solomon Islands',
  'Somalia',
  'South Africa',
  'South Georgia & South Sandwich Islands',
  'South Korea',
  'South Sudan',
  'Spain',
  'Sri Lanka',
  'St. Barthélemy',
  'St. Helena',
  'St. Kitts & Nevis',
  'St. Lucia',
  'St. Martin',
  'St. Pierre & Miquelon',
  'St. Vincent & Grenadines',
  'Sudan',
  'Suriname',
  'Svalbard & Jan Mayen',
  'Swaziland',
  'Sweden',
  'Switzerland',
  'Syria',
  'Taiwan',
  'Tajikistan',
  'Tanzania',
  'Thailand',
  'Timor-Leste',
  'Togo',
  'Tokelau',
  'Tonga',
  'Trinidad & Tobago',
  'Tunisia',
  'Turkey',
  'Turkmenistan',
  'Turks & Caicos Islands',
  'Tuvalu',
  'U.S. Outlying Islands',
  'U.S. Virgin Islands',
  'Uganda',
  'Ukraine',
  'United Arab Emirates',
  'United Kingdom',
  'United States',
  'Uruguay',
  'Uzbekistan',
  'Vanuatu',
  'Vatican City',
  'Venezuela',
  'Vietnam',
  'Wallis & Futuna',
  'Western Sahara',
  'Yemen',
  'Zambia',
  'Zimbabwe'
];

exports = {countries};

;return exports;});

//corp/hiring/rabbithole/game/static/js/utils/path.js
goog.loadModule(function(exports) {'use strict';goog.module('utils.path');

const {Backbone, _, $} = window;

const pathUtils = {
  /**
   * It gets the full path by using resolveBackdir unless the path starts by /
   * which would mean the path is absolute
   *
   * @param {string} path
   *
   * @see [resolveBackdir]{@link utils/path#resolveBackdir}
   *
   * @return {string}
   */
  getFullPath: function(path) {
    if (path && path[0] === '/') {  // Path is absolute
      return path;
    } else {
      return pathUtils.resolveBackdir(path);
    }
  },

  /**
   * It resolves the path if it contains .. which means it would be on a
   * different level than the actual one
   *
   * @param {string} path
   *
   * @return {string}
   */
  resolveBackdir: function(path) {
    var result;
    if (path.match(/\.\./g)) {
      var currentPath = window.AppView.instance.currentPath.split('/'),
          aux = path.split('/'), validParts = [];

      aux.forEach(function(back) {
        if (back === '..') {
          currentPath.pop();
        }
        /* istanbul ignore else */
        else if (back) {
          validParts.push(back);
        }
      });

      result = (currentPath.join('/') || '/');

      if (validParts.length) {
        result += '/' + validParts.join('');
      }
    } else {
      result = window.AppView.instance.currentPath;

      /* istanbul ignore else */
      if (path) {
        result += '/' + path;
      }
    }

    result = result.replace('//', '/');

    if (result[result.length - 1] === '/' && result.length > 1) {
      result = result.slice(0, -1);
    }

    return result;
  },

  /**
   * It generates a path that matches the one used on the FileSystem if it
   * contains .. otherwise it just returns the current path
   *
   * @param path
   * @return {string}
   */
  getPredictivePath: function(path) {
    var result = window.AppView.instance.currentPath,
        matches = path.match(/\.\./g);

    if (path && Array.isArray(matches)) {
      result = matches.join('/');

      if (matches.length === 1) {
        result += '/';
      }
    }

    return result;
  },

  /**
   * Fetches a file by it's path
   *
   * @param {string} path
   *
   * @see [File]{@link module:models/File}
   *
   * @return {?File} File instance
   */
  getFile: function(path) {
    const fullPath = pathUtils.getFullPath(path);

    return window.AppView.instance.files.find(
        ({attributes}) => attributes?.path === fullPath);
  },

  /**
   * Get all files at a certain path. Can be narrowed down by using the extra
   * parameter.
   *
   * @param {string} path
   * @param {Object} [extra] - Additional parameters to be passed to where
   *
   * @see [File]{@link module:models/File}
   *
   * @return {?Array<?Object>} Array of files
   */
  getFilesAt: function(path, extra) {
    const fullPath = pathUtils.getFullPath(path);
    let query = {parent: fullPath};

    if (extra && typeof extra === 'object') {
      query = $.extend({}, query, extra);
    }

    return window.AppView.instance.files.where(query);
  },

  /**
   * Get an array of file names by using getFilesAt
   *
   * @param {string} path
   * @param {Object} [extra] - Extra parameters to be passed
   *
   * @see [getFilesAt]{@link utils/path#getFilesAt}
   *
   * @return {?Array<?string>}
   */
  getFilesNameAt: function(path, extra) {
    return pathUtils.getFilesAt(path, extra).map(function(file) {
      return file.get('name');
    });
  }
};

exports = {pathUtils};

;return exports;});

//corp/hiring/rabbithole/game/static/js/utils/string.js
goog.loadModule(function(exports) {'use strict';goog.module('utils.string');

const {Backbone, _, $} = window;

const stringUtils = {
  /**
   * Replaces placeholders in a string with the arguments passed to the
   * method. Placeholders are wrapped in curly brackets, as in: {1}, {2}, etc.
   *
   * @return {string} - Newly formatted string.
   */
  format: function() {
    const args = Array.prototype.slice.call(arguments, 0);
    let formatted = args.shift();
    let i = 0;
    let value;
    let escape = true;
    let regExp;

    if (formatted === false) {
      escape = false;
      formatted = args.shift();
    }

    for (; i < args.length; i++) {
      regExp = new RegExp('\\{' + i + '\\}', 'gi');
      value = args[i];

      if (escape) {
        value = _.escape(value);
      }

      formatted = formatted.replace(regExp, value);
    }

    return formatted;
  },

  /**
   * Pads the beginning of a string to a provided length with 0s.
   *
   * @param {string} string - String to pad.
   * @param {!int} [size=2] - Length the string should be after being
   *     padded.
   * @param {string} [pad=0] - Pad character to be used to fill the string
   * @param {boolean} [padRight] - Whether the pad should happen to the right.
   *     Lef padding happens by default
   *
   * @return {string} - Padded string.
   */
  pad: function(string, size, pad, padRight) {
    const s = String(string);
    let padding;
    let result;

    if (typeof (size) !== 'number') {
      size = 2;
    }

    if (typeof (pad) === 'undefined') {
      pad = '0';
    }

    padding = (new Array(size)).join(pad);

    if (!padRight) {
      result = (padding + s).slice(-size);
    } else {
      result = (s + padding).substring(0, size);
    }

    return result;
  },

  /**
   * Breaks up a string into an array of chunks.
   *
   * @param {string} string - String to split into chunks.
   * @param {!int} characters - Break every n characters
   * @return {!Array} - Array of chunked strings.
   */
  breakEvery: function(string, characters) {
    let lineStartPos = 0;
    const result = [];

    const spanTermYellow = "<span class=\"term-yellow\">";
    const spanClose = "</span>";

    while (lineStartPos < string.length) {
        let end = lineStartPos + characters + 1;
        let line = string.substring(lineStartPos, end);

        // special cases: do not count span tags in line length
        if (line.includes(spanTermYellow)) {
          const newOffset = end + spanTermYellow.length + 1;

          line += string.substring(end, newOffset);
          end = newOffset;
        }

        if (line.includes(spanClose)) {
          const newOffset = end + spanClose.length + 1;

          line += string.substring(end, newOffset);
          end = newOffset;
        }

        let newLineStartPos = lineStartPos + line.length;

        // special cases: carry unfinished word to the next line
        if (newLineStartPos < string.length) {
          if (line.charAt(line.length-1) !== " " && string[newLineStartPos] !== " ") {
            const lastSpacePos = line.lastIndexOf(" ");
            const rewindSize = line.length - lastSpacePos;
            line = line.substring(0, lastSpacePos);
            newLineStartPos -= rewindSize;
          }
        }

        result.push(line.trim());

        lineStartPos = newLineStartPos;
    }

    return result;
  },

  /**
   * Strips unneeded spaces from a string.
   *
   * @param {string} string - String to string.
   * @return {string} - Stripped string.
   */
  cleanSpaces: function(string) {
    return string.trim().replace(/\s{2,}/g, ' ');
  },

  /**
   * Tests for a valid email address and returns true or false.
   *
   * @param {string} email - Email address.
   * @return {boolean} - Is valid or not.
   */
  isValidEmail: function(email) {
    const regExp =
        /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    return regExp.test(email);
  },

  isCharacterKeyPress: function(event) {
    if (_.isUndefined(event.which)) {
      return true;
    } else if (_.isNumber(event.which) && event.which > 0) {
      return !event.ctrlKey && !event.metaKey && !event.altKey &&
          event.which != 16;
    }
    return false;
  }
};

exports = {stringUtils};

;return exports;});

//corp/hiring/rabbithole/game/static/js/utils/analytics.js
goog.loadModule(function(exports) {'use strict';goog.module('utils.analytics');

/**
 * @fileoverview
 * Utility methods for interacting with Google Analytics.
 */

/**
 * Sends event data to Google Analytics.
 *
 * @param {?Object} eventData
 *
 */
function _track(eventData) {
  if (typeof ga === 'undefined') {
    throw new Error('Cannot find reference to "ga".');
  }

  ga('send', eventData);
}

/**
 * Sets the new variable in GA.
 *
 * @param {?Object} key
 * @param {?Object} value
 *
 */
function setVar(key, value) {
  if (typeof ga === 'undefined') {
    throw new Error('Cannot find reference to "ga".');
  }

  if (!key || !value) {
    throw new Error('Missing var "key" or "value" arguments.');
  }

  ga('set', key, value);
}

/**
 * Tracks an event in GA.
 *
 * @param {?string=} category - event category
 * @param {?string=} action - event action
 * @param {?string=} label - event label
 * @param {?string=} value - event context
 */
function trackEvent(category, action, label, value) {
  // Check for required fields.
  if (!category || !action) {
    throw new Error('Missing "category" or "action" arguments for GA event.');
  }

  const eventData = {
    hitType: 'event',
    eventCategory: category,
    eventAction: action,
  };

  if (label) {
    eventData.eventLabel = label;
  }

  if (value) {
    eventData.eventValue = value;
  }

  _track(eventData);
}

/**
 * Tracks a page view in GA.
 *
 * @param {?Object} page
 *
 */
function trackPage(page) {
  // Check for required fields.
  if (!page) {
    throw new Error('Missing "page" argument for GA event.');
  }

  const eventData = {hitType: 'pageview', page: page};

  _track(eventData);
}

exports.trackEvent = trackEvent;
exports.trackPage = trackPage;
exports.setVar = setVar;

;return exports;});

//corp/hiring/rabbithole/game/static/js/utils/user-agent.js
goog.loadModule(function(exports) {'use strict';goog.module('utils.userAgent');

const os = typeof navigator == 'object' &&
    (navigator.platform.match(/mac|win|linux/i) || ['other'])[0].toLowerCase();

/**
 * OS Detection to handle key expectation from users.
 */
const userAgent = {
  isWin: (os == 'win'),
  isMac: (os == 'mac'),
  isLinux: (os == 'linux')
};

exports = {userAgent};

;return exports;});

//corp/hiring/rabbithole/game/static/js/constants/file-languages.js
goog.loadModule(function(exports) {'use strict';goog.module('constants.fileLanguages');

const fileLanguages = {
  js: 'javascript',
  html: 'htmlmixed',
  coffee: 'coffeescript',
  css: 'css',
  py: 'python',
  java: 'java'
};

exports = {fileLanguages};

;return exports;});

//corp/hiring/rabbithole/game/static/js/models/File.js
goog.loadModule(function(exports) {'use strict';goog.module('models.File');

const Backbone = window.Backbone;
const {fileLanguages} = goog.require('constants.fileLanguages');

const fileModel = Backbone.Model.extend({
  /**
   * @property {Object} defaults - Default model values.
   */
  defaults: {
    name: '',
    path: '',
    content: '',
    language: '',
    content_type: '',
    editable: false
  },

  /**
   * Main initialize method. Sets the file's name from the path if one
   * doesn't already exist. Also sets the isHTML, language and extension
   * attributes based on the data returned by the API.
   */
  initialize: function() {
    if (!this.get('name')) {
      this.set('name', this.get('path').split('/').pop());
    }

    this.set('isHTML', this.get('content_type') === 'text/html');
    this.set('extension', this.get('name').split('.').pop());
    this.set('language', fileLanguages[this.get('extension')] || null);
  },

  /**
   * Handles getting the content of the file to be shown to the user. If
   * the content is HTML then it will be retrieved as is, if it's not, it
   * will be escaped.
   *
   * @return {string}
   */
  getOutputtableContent: function() {
    let content;

    if (!this.get('isHTML')) {
      content = this.escape('content')
                    .replace(/ /g, '&#8203;&nbsp;&#8203;')
                    .replace(/\r\n|\r|\n/g, '<br />');
    } else {
      content = this.get('content');
    }

    return content;
  }
});

exports = {fileModel};

;return exports;});

//corp/hiring/rabbithole/game/static/js/collections/FileSystem.js
goog.loadModule(function(exports) {'use strict';goog.module('collections.FileSystem');

const Backbone = window.Backbone;
const {fileModel} = goog.require('models.File');

/**
   * Defines a collection in which we can store our file system retrieved from
   * the API.
   *
   * @name module:collections/FileSystem
   * @constructor
   * @augments Backbone.Collection
   */
const FileSystem = Backbone.Collection.extend({
  url: '/api/v1/files/',
  model: fileModel,
  comparator: (file) => file.expiry,
  // Endpoint doesn't return an array so we need to parse the response
  parse: /* istanbul ignore next */ function(data) {
    return data.files;
  }
});

exports = {FileSystem};

;return exports;});

//corp/hiring/rabbithole/game/static/js/constants/commands-errors.js
goog.loadModule(function(exports) {'use strict';goog.module('constants.commandsErrors');

const commandsErrors = {
  NO_SUCH_FILE: '{0}: {1}: No such file or directory',
  NOT_FOUND:
      '{0}: command not found. Type <span class="term-yellow">help</span> for a list of commands',
  NOT_FOUND_QUOTE: [
    'He who foos last foos best!', 'Many smoke but foo men chew!',
    'Notary Sojac!', 'Where there\'s foo, there\'s fire!', '1506 nix nix!',
    'Scram gravy ain\'t wavey!'
  ],
  NOT_DIR: '{0}: {1}: Not a directory',
  NOT_FILE: '{0}: {1}: Is a directory',
  LOST_CHANGES_CLOSE_WARN: 'You have unsaved changes. Close anyway? [y|n] ',
  NO_EDITABLE: 'File not editable',
  NO_DIRTY: 'The file has no changes so it won\'t be saved.'
};

exports = {commandsErrors};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/common.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.common');

// const $ = goog.require('google3.third_party.javascript.jquery2');
const {$} = window;

const {commandsErrors} = goog.require('constants.commandsErrors');
const {pathUtils} = goog.require('utils.path');
const {stringUtils} = goog.require('utils.string');
// TODO: fix circular dep
// const AppView = goog.require('views.App');

const commonCommandMethods = {
  /**
   * Returns a formatted String like: "No such file or directory"
   *
   * @param {string} command - Command being executed
   * @param {!Array} arg - Array of additional parameters
   *
   * @see [stringUtils#format]{@link module:utils/string#format}
   * @see [CommandErrors]{@link module:constants/commands-errors}
   *
   * @return {string}
   */
  fileDirError: function(command, arg) {
    return stringUtils.format(commandsErrors.NO_SUCH_FILE, command, arg)
        .replace(': :', ':');
  },

  /**
   * Returns a randomly chosen error for a command which is that the
   * command executed couldn't be found
   *
   * @param {string} command - Command being executed
   *
   * @see [stringUtils#format]{@link module:utils/string#format}
   * @see [command-errors]{@link module:constants/commands-errors}
   *
   * @return {!Array<!Object>}
   */
  defaultError: function(command) {
    const dieRoll = Math.floor(Math.random() * 6);
    let err = '';

    if (dieRoll === 3) {
      err = commandsErrors.NOT_FOUND_QUOTE[Math.floor(
                Math.random() * commandsErrors.NOT_FOUND_QUOTE.length)] +
          '<br>';
    }

    err += stringUtils.format(commandsErrors.NOT_FOUND, command);

    return [{content: err}];
  },

  /**
   * Handles fetching a file from the FileSystem and erroring if the file
   * is not a file, or if it's not editable
   *
   * @param {string} command - Command being run
   * @param {!Array} args - Additional arguments
   * @param {!Function} callback - Callback to be invoked with the result
   * @param {?boolean} [errorIfNotEditable=true] - Whether if it should
   *     error or not if the file is not editable
   *
   * @see [fileDirError]{@link module:commands/common#fileDirError}
   */
  getFileOrError: function(command, args, callback, errorIfNotEditable) {
    let file;
    let result = null;

    if (args && args[0]) {
      file = pathUtils.getFile(args[0]);  // Ignoring the rest
    }

    errorIfNotEditable = errorIfNotEditable !== false;

    if (!file) {
      result = [
        {content: commonCommandMethods.fileDirError(command, args.join(' '))}
      ];
    } else if (file.get('type') === 'folder') {
      result = [{
        content:
            stringUtils.format(commandsErrors.NOT_FILE, command, args.join(' '))
      }];
    } else if (!file.get('editable') && errorIfNotEditable) {
      result = [{
        content: stringUtils.format(commandsErrors.NO_EDITABLE, command),
        css: 'term-red'
      }];
    }

    callback(result, file);
  },

  /**
   * Sends a given file to a given endpoint by using getFileOrError
   *
   * @param {string} command - Command being run
   * @param {!Array} args - Additional arguments
   * @param {string} endpoint - Endpoint to post the content of the file
   * @param {string} [progress] - If progress is provided, it will notify
   *     the promise
   *
   * @see [getFileOrError]{@link module:commands/common#getFileOrError}
   * @see [postToEndpoint]{@link module:commands/common#postToEndpoint}
   *
   * @return {!jQuery.Deferred.promise}
   */
  sendFileToEndpoint: function(command, args, endpoint, progress) {
    const defer = $.Deferred();
    let result;

    commonCommandMethods.getFileOrError(command, args, function(err, file) {
      if (err) {
        result = err;
      } else {  // Everything is good to go!
        if (progress) {
          defer.notify(progress);
        }

        commonCommandMethods.postToEndpoint(
            endpoint, {path: file.get('path')}, defer);
      }

      if (result) {
        defer.resolve(result);
      }
    });

    return defer.promise();
  },

  /**
   * Posts information to an endpoint. If files come on the result, it
   * will call replaceFileSystem
   *
   * @param {string} endpoint - Endpoint to post
   * @param {!Object} data - Additional data to send
   * @param {!jQuery.Deferred} defer - Defer to be resolved once the data
   *     has been retrieved
   * @param {?Function} [transform] - Optional function to transform the
   *     data
   *
   * @see [App#replaceFileSystem]{@link module:views/App#replaceFileSystem}
   *
   * @return {!jQuery.Deferred.promise} Promise of the XHR request
   */
  postToEndpoint: function(endpoint, data, defer, transform) {
    return $.post(endpoint, data)
        .fail(function(data) {
          const output = [];

          if (data && data.responseJSON) {  // Only when it's an error
            output.push({content: data.responseJSON.message});
          }

          defer.reject(output);
        })
        .done(function(data) {
          let output = '';
          const result = {};

          if (data) {
            if (data.output) {
              output = data.output;
            }

            if (data.files) {
              window.AppView.instance.replaceFileSystem(data.files);
            }

            // check triggers
            if (data.triggers) {
              const triggers = data.triggers;

              // recruit
              if (triggers.recruit) {
                // Sending to the bottom of the queue so the output comes
                // first to the console
                setTimeout(function() {
                  window.AppView.instance.onRecruitInfoReceived(
                      triggers.recruit);
                }, 0);
              }

              // notify
              if (triggers.gameend) {
                setTimeout(function() {
                  window.AppView.instance.onGameEndInfoReceived(
                      triggers.gameend);
                }, 0);
              }
            }

            if (data.score) {
              result.score = data.score;
            }
          }

          if (typeof transform === 'function') {
            output = transform(data);
          }

          result.content = output;

          defer.resolve([result]);
        });
  },

  /**
   * Prompt a message on the console and only accepts Y/N as a response.
   *
   * @param {!Object} options
   * 
   * {?Array} [options.messages] - Array of messages that will be
   *     outputted prior to switching the prompt.
   * {!jQueryTerminal} options.console - Instance of the console.
   * 
   * @return {!jQuery.Deferred} Deferred that will be solved if the answer
   *     is Yes or rejected otherwise
   */
  promptConsole: function(options) {
    const defer = $.Deferred();

    if (options.messages) {
      const len = options.messages.length;
      for (let i = 0; i < len; i++) {
        options.console.echo(options.messages[i], {raw: true});
      }
    }

    options.console.push(function(command) {
      if (command.match(/y|yes/i) || command.match(/n|no/i)) {
        options.console.pop();

        if (command.match(/y|yes/i)) {
          defer.resolve();
        } else {
          defer.reject();
        }
      }
    }, {prompt: '[Y]es or [N]o: '});

    return defer.promise();
  }
};

exports = {commonCommandMethods};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/cat.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.cat');

const {$} = window;
const {commonCommandMethods} = goog.require('commands.common');

/**
 * Command to print content of the file.
 *
 * @module commands/cat
 */
const cat = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'cat',

  /**
   * @property {string} description - Description of the command that will be
   * shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'print file [file_name]',

  /**
   * Gets a files or files and returns a resolved promise containing their
   * contents, or returns an error message if the file can't be found. The
   * file's contents is escaped if the files does not have the property
   * 'isHTML'.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments for the command (e.g. cat
   *     file.js)
   * @return {!jQuery.Deferred} - Resolved promise.
   */
  run: function(command, args) {
    const promises = [];
    const defer = $.Deferred();
    let getFileContent;

    getFileContent = function(path) {
      let result;
      const defer = $.Deferred();

      commonCommandMethods.getFileOrError(command, [path], function(err, file) {
        if (err) {
          result = {text: err[0].content};
        } else {
          result = {text: file.getOutputtableContent()};
        }

        defer.resolve(result);
      }, false);

      return defer.promise();
    };

    // We can cat as much as we like
    args.forEach(function(filePath) {
      promises.push(getFileContent(filePath));
    });

    $.when.apply($, promises).done(function(data) {
      const args = Array.prototype.slice.call(arguments);
      const result = [];
      let obj;
      let conf;

      const len = args.length;
      for (let i = 0; i < len; i++) {
        obj = args[i];
        conf = {content: obj.text};
        result.push(conf);
      }

      defer.resolve(result);
    });

    return defer.promise();
  }
};

exports = {cat};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/cd.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.cd');

const {$} = window;
const {commandsErrors} = goog.require('constants.commandsErrors');
const {commonCommandMethods} = goog.require('commands.common');
const {pathUtils} = goog.require('utils.path');
const {stringUtils} = goog.require('utils.string');

/**
 * Command to change current directory.
 *
 * @module commands/cd
 */
const cd = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'cd',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'change directory [dir_name]',

  /**
   * Attempts to change the currentPath to a given path. Also handles ~/
   * for returning to the root and returns an error if the path doesn't
   * exist.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments for the command (e.g. cd
   *     /some_path)
   * @return {!jQuery.Deferred} - Resolved promise.
   */
  run: function(command, args) {
    let newPath = '/';
    const intendedPath = args[0] || '';
    const dir = pathUtils.getFile(intendedPath);

    if (intendedPath !== '' && intendedPath !== '~/') {
      if (dir) {
        if (dir.get('type') === 'folder') {
          newPath = dir.get('path');
        } else {
          return $.Deferred()
              .resolve([{
                content: stringUtils.format(
                    commandsErrors.NOT_DIR, command, intendedPath)
              }])
              .promise();
        }
      } else {
        return $.Deferred()
            .resolve([{
              content:
                  commonCommandMethods.fileDirError(command, args.join(' '))
            }])
            .promise();
      }
    }
    window.AppView.instance.currentPath = newPath;

    return $.Deferred().resolve([]).promise();
  }
};

exports = {cd};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/deleteme.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.deleteme');

const {$} = window;
const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/deleteme/';

/**
 * Command to invoke the login popup from the console.
 *
 * @module commands/deleteme
 */
const deleteme = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'deleteme',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'delete all of your data associated with foobar',

  /**
   * @property {string} progress - Progress text.
   */
  progress: 'Processing your request...',

  /**
   * Attempts to delete the currently active user's data.
   */
  run: function(command, args, consoleInstance) {
    const defer = $.Deferred();

    consoleInstance.resume();

    commonCommandMethods
        .promptConsole({
          console: consoleInstance,
          messages: [
            `<span>This will delete all of your personal data and participation information in foobar. 
            Are you sure you want to remove your account?<span aria-label="Type Yes or No" /></span>`
          ]
        })
        .done(function() {
          const dfd = $.Deferred();

          consoleInstance.pause();
          consoleInstance.echo(deleteme.progress);

          commonCommandMethods.postToEndpoint(ENDPOINT, {}, dfd)
              .done(function(data) {
                let selfDestructEl;

                // Replace the file system to remove any active timers.
                window.AppView.instance.replaceFileSystem([]);

                consoleInstance.echo(data.output);
                consoleInstance.echo(
                    '<span class="term-red">This page will self destruct in <span id="selfdestruct">7</span>...</span>',
                    {'raw': true});

                selfDestructEl = $('#selfdestruct');

                googleAnalytics.trackEvent('user', 'deleted');

                // Update self destruct countdown timer.
                window.setInterval(/* istanbul ignore next */ function() {
                  const val = parseInt(selfDestructEl.text(), 10);

                  if (val === 1) {
                    window.location.href = '/deleted/';
                  } else {
                    selfDestructEl.text(val - 1);
                  }
                }, 1000);
              })
              .fail(function(error) {
                consoleInstance.echo('Something went wrong. Please try again.');
                consoleInstance.resume();
              });
        })
        .fail(function() {
          defer.resolve([]);
        });

    return defer.promise();
  }
};

exports = {deleteme};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/edit.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.edit');

const {$} = window;
const {commonCommandMethods} = goog.require('commands.common');

/**
 * Command to open file in editor.
 *
 * @module commands/edit
 */
const edit = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'edit',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'open file in editor [file_name]',

  /**
   * It tries to fetch the file, if it succeed it will open it. Otherwise
   * it will just resolve the promise with the error.
   *
   * @param {string} command - Command being run
   * @param {Array} args - Additional arguments to the command (i.e. edit
   *     file.js)
   * @return {!jQuery.Deferred}
   *
   * @see [openFile]{@link module:views/App#openFile}
   * @see [getFileOrError]{@link module:commands/common#getFileOrError}
   */
  run: function(command, args) {
    const defer = $.Deferred();
    let result;

    commonCommandMethods.getFileOrError(command, args, function(err, file) {
      if (err) {
        result = err;
      } else {
        window.AppView.instance.openFile(file);
        result = [];
      }

      defer.resolve(result);
    }, true);

    return defer.promise();
  }
};

exports = {edit};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/feedback.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.feedback');

const {$} = window;

/**
 * Command to output the current path.
 *
 * @module commands/feedback
 */
const feedback = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'feedback',

  /**
   * @property {string} description - Description of the command that will be
   * shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'Provide feedback on foobar',

  /**
   * Initializes the feedback modal.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   * @see [initialize]{@link module:views/App#initialize}
   */
  run: function() {
    window.AppView.instance.startFeedback();
    return $.Deferred().resolve([]).promise();
  }
};

exports = {feedback};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/help.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.help');

const {$} = window;
const googleAnalytics = goog.require('utils.analytics');
const {userAgent} = goog.require('utils.userAgent');

const commands = {};
let functionKey = '&#8984;';
let helpResult = '';

if (!userAgent.isMac) {
  functionKey = 'Ctrl';
}

/**
 * Command to list public commands along with their descriptions.
 *
 * @module commands/help
 */
const help = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'help',

  /**
   * Add a new command and its description to the commands object.
   *
   * @param {string} name - Command name.
   * @param {string} description - Command description.
   */
  addCommand: function(name, description) {
    commands[name] = description;
  },

  /**
   * Builds a list of commands to output from the commands object.
   */
  craftList: function() {
    const commandList = Object.keys(commands);
    let commandName;
    let i;
    let len;
    let keyDesc;
    let keyName;
    let keyboardList;

    for (i = 0, len = commandList.length; i < len; i++) {
      commandName = commandList[i];
      helpResult += '<li><span class="list--padded term-yellow">' +
          commandName + '</span><span class="list--definition">' +
          commands[commandName] + '</span></li>';
    }

    helpResult = '<p>Use the following shell commands:</p>' +
        '<ul class="terminal-list">' + helpResult + '</ul>';

    keyboardList = [
      {
        key: functionKey + ' + S',
        result: 'save the open file [when editor is focused]'
      },
      {
        key: functionKey + ' + E',
        result: 'close the editor [when editor is focused]'
      }
    ];

    // keyboard help

    helpResult += '<p><br>Keyboard help:</p><ul class="terminal-list">';

    for (i = 0, len = keyboardList.length; i < len; i++) {
      keyName = keyboardList[i].key;
      keyDesc = keyboardList[i].result;
      helpResult += '<li><span class="list--padded term-yellow">' + keyName +
          '</span><span class="list--definition">' + keyDesc + '</span></li>';
    }

    helpResult += '</ul>';
    helpResult += '<p><br>Toggle between the editor and terminal using ' +
        '<span class="term-yellow">ESC</span> followed by <span class="term-yellow">TAB</span>, ' +
        'then activate with <span class="term-yellow">ENTER</span>.</p>';
  },

  /**
   * Returns a resolved promise containing the commands list as the
   * result.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   */
  run: function() {
    googleAnalytics.trackPage('/help/');
    return $.Deferred().resolve([{content: helpResult}]).promise();
  }
};

exports = {help};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/home.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.home');

const {cd} = goog.require('commands.cd');

/**
 * Works as an alias for `cd ~/`
 *
 * @module commands/home
 */
const home = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'home',

  /**
   * @property {string} isPrivate - Dictates whether the command is private or
   * not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Returns the promise of the `cd` command passing `~/` as an argument to
   * it.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   * @see [run]{@link module:commands/cd#run}
   */
  run: function() {
    return cd.run('cd', ['~/']);
  }
};

exports = {home};

;return exports;});

//corp/hiring/rabbithole/game/static/js/constants/keys.js
goog.loadModule(function(exports) {'use strict';goog.module('constants.keys');

/**
 * Accepted keys for the app and their associated key codes.
 */
const keys = {
  BACKSPACE: 8,
  TAB: 9,
  ENTER: 13,
  ESC: 27,
  PAGE_DOWN: 33,
  PAGE_UP: 34,
  UP: 38,
  DOWN: 40,
  C: 67,
  E: 69,
  G: 71,
  Q: 81,
  S: 83,
  X: 88,
  FORWARD_SLASH: 191
};

exports = {keys};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/less.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.less');
const {$, _} = window;

const {commonCommandMethods} = goog.require('commands.common');
const {keys} = goog.require('constants.keys');
const {stringUtils} = goog.require('utils.string');

/**
 * Command similar to the less command on a terminal
 *
 * @module commands/less
 *
 * @requires module:commands/common
 * @requires module:utils/string
 * @requires module:constants/keys
 */
const less = {
  /**
   * @property {string} name - Name of the command
   */

  name: 'less',
  console: null,
  currentConsoleOutput: undefined,
  currentContent: '',
  currentLines: [],
  currentPosition: 0,
  rows: 0,
  cols: 0,

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'print a file a page at a time [file_name]',

  /**
   * Handles the fetching the file provided in the argument and will
   * invoke the callback with the contents.
   *
   * @param {string} command - Command being run
   * @param {!Array} args - Additional arguments to the command (i.e. edit
   *     file.js)
   * @param {!jQuery.Deferred} defer - Defer to be resolved either with the
   *     error, if we fail to fetch the file, or empty since the command
   *     will handle the output
   * @param {!Function} callback - Callback to be invoked if we manage to
   *     get the content of the file
   *
   * @see [commonCommandMethods#getFileOrError]{@link module:commands/common#getFileOrError}
   */
  fetchFile: function(command, args, defer, callback) {
    let result;

    commonCommandMethods.getFileOrError(
        command, [args[0]], function(err, file) {
          if (err) {
            result = err;
          } else {
            result = [];

            callback(file.getOutputtableContent());
          }

          defer.resolve(result);
        }, false);
  },

  /**
   * It handles printing the current the file in a given portion, that's
   * it, from the current position until the space available on the screen
   * is filled.
   */
  print: function() {
    less.console.clear();
    less.console.echo(
        '<div class="preformatted">' +
            less.currentLines
                .slice(less.currentPosition,
                       less.currentPosition + (less.rows) - 1)
                .join('\n') +
            '</div>',
        {raw: true});
  },

  /**
   * It handles the keydown event on the new interpreter. Note that this
   * will override the [original]{@link module:views/Console#onKeyDown}
   * one.
   *
   * Actions are as follow:
   *
   * 	- Forward Slash (/) - It will set the prompt to that. Meant for
   * searching. Searching is disabled by pressing Backspace while in this
   * mode
   * 	- Up arrow (↑) - It will decrease the current position of the
   * file by one line
   * 	- Page Up - It will increase the current position by the amount
   * of rows that fits in the screen
   * 	- Down arrow (↓) - It will increase the position of the file by
   * one line
   * 	- Page Down - It will decrease the current position by the
   * amount of rows that fits in the screen
   * 	- Letter Q - It will terminate the less command and will restore
   * the previous output
   *
   * @param {!jQuery.Event} event
   * @return {boolean}
   */
  onKeyDown: function(event) {
    const $target = $(event.target);

    if (!$target.hasClass('ace_text-input')) {
      if (less.console.get_prompt() !== '/') {
        switch (event.which) {
          case keys.FORWARD_SLASH:
            less.console.set_prompt('/');
            break;
          case keys.UP:
            if (less.currentPosition > 0) {
              --less.currentPosition;

              less.print();
            }

            break;
          case keys.PAGE_UP:
            less.currentPosition += less.rows;

            if (less.currentPosition >
              (less.currentLines.length - 1 - less.rows)) {
              less.currentPosition = less.currentLines.length - 1 - less.rows;
            }

            less.print();

            break;
          case keys.DOWN:
            if (less.currentPosition < less.currentLines.length - 1 &&
                less.currentPosition < less.rows &&
                less.currentLines.length > less.rows &&
                (less.currentPosition + less.rows) <= less.currentLines.length)
                {
              ++less.currentPosition;

              less.print();
            }

            break;
          case keys.PAGE_DOWN:
            less.currentPosition -= less.rows;

            if (less.currentPosition < 0) {
              less.currentPosition = 0;
            }

            less.print();

            break;
          case keys.Q:
            less.console.pop();

            $(window).off('.less');

            break;
        }

        return false;
      } else {
        if (event.which === keys.BACKSPACE &&
            less.console.get_command() === '') {
          less.console.set_prompt(':');
        } else if (event.which === keys.ENTER) {  // Searching
          const command = less.console.get_command();

          if (command.length) {
            const regex = new RegExp(command);

            const len = less.currentLines.length;
            for (let i = 0; i < len; i++) {
              if (regex.test(less.currentLines[i])) {
                less.currentPosition = i;
                less.print();

                break;
              }
            }

            less.console.set_command('');
            less.console.set_prompt(':');
          }

          return false;
        }
      }
    }
  },

  /**
   * It handles fetching the current rows and cols that fits the whole
   * command line. After doing that, it will break the current content
   * into the needed lines, accounting for Columns and Rows so it's
   * correct upon printing.
   *
   * @see [stringUtils#breakEvery]{@link module:utils/string#breakEvery}
   */
  fetchColsAndRows: function() {
    less.rows = less.console.rows();
    less.cols = less.console.cols() + 5;

    let aux = less.currentContent.split('\n')
                                 .filter(line => !line.startsWith('\t'));
    const filtered = [aux[0]];
    for (let i = 1; i < aux.length; i++) {
      if (aux[i-1] === '' && aux[i] === '') {
        continue;
      }
      filtered.push(aux[i]);
    }
    aux = filtered;

    less.currentLines = [];

    for (let i = 0; i < aux.length; i++) {
      const line = aux[i];

      if (line.length < less.cols) {
        less.currentLines.push(line);
      } else {
        const lines = stringUtils.breakEvery(line, less.cols);

        for (let j = 0; j < lines.length; j++) {
          less.currentLines.push(lines[j]);
        }
      }
    }

  },

  processContent: function(content) {
    return content.replace(/<br\s*[\/]?>/gi, '\n').replace(/\&nbsp;/gi, ' ');
  },

  /**
   *
   * @param {string} command - Command being run
   * @param {!Array} args - Additional arguments to the command (i.e. edit
   *     file.js)
   * @param {!jQueryTerminal} consoleInstance - The current console instance
   * @return {!jQuery.Deferred}
   *
   * @see [fetchFile]{@link module:commands/less#fetchFile}
   */
  run: function(command, args, consoleInstance) {
    const defer = $.Deferred();

    // Initialising values
    less.currentPosition = 0;
    less.currentLines = [];
    less.console = consoleInstance;

    less.fetchFile(command, args, defer, function(content) {
      less.currentContent = less.processContent(content);
      less.fetchColsAndRows();

      consoleInstance.push($.noop, {keydown: less.onKeyDown, prompt: ':'});

      less.print();
    });

    $(window).on('resize.less', _.throttle(function() {
      less.fetchColsAndRows();
      less.print();
    }, 300));

    return defer.promise();
  }
};

exports = {less};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/login.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.login');

const {$} = window;

/**
 * Command to invoke the login popup from the console.
 *
 * @module commands/login
 */
const login = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'login',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is private
   * or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Invokes the login functionality from the App view and also returns a
   * resolved promise containing a logging in message to be displayed to the
   * user.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   */
  run: function() {
    window.AppView.instance.handleLoginPopup();

    return $.Deferred().resolve([]).promise();
  }
};

exports = {login};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/ls.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.ls');

const {$, Backbone} = window;

const {commonCommandMethods} = goog.require('commands.common');
const {pathUtils} = goog.require('utils.path');

/**
 * Command to list content (file names) of the specified directory.
 *
 * @module commands/ls
 */
const ls = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'ls',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command.
   * @see [help]{@link module:commands/help}
   */
  description: 'list directory contents [dir_name]',

  /**
   * Returns the contents of the provided directories.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments to the command (i.e. ls
   *     dir_name/).
   * @return {!jQuery.Deferred} - Promise for the request.
   *
   * @see [sendFileToEndpoint]{@link module:commands/common#sendFileToEndpoint}
   */
  run: function(command, args) {
    const result = [];
    let getDirContent;

    getDirContent = function(path) {
      let result;
      const file = pathUtils.getFile(path);

      // If the path given is a directory, then we get all the files under it
      if (file && file.get('type') === 'folder' || path === '/') {
        result = pathUtils.getFilesAt(path);
      } else if (file) {  // If it's a file we just print the file path
        result = [file];
      } else {  // Otherwise just error
        result = [commonCommandMethods.fileDirError(command, path)];
      }

      return result;
    };

    if (args.length === 0) {
      args.push(window.AppView.instance.currentPath);
    }

    // LS supports more than one path, in which case, the path is added to
    // the top of the result list
    args.forEach(function(path) {
      const dirContent = getDirContent(path);
      let output = '';

      dirContent.forEach(function(file) {
        if (file instanceof Backbone.Model) {
          const css =
              file.get('type') === 'folder' ? 'list--folder' : 'list--file';

          output +=
              '<span class="' + css + '">' + file.get('name') + '</span><br/>';
        } else {
          output += '<span>' + file + '</span><br/>';
        }
      });

      if (args.length > 1) {
        result.push({content: path}, {content: output});
      } else {
        result.push({content: output});
      }
    });

    return $.Deferred().resolve(result).promise();
  }
};

exports = {ls};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/mount.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.mount');

const {$} = window;

/**
 * Simulates Unix-style mount command messages.
 *
 * @module commands/mount
 */
const mount = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'mount',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is private
   * or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Outputs the messages depending on whether any args are included with the
   * command or not.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments for the command.
   * @return {!jQuery.Deferred} - Resolved promise.
   *
   * @see [initialize]{@link module:views/App#initialize}
   */
  run: function(command, args) {
    const username = window.AppView.instance.username;
    let result;

    if (args.length) {
      result =
          [{content: 'mount error(13): Permission denied', css: 'term-red'}];
    } else {
      result = [
        {content: '/dev/xvda on / type ext3 (rw,noatime,errors=remount-ro)'},
        {content: '/dev/xvdb on /home/' + username + ' (rw,noatime)'}
      ];
    }

    return $.Deferred().resolve(result).promise();
  }
};

exports = {mount};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/pwd.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.pwd');

const {$} = window;

/**
 * Command to output the current path.
 *
 * @module commands/pwd
 */
const pwd = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'pwd',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is private
   * or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Retrieves the current path from the App view and returns a resolved
   * promise containing the path as the content.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   * @see [initialize]{@link module:views/App#initialize}
   */
  run: function() {
    const username = window.AppView.instance.username;
    const currentPath = window.AppView.instance.currentPath;
    let pwd;

    if (currentPath === '/') {
      pwd = '/home/' + username;
    } else {
      pwd = '/home/' + username + currentPath;
    }

    return $.Deferred().resolve([{content: pwd}]).promise();
  }
};

exports = {pwd};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/recruitme.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.recruitme');

const {$} = window;
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/recruit/';

/**
 * Command to opt-in for contact from Google recruiter.
 *
 * User may provide personal details by invoking this command,
 * so that Google recruiters will know how to contact them.
 *
 * @module commands/recruitme
 */
const recruitme = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'recruitme',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is private
   * or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * @property {string} progress - Progress text.
   */
  progress: 'Checking your permissions...',

  /**
   * Makes API call to backend about recruitme request.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   * @see [initialize]{@link module:views/App#initialize}
   */
  run: function(command, args, consoleInstance) {
    const defer = $.Deferred();

    defer.notify(recruitme.progress);
    consoleInstance.__resume = consoleInstance.resume;
    consoleInstance.resume = $.noop;
    commonCommandMethods.postToEndpoint(ENDPOINT, {}, defer);

    const restoreAndResume = function() {
      consoleInstance.resume = consoleInstance.__resume;
      delete consoleInstance.__resume;
      consoleInstance.resume();
    };

    defer.promise()
        .done(function() {
          setTimeout(restoreAndResume);
        })
        .fail(restoreAndResume);

    return defer.promise();
  }
};

exports = {recruitme};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/request.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.request');

const {$} = window;
const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/request/';

/**
 * Command to handle request a new challenge.
 *
 * @module commands/request
 */
const request = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'request',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command.
   * @see [help]{@link module:commands/help}
   */
  description: 'request new challenge',

  /**
   * @property {string} progress - Progress text.
   */
  progress: 'Requesting challenge...',

  /**
   * Requests a new challenge from the API passing with it any additional
   * tags to filter the challenges by.
   *
   * @param {string} command - Command being run.
   * @param {?Array} args - Additional arguments to the command (i.e.
   *     submit file_name.js).
   * @param {!jQueryTerminal} consoleInstance - Instance of the current
   *     console
   *
   * @return {!jQuery.Deferred} - Promise for the request.
   *
   * @see [postToEndpoint]{@link module:commands/common#postToEndpoint}
   */
  run: function(command, args, consoleInstance) {
    const defer = $.Deferred();

    if (window.AppView.instance.hasRequested) {
      defer.notify(request.progress);

      commonCommandMethods.postToEndpoint(ENDPOINT, {}, defer);

      defer.done(function() {
        googleAnalytics.trackEvent('challenge', 'requested');
        googleAnalytics.trackPage('/challenge/requested/');
      });

      return defer.promise();
    }

    consoleInstance.resume();

    const messages = [
      `<span class="term-red">You are about to begin a TIME-LIMITED challenge. 
       You will have 7 days to complete each newly requested challenge or LOSE ACCESS to this site.</span>`,
      `<span>Do you wish to proceed and start the timer on your first challenge?
       <span aria-label="Type Yes or No" /></span>`
    ];

    if (window.AppView.instance.username === 'guest') {
      messages.splice(
          1, 0,
          'If you do not have time for the challenge now, you may ' +
          '<a href="#" class="btn login">click here to sign in</a> ' +
          'or enter the <span class="term-yellow">login</span> command ' +
          'and save your place so you can return later when you have more time.');
    }

    commonCommandMethods
        .promptConsole({console: consoleInstance, messages: messages})
        .done(function() {
          consoleInstance.pause();

          defer.notify(request.progress);

          commonCommandMethods.postToEndpoint(ENDPOINT, {}, defer);

          defer.done(function() {
            window.AppView.instance.hasRequested = true;
            googleAnalytics.trackEvent('challenge', 'requested');
            googleAnalytics.trackPage('/challenge/requested/');
          });
        });

    return defer.promise();
  }
};

exports = {request};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/save.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.save');

const {$} = window;

const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');
const {fileModel} = goog.require('models.File');

const ENDPOINT = '/api/v1/commands/save/';

/**
 * Command to handle saving content of the currently open file.
 *
 * @module commands/save
 */
const save = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'save',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is
   * private or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Posts the file contents to the API.
   *
   * @param {!fileModel} file - File model containing file contents and path
   *     to post to
   * @param {Object} defer - Deferred object to pass to the postToEndpoint
   *     method
   * @see [postToEndpoint]{@link module:commands/common#postToEndpoint}
   */
  sendToServer: function(file, defer) {
    commonCommandMethods
        .postToEndpoint(
            ENDPOINT, {path: file.get('path'), content: file.get('content')},
            defer)
        .done(function() {
          file.set('dirty', false);

          if (file.get('is_new')) {
            googleAnalytics.trackEvent('challenge', 'started');
            googleAnalytics.trackPage('/solution/new/');
            file.set('is_new', false);
          } else {
            googleAnalytics.trackPage('/solution/update/');
          }

          googleAnalytics.trackEvent('editor', 'code saved');
        });
  },

  /**
   * Attempts to save the provided file path's contents.
   *
   * @param {string} command - Command being run
   * @param  {string} args - Additional arguments
   * @return {Object} - Deferred promise
   */
  run: function(command, args) {
    const defer = $.Deferred();
    let result;

    commonCommandMethods.getFileOrError(command, args, function(err, file) {
      if (err) {
        result = err;
      } else {  // Everything is good to go!
        googleAnalytics.trackEvent('editor', 'code saving', 'command');
        save.sendToServer(file, defer);
      }

      if (result) {
        defer.resolve(result);
      }
    });

    return defer.promise();
  }
};

exports = {save};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/status.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.status');

const {$} = window;
const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/status/';

/**
 * Returns the user's current status
 *
 * @module commands/edit
 */
const status = {
  /**
   * @property {string} name - Name of the command
   */
  name: 'status',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command
   * @see [help]{@link module:commands/help}
   */
  description: 'print progress',

  /**
   * Requests the user's status from the API and returns a promise for the
   * request.
   *
   * @return {!jQuery.Deferred}
   * @see [postToEndpoint]{@link module:commands/common#postToEndpoint}
   */
  run: function() {
    const defer = $.Deferred();

    commonCommandMethods.postToEndpoint(ENDPOINT, {}, defer);

    defer.done(function() {
      googleAnalytics.trackPage('/status/');
    });

    return defer.promise();
  }
};

exports = {status};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/submit.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.submit');

const {$} = window;
const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/submit/';

/**
 * Submits a file to Evaluation API.
 *
 * @module commands/submit
 */
const submit = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'submit',

  /**
   * @property {string} description - Description of the command that will
   * be shown in the help command.
   * @see [help]{@link module:commands/help}
   */
  description: 'submit final solution file for assessment [file_name]',

  /**
   * @property {string} progress - Progress text.
   */
  progress: 'Submitting solution...',

  /**
   * Method called whenever the submit has succeeded
   *
   * @param {Object} data
   */
  onSuccess: function(data) {
    let score = null;

    if (data && data[0].hasOwnProperty('score')) {
      score = parseInt(data[0].score, 10);
    }

    googleAnalytics.trackEvent('challenge', 'submitted', null, score);
    googleAnalytics.trackPage('/challenge/submitted/');

    if (score === 100) {
      // change back to home folder
      window.AppView.instance.currentPath = '/';
      window.AppView.instance.trigger('path:updated');
    }
  },

  /**
   * Posts the file name to the submit API.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments to the command (i.e.
   *     submit file_name.js).
   * @param {jQueryTerminal} consoleInstance - Instance of the current
   *     console
   *
   * @return {!jQuery.Deferred} - Promise for the request.
   *
   * @see [sendFileToEndpoint]{@link module:commands/common#sendFileToEndpoint}
   * @see [sendFileToEndpoint]{@link module:commands/common#promptConsole}
   */
  run: function(command, args, consoleInstance) {
    const defer = $.Deferred();

    consoleInstance.resume();

    commonCommandMethods.getFileOrError(command, args, function(error, file) {
      if (error) {
        defer.resolve(error);
      } else {
        commonCommandMethods
            .promptConsole({
              console: consoleInstance,
              messages: [`<span>Are you sure you want to submit your solution?
                          <span aria-label="Type Yes or No" /></span>`]
            })
            .done(function() {
              consoleInstance.pause();

              commonCommandMethods
                  .sendFileToEndpoint(command, args, ENDPOINT, submit.progress)
                  .done(submit.onSuccess)
                  .done(defer.resolve)
                  .fail(defer.reject)
                  .progress(defer.notify);  // Piping messages from
                                            // one defer to the other
            })
            .fail(function() {
              defer.resolve([]);
            });
      }
    });

    return defer.promise();
  }
};

exports = {submit};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/verify.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.verify');

const googleAnalytics = goog.require('utils.analytics');
const {commonCommandMethods} = goog.require('commands.common');

const ENDPOINT = '/api/v1/commands/verify/';

/**
 * Attempts to verify a file with Evaluation API.
 *
 * @module commands/verify
 */
const verify = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'verify',

  /**
   * @property {string} description - Description of the command that will be
   * shown in the help command.
   * @see [help]{@link module:commands/help}
   */
  description: 'runs tests on solution file [file_name]',

  /**
   * @property {string} progress - Progress text.
   */
  progress: 'Verifying solution...',

  /**
   * Posts the file name to the API to be verified.
   *
   * @param {string} command - Command being run.
   * @param {Array} args - Additional arguments to the command (i.e. verify
   *     file_name.js).
   * @return {!jQuery.Deferred} - Promise for the request.
   *
   * @see [sendFileToEndpoint]{@link module:commands/common#sendFileToEndpoint}
   */
  run: function(command, args) {
    const promise = commonCommandMethods.sendFileToEndpoint(
        command, args, ENDPOINT, verify.progress);

    promise.done(function(data) {
      let score = null;

      if (data && data[0].hasOwnProperty('score')) {
        score = parseInt(data[0].score, 10);
      }

      googleAnalytics.trackEvent('challenge', 'verified', null, score);
      googleAnalytics.trackPage('/challenge/verified/');
    });

    return promise;
  }
};

exports = {verify};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/whoami.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.whoami');

const {$} = window;

/**
 * Command to output the current username.
 *
 * @module commands/whoami
 */
const whoami = {
  /**
   * @property {string} name - Name of the command.
   */
  name: 'whoami',

  /**
   * @property {boolean} isPrivate - Dictates whether the command is private
   * or not. Private commands don't show in the help command list.
   */
  isPrivate: true,

  /**
   * Returns a resolved promise containing the current username retrieved from
   * the App view.
   *
   * @return {!jQuery.Deferred} - Resolved promise.
   * @see [initialize]{@link module:views/App#initialize}
   */
  run: function() {
    return $.Deferred()
        .resolve([{content: window.AppView.instance.username}])
        .promise();
  }
};

exports = {whoami};

;return exports;});

//corp/hiring/rabbithole/game/static/js/commands/commands.js
goog.loadModule(function(exports) {'use strict';goog.module('commands.commands');

const {cat} = goog.require('commands.cat');
const {cd} = goog.require('commands.cd');
const {commonCommandMethods} = goog.require('commands.common');
const {deleteme} = goog.require('commands.deleteme');
const {edit} = goog.require('commands.edit');
const {feedback} = goog.require('commands.feedback');
const {help} = goog.require('commands.help');
const {home} = goog.require('commands.home');
const {less} = goog.require('commands.less');
const {login} = goog.require('commands.login');
const {ls} = goog.require('commands.ls');
const {mount} = goog.require('commands.mount');
const {pwd} = goog.require('commands.pwd');
const {recruitme} = goog.require('commands.recruitme');
const {request} = goog.require('commands.request');
const {save} = goog.require('commands.save');
const {status} = goog.require('commands.status');
const {submit} = goog.require('commands.submit');
const {verify} = goog.require('commands.verify');
const {whoami} = goog.require('commands.whoami');

const commandArr =
    [
      cd,   cat,    deleteme, edit,   feedback, help,      home,
      less, ls,     login,    mount,  pwd,      recruitme, request,
      save, status, submit,   verify, whoami,
    ];
const availableCommands = [];
const commands = {
  common: commonCommandMethods,
};

for (let i = 0, len = commandArr.length; i < len; i++) {
  let command = commandArr[i];

  commands[command.name] = command.run;

  if (!command.isPrivate) {
    availableCommands.push(command.name);
  }

  if (command.name !== 'help' && command.isPrivate !== true) {
    help.addCommand(command.name, command.description);
  }
}

help.craftList();

commands.available = availableCommands;

exports = {commands};

;return exports;});

//corp/hiring/rabbithole/game/static/js/controllers/feedback.js
goog.loadModule(function(exports) {'use strict';goog.module('controllers.FeedbackController');

const {Backbone, _, $} = window;

const {commonCommandMethods} = goog.require('commands.common');
const {keys} = goog.require('constants.keys');
const {stringUtils} = goog.require('utils.string');

const FeedbackController = {
  /**
   * @property {string} - Endpoint to communicate with the server
   */
  ENDPOINT: '/api/v1/commands/feedback/',

  $output: $('.terminal-output'),
  console: null,
  questions: [],
  answers: [],
  inputtedData: {},
  currentQuestion: {},
  currentQuestionIndex: null,
  feedbackType: null,

  reset: function() {
    const self = this;

    self.questions = [];
    self.answers = [];
    self.inputtedData = {};
    self.currentQuestion = {};
    self.currentQuestionIndex = null;
    self.feedbackType = null;
  },

  /**
   * Prompt string to nicely print the list of options when a question has
   * multiple choices.
   *
   * @return {string} - template to set selection prompt ("[B]ug [F]eature [O]ther")
   *
   */
  SELECT_TEMPLATE: function() {
    return '[[;;;term-white][][[b;;;term-white]B][[;;;term-white]&#93;]' +
           '[[;;;term-white]ug] [[;;;term-white][][[b;;;term-white]F]' +
           '[[;;;term-white]&#93;][[;;;term-white]eature] ' +
           '[[;;;term-white][][[b;;;term-white]O][[;;;term-white]&#93;][[;;;term-white]ther:] ';
  },

  /**
   * Template to use on the prompt using the name of the data being
   * required. It handles the question being optional.
   *
   * @param {!Object} context - options of the current question
   *
   * @return {string} - template for regular user prompt
   *
   */
  NORMAL_TEMPLATE: function(context) {
    const {name, ending, index, optional, current} = context;
    let output = `[[;;;term-white][][[;;;term-green]#${index + 1}][[;;;term-white]&#93;] `;

    if (optional) {
      output += `[[;;;term-white]${name}] [[i;;;term-white](optional)][[;;;term-white]: ]`;
    } else {
      output += `[[;;;term-white]${name}]`;
    }

    if (current || current === 0) {
      output += `[[;;;term-white][][[;;;term-yellow]${current}][[;;;term-white]&#93;${ending}]`;
    } else {
      output += `[[;;;term-white]${ending}]`;
    }

    return output;
  },

  /**
   * Initialises the process of asking the user the received questions
   *
   * @param {!jQueryTerminal} consoleInstance
   */
  start: function(consoleInstance) {
    const self = this;
    self.console = consoleInstance;

    const data = {
      'question': 'What type of feedback are you reporting?',
      'fields': [{
        'field_name': 'feedback',
        'name': 'Feedback',
        'optional': false,
        'type': 'text',
        'max_length': 500
      }]
    };

    self.console.echo(`<span>Feedback running...
      <span class="term-pink">[Press Ctrl+C to cancel]</span></span>`,
      {raw: true});

    self.parseData(data);

    if (data.question) {
      const promptTemplate = self.NORMAL_TEMPLATE({
        name: data.question,
        ending: '',
        index: 0,
        optional: false,
        current: false
      });
      const promptText = $.terminal.format(promptTemplate);
      self.console.echo(`<span>${promptText}
        <span aria-label="Type B for Bug, F for Feature, O for Other." /></span>`,
        {raw: true});
    }

    self.console.push(
        $.noop, {prompt: ' ', keydown: _.bind(self.onKeyDown, self)});

    self.printQuestion();
  },

  /**
   * Handles the keydown event on the new console interpreter. It will
   * handle only the enter key.
   *
   * @param {!jQuery.Event} event
   * @return {boolean} - Returns false on enter to avoid copying the
   *     prompt on certain situations
   *
   * @see [start]{@link module:controllers/recruitment#start}
   * @see [onEnter]{@link module:controllers/recruitment#onEnter}
   */
  onKeyDown: function(event) {
    const self = this;
    // Quit
    if (event.which === keys.C && event.ctrlKey) {
      self.console.echo(self.console.get_prompt() + self.console.get_command());
      self.remove();

      return false;
    }

    if (event.which === keys.ENTER) {
      return self.onEnter.call(self);
    }

    const isPaste = event.which === 86 && event.ctrlKey;
    if (isPaste || stringUtils.isCharacterKeyPress(event)) {
      return self.onInputUpdated(event);
    }
  },

  onInputUpdated: function(event) {
    const self = this;

    if (self.currentQuestion.max_length) {
      window.setTimeout(function() {
        const cmd = self.console.get_command().trim();
        let currentRemaining = self.currentQuestion.max_length - cmd.length;

        if (cmd.length > self.currentQuestion.max_length) {
          self.console.set_command(
              cmd.substring(0, self.currentQuestion.max_length));
          currentRemaining = 0;
        }

        if (currentRemaining !== self.currentQuestion.current) {
          self.currentQuestion.current = currentRemaining;
          self.updateQuestion();
        }
      }, 25);
    }
  },

  /**
   * It handles going to the next question by updating the index of the
   * current question and populates the currentQuestion property. In the
   * event of getting to the last question, it calls completed instead.
   *
   * @see [printQuestion]{@link module:controllers/recruitment#printQuestion}
   * @see [completed]{@link module:controllers/recruitment#completed}
   */
  nextQuestion: function() {
    const self = this;

    // a11y: Find line with answer that was entered prior printing current
    // question and enable a11y for it, so that we could navigate with screen reader.
    const lastTerminalCommand = $('.terminal-command').last();
    lastTerminalCommand.removeAttr('role').removeAttr('aria-hidden');

    let leftBrackets = lastTerminalCommand.find('span[data-text="["]');
    leftBrackets.attr('aria-hidden', true);

    let rightBrackets = lastTerminalCommand.find('span[data-text="]"]');
    rightBrackets.attr('aria-hidden', true);

    // If there unanswered questions left, ask for it
    if (self.currentQuestionIndex < self.questions.length - 1) {
      self.currentQuestionIndex++;

      if (self.currentQuestion.callback) {
        self.currentQuestion.callback.call(self);
      }

      self.currentQuestion = self.questions[self.currentQuestionIndex];

      if (self.currentQuestion.max_length) {
        self.currentQuestion.current = self.currentQuestion.max_length;
      } else {
        self.currentQuestion.current = false;
      }

      self.printQuestion();
    } else {
      commonCommandMethods
          .promptConsole({
            messages: [`<span>Are the above details correct?
                        <span aria-label="Type Yes or No" /></span>`],
            console: self.console
          })
          .fail(function() {
            self.resetQuestion.call(self);
          })
          .done(function() {
            self.completed.call(self);
          });
    }
  },

  /**
   * Method to restore the questions to the second one (to avoid giving
   * consent again)
   */
  resetQuestion: function() {
    const self = this;

    self.currentQuestionIndex = 0;
    self.currentQuestion = self.questions[self.currentQuestionIndex];
    self.answers = [];
    self.printQuestion();
  },

  /**
   * Handles the Enter key when it's a typing question. It validates the
   * email in case the question is asking for an email.
   *
   * @return {boolean} - If the input is wrong or empty, then it returns
   *     false to prevent the terminal
   * from copying the prompt.
   *
   * @see [onKeyDown]{@link module:controllers/recruitment#onKeyDown}
   */
  onEnter: function() {
    const self = this;
    const enteredText = self.console.get_command().trim();
    const {type, optional} = self.currentQuestion;
    const fieldName = self.currentQuestion.field_name;
    let result = true;

    if (enteredText || !enteredText && optional) {
      if (type === 'email' && !stringUtils.isValidEmail(enteredText)) {
        self.console.echo('The email is not valid');
        result = false;
      } else if (type === 'select') {
        switch (enteredText.toLowerCase()) {
          case 'b':
            self.feedbackType = 'bug';
            break;  // Nothing, so it follows the flow and goes to the
                    // next question
          case 'f':
            self.feedbackType = 'feature';
            break;
          case 'o':
            self.feedbackType = 'other';
            break;
          default:
            result = false;
            self.console.echo('Please answer only B, F or O');
            break;
        }
      }
    } else {
      result = false;
    }

    if (!result) {
      self.console.set_command('');

      return false;
    } else {
      self.answers.push(enteredText);

      // Add the data to the answers object if a field name exists for it.
      if (fieldName) {
        self.inputtedData[fieldName] = enteredText;
      }

      // This puts the nextQuestion on the bottom of the event loop which
      // allows the plugin to print the prompt before it being updated
      setTimeout(function() {
        self.nextQuestion.call(self);
      });
    }
  },

  /**
   * It parses the received data by extracting the questions and storing
   * them in the right order. The first question it's created differently
   * since it's special.
   *
   * @param {!Object} data
   */
  parseData: function(data) {
    const self = this;

    self.questions.push({type: 'select', optional: false, index: 0});

    const len = data.fields.length;
    for (let i = 0; i < len; i++) {
      data.fields[i].index = i + 1;
      self.questions.push(data.fields[i]);
    }

    self.currentQuestion = self.questions[0];
    self.currentQuestionIndex = 0;
  },

  /**
   * Handles printing the question. In the case of a Select question, it
   * first echo it and then grabs the element that holds it so using the
   * arrows reuses the same container. Terminal is paused so the user
   * can't write.
   *
   * On typing questions, the prompt is then updated to show the question.
   */
  printQuestion: function() {
    const self = this;
    self.currentQuestion.ending = ': ';

    if (self.currentQuestion.type === 'select') {
      self.console.set_prompt(self.SELECT_TEMPLATE());
    } else {
      // a11y: This allows us to print question and user input on the same line,
      // so that screen reader can read it.
      self.console.echo(self.NORMAL_TEMPLATE(self.currentQuestion), {newline: false});
      self.console.set_prompt('');
    }
  },

  /**
   * Updates last entered question line, so the user can track of how many symbols
   * are left for the feedback they provide. In general, behavior similar to
   * jQuery Terminal's set_prompt() method, however this one screen readers compatible.
   */
  updateQuestion: function() {
    const self = this;
    self.console.update(-1, self.NORMAL_TEMPLATE(self.currentQuestion));
  },

  /**
   * Reacts when a final endpoint response has been received.
   *
   * @param {!Object} response
   */
  onEndpointResponse: function(response) {
    const self = this;
    let message = response.message;

    if (response && response.responseJSON) {
      message = response.responseJSON.message;
    }

    self.console.echo(message, {raw: true});
    self.remove();
  },

  /**
   * This happens whenever the users completes asking the questions.
   */
  completed: function() {
    const self = this;
    const data =
        _.extend(self.inputtedData, {'feedback_type': self.feedbackType});

    self.console.set_prompt('');
    self.console.echo('Submitting your feedback...');

    $.post(self.ENDPOINT, data).always(_.bind(self.onEndpointResponse, self));
    self.reset();
  },

  /**
   * Removes the interpreter and resumes the console.
   */
  remove: function() {
    const self = this;

    self.console.resume();
    self.console.pop();
  }
};

exports = {FeedbackController};

;return exports;});

//corp/hiring/rabbithole/game/static/js/controllers/notify.js
goog.loadModule(function(exports) {'use strict';goog.module('controllers.NotifyController');

const {Backbone, _, $} = window;

const {commonCommandMethods} = goog.require('commands.common');
const {keys} = goog.require('constants.keys');
const {stringUtils} = goog.require('utils.string');

const NotifyController = {
  /**
   * @property {string} - Endpoint to communicate with the server
   */
  ENDPOINT: '/api/v1/commands/endgame/reply/',

  /**
   * Prompt string to nicely print the list of options when a question has
   * multiple choices.
   *
   * @return {string} - template to set selection prompt ("[Y]es [N]o:")
   */
  SELECT_TEMPLATE: function() {
    return '[[;;;term-white][][[b;;;term-white]Y][[;;;term-white]&#93;][[;;;term-white]es] [[;;;term-white][][[b;;;term-white]N][[;;;term-white]&#93;][[;;;term-white]o:] ';
  },

  /**
   * Template to use on the prompt using the name of the data being
   * required. It handles the question being optional.
   *
   * @param {!Object} context - options of the current question
   * @return {string} - template for regular user prompt
   */
  NORMAL_TEMPLATE: function(context) {
    let output = '[[;;;term-white][][[;;;term-green]#' + (context.index + 1) +
        '][[;;;term-white]&#93;] ';
    if (context.optional) {
      output += '[[;;;term-white] ' + context.name +
          '] [[i;;;term-white](optional)][[;;;term-white]: ]';
    } else {
      output += '[[;;;term-white]' + context.name + context.ending + ']';
    }

    return output;
  },

  /**
   * Initialises the process of asking the user the received questions
   *
   * @param {!jQueryTerminal} consoleInstance
   * @param {!Object} data
   */
  start: function(consoleInstance, data) {
    const self = this;

    self.console = consoleInstance;
    self.$output = $('.terminal-output');
    self.questions = [];
    self.answers = [];
    self.inputtedData = {};
    self.parseData(data);

    if (data.prompt) {
      const promptTemplate = self.NORMAL_TEMPLATE(
        {name: data.prompt, ending: '', index: 0, optional: false});
      const promptText = $.terminal.format(promptTemplate);
      self.console.echo(`<span>${promptText}
        <span aria-label="Type Y for Yes, N for No." /></span>`, {raw: true});
    }

    self.console.push(
        $.noop, {prompt: ' ', keydown: _.bind(self.onKeyDown, this)});

    self.printQuestion();
  },

  /**
   * Handles the keydown event on the new console interpreter. It will
   * handle only the enter key.
   *
   * @param {!jQuery.Event} event
   * @return {boolean} - Returns false on enter to avoid copying the
   *     prompt on certain situations
   *
   * @see [start]{@link module:controllers/recruitment#start}
   * @see [onEnter]{@link module:controllers/recruitment#onEnter}
   * @see [askMeLater]{@link module:controllers/recruitment#askMeLater}
   */
  onKeyDown: function(event) {
    const self = this;

    // Opting out
    if (event.which === keys.C && event.ctrlKey) {
      self.console.echo(self.SELECT_TEMPLATE());
      self.askMeLater();
      return false;
    }

    if (event.which === keys.ENTER) {
      return self.onEnter.call(this);
    }
  },

  /**
   * It handles going to the next question by updating the index of the
   * current question and populates the currentQuestion property. In the
   * event of getting to the last question, it calls completed instead.
   *
   * @see [printQuestion]{@link module:controllers/recruitment#printQuestion}
   * @see [completed]{@link module:controllers/recruitment#completed}
   */
  nextQuestion: function() {
    const self = this;

    if (self.currentQuestionIndex < self.questions.length - 1) {
      self.currentQuestionIndex++;

      if (self.currentQuestion.callback) {
        self.currentQuestion.callback.call(self);
      }

      self.currentQuestion = self.questions[self.currentQuestionIndex];
      self.printQuestion();
    } else {
      commonCommandMethods
          .promptConsole({
            messages: [`<span>Are the above details correct?
                        <span aria-label="Type Yes or No" /></span>`],
            console: self.console
          })
          .fail(function() {
            self.resetQuestion.call(self);
          })
          .done(function() {
            self.completed.call(self);
          });
    }
  },

  /**
   * Method to restore the questions to the second one (to avoid giving
   * consent again)
   */
  resetQuestion: function() {
    const self = this;

    self.currentQuestionIndex = 1;  // 0 will be the initial "do you want
                                    // to submit your data?", so set to 1.
    self.currentQuestion = self.questions[self.currentQuestionIndex];
    self.answers = [];
    self.printQuestion();
  },

  /**
   * Handles the Enter key when it's a typing question. It validates the
   * email in case the question is asking for an email.
   *
   * @return {boolean} - If the input is wrong or empty, then it returns
   *     false to prevent the terminal from copying
   * the prompt.
   *
   * @see [onKeyDown]{@link module:controllers/recruitment#onKeyDown}
   */
  onEnter: function() {
    const self = this;
    const enteredText = self.console.get_command().trim().toLowerCase();
    const fieldName = self.currentQuestion.field_name;
    let result = true;

    if (enteredText || !enteredText && self.currentQuestion.optional) {
      if (self.currentQuestion.type === 'email' &&
          !stringUtils.isValidEmail(enteredText)) {
        self.console.echo('The email is not valid');
        result = false;
      } else if (self.currentQuestion.type === 'select') {
        switch (enteredText) {
          case 'y':
            break;  // Nothing, so it follows the flow and goes to the
                    // next question
          case 'n':
            setTimeout(function() {
              self.console.set_prompt('');
              self.askMeLater.call(self);
            });
            break;
          default:
            result = false;
            self.console.echo('Please answer only Y or N');
            break;
        }
      }
    } else {
      result = false;
    }

    if (!result) {
      self.console.set_command('');

      return false;
    } else if (enteredText !== 'n' && enteredText !== 'a') {
      self.answers.push(enteredText);

      // Add the data to the answers object if a field name exists for it.
      if (fieldName) {
        self.inputtedData[fieldName] = enteredText;
      }

      // This puts the nextQuestion on the bottom of the event loop which
      // allows the plugin to print the prompt before it being updated
      setTimeout(function() {
        self.nextQuestion.call(self);
      }, 0);
    }
  },

  /**
   * It parses the received data by extracting the questions and storing
   * them in the right order. The first question it's created differently
   * since it's special.
   *
   * @param {!Object} data
   */
  parseData: function(data) {
    const self = this;

    self.questions.push({type: 'select', optional: false, index: 0});

    const len = data.fields.length;
    for (let i = 0; i < len; i++) {
      data.fields[i].index = i + 1;
      self.questions.push(data.fields[i]);
    }

    self.CANCEL_TEXT = data.cancel_text;
    self.currentQuestion = self.questions[0];
    self.currentQuestionIndex = 0;
  },

  /**
   * Handles printing the question. In the case of a Select question, it
   * first echo it and then grabs the element that holds it so using the
   * arrows reuses the same container. Terminal is paused so the user
   * can't write
   *
   * On typing questions, the prompt is then updated to show the question.
   */
  printQuestion: function() {
    const self = this;

    self.currentQuestion.ending = ': ';

    if (self.currentQuestion.type === 'select') {
      self.console.set_prompt(self.SELECT_TEMPLATE());
    } else {
      self.console.set_prompt(self.NORMAL_TEMPLATE(self.currentQuestion));
    }
  },

  /**
   * Reacts when a final endpoint response has been received.
   *
   * @param {!Object} response
   */
  onEndpointResponse: function(response) {
    const self = this;
    let message = response.message;

    if (response && response.responseJSON) {
      message = response.responseJSON.message;
    }

    self.console.echo(message, {raw: true});
    self.remove();
  },

  /**
   * This happens whenever the users completes asking the questions
   */
  completed: function() {
    const self = this;
    const data = _.extend(self.inputtedData, {name: 'gameend'});

    self.console.set_prompt('');
    self.console.echo('Submitting your response...');

    $.post(self.ENDPOINT, data).always(_.bind(self.onEndpointResponse, this));

    self.console.echo(
        'Great! We\'ll let you know when a new set of challenges are ready for you.');
  },

  /**
   * This happens whenever the user asks to be asked later or opts out
   * with CTRL + C
   */
  askMeLater: function() {
    const self = this;

    self.console.echo(self.CANCEL_TEXT, {raw: true});
    self.remove();
  },

  /**
   * Removes the interpreter and resumes the console
   */
  remove: function() {
    const self = this;

    self.console.resume();
    self.console.pop();
  }
};

exports = {NotifyController};

;return exports;});

//corp/hiring/rabbithole/game/static/js/controllers/recruitment.js
goog.loadModule(function(exports) {'use strict';goog.module('controllers.RecruitmentController');

const {Backbone, _, $} = window;

const {commonCommandMethods} = goog.require('commands.common');
const {countries} = goog.require('utils.countries');
const {keys} = goog.require('constants.keys');
const {stringUtils} = goog.require('utils.string');

const RecruitmentController = {
  /**
   * @property {string} - Endpoint to communicate with the server
   */
  ENDPOINT: '/api/v1/commands/recruit/reply/',

  /**
   * Prompt string to nicely print the list of options when a question has
   * multiple choices.
   *
   * @return {string} - template to set selection prompt ("[Y]es [N]o [A]sk me later")
   */
  SELECT_TEMPLATE: function() {
    return '[[;;;term-white][][[b;;;term-white]Y][[;;;term-white]&#93;][[;;;term-white]es] [[;;;term-white][][[b;;;term-white]N][[;;;term-white]&#93;][[;;;term-white]o] [[;;;term-white][][[b;;;term-white]A][[;;;term-white]&#93;][[;;;term-white]sk me later:] ';
  },

  /**
   * Template to use on the prompt using the name of the data being
   * required. It handles the question being optional.
   * 
   * @param {!Object} context - options of the current question
   * @return {string} - template for regular user prompt
   */
  NORMAL_TEMPLATE: function(context) {
    const {name, ending, index, optional} = context;
    let output = `[[;;;term-white][][[;;;term-green]#${index + 1}][[;;;term-white]&#93;] `;

    if (optional) {
      output += `[[;;;term-white]${name}] [[i;;;term-white](optional)][[;;;term-white]: ]`;
    } else {
      output += `[[;;;term-white]${name}${ending}]`;
    }

    return output;
  },

  CANCEL_TEXT: '',
  currentQuestion: {},
  currentQuestionIndex: 0,

  console: undefined,
  $output: $('.terminal-output'),
  questions: [],
  answers: [],
  inputtedData: {},
  startQuestionIndex: 0,
  hasPrompt: false,

  /**
   * Initialises the process of asking the user the received questions
   *
   * @param {!jQueryTerminal} consoleInstance
   * @param {!Object} data
   */
  start: function(consoleInstance, data) {
    const self = this;

    self.console = consoleInstance;
    self.$output = $('.terminal-output');
    self.questions = [];
    self.answers = [];
    self.inputtedData = {};
    self.startQuestionIndex = 0;
    self.hasPrompt = false;
    self.parseData(data);

    if (data.prompt) {
      self.startQuestionIndex = 1;
      const promptTemplate = self.NORMAL_TEMPLATE(
        {name: data.prompt, ending: '', index: 0, optional: false});
      const promptText = $.terminal.format(promptTemplate);
      self.console.echo(`<span>${promptText}
        <span aria-label="Type Y for Yes, N for No, A for Ask me later." /></span>`, {raw: true});
    }

    self.console.push($.noop, {
      prompt: ' ',
      keydown: _.bind(self.onKeyDown, this),
      completion: _.bind(self.onCompletion, this)
    });

    // change the behaviour of TAB autocomplete
    let settings = self.console.settings();
    settings.completionEscape = false;  // disables escaping spaces between words for autocomplete.
    settings.wordAutocomplete = false;  // enables autocomplete by whole string (several words in line).

    self.printQuestion();
  },

  /**
   * Handles the autocompletion with TAB for Country field.
   *
   * @param {string} userInput - value user has entered in command line prompt
   * @param {?Function} callback - function that need to be invoked
   *
   * @see [start]{@link module:controllers/recruitment#start}
   */
  onCompletion: function(userInput, callback) {
    const self = this;

    if (self.currentQuestion.type == 'country') {
      callback(countries);
    }
  },

  /**
   * Handles the keydown event on the new console interpreter. It will
   * handle only the enter key.
   *
   * @param {!jQuery.Event} event
   * @return {boolean} - Returns false on enter to avoid copying the
   *     prompt on certain situations
   *
   * @see [start]{@link module:controllers/recruitment#start}
   * @see [onEnter]{@link module:controllers/recruitment#onEnter}
   * @see [askMeLater]{@link module:controllers/recruitment#askMeLater}
   */
  onKeyDown: function(event) {
    const self = this;

    // Opting out
    if (event.which === keys.C && event.ctrlKey) {
      self.console.echo(self.console.get_prompt() + self.console.get_command());
      self.askMeLater();
      return false;
    }

    if (event.which === keys.ENTER) {
      return self.onEnter.call(self);
    }
  },

  /**
   * It handles going to the next question by updating the index of the
   * current question and populates the currentQuestion property. In the
   * event of getting to the last question, it calls completed instead.
   *
   * @see [printQuestion]{@link module:controllers/recruitment#printQuestion}
   * @see [completed]{@link module:controllers/recruitment#completed}
   */
  nextQuestion: function() {
    const self = this;

    if (self.currentQuestionIndex < self.questions.length - 1) {
      self.currentQuestionIndex++;

      if (self.currentQuestion.callback) {
        self.currentQuestion.callback.call(self);
      }

      self.currentQuestion = self.questions[self.currentQuestionIndex];
      self.printQuestion();

      // a11y: Find line with answer that was entered prior printing current
      // question and enable a11y for it, so that we could navigate with screen reader.
      const lastTerminalCommand = self.$output.find('.terminal-command').last();
      lastTerminalCommand.removeAttr('role').removeAttr('aria-hidden');

      let leftBrackets = lastTerminalCommand.find('span[data-text="["]');
      leftBrackets.attr('aria-hidden', true);

      let rightBrackets = lastTerminalCommand.find('span[data-text="]"]');
      rightBrackets.attr('aria-hidden', true);
    } else {
      commonCommandMethods
          .promptConsole({
            messages: [`<span>Are the above details correct?
                        <span aria-label="Type Yes or No" /></span>`],
            console: self.console
          })
          .fail(function() {
            self.resetQuestion.call(self);
          })
          .done(function() {
            self.completed.call(self);
          });
    }
  },

  /**
   * Method to restore the questions to the second one (to avoid giving
   * consent again)
   */
  resetQuestion: function() {
    const self = this;

    self.currentQuestionIndex =
        self.startQuestionIndex;  // 0 will be the initial "do you want to
                                  // submit your data?", so set to 1.
    self.currentQuestion = self.questions[self.currentQuestionIndex];
    self.answers = [];
    self.printQuestion();
  },

  /**
   * Handles the Enter key when it's a typing question. It validates the
   * email in case the question is asking for an email.
   *
   * @return {boolean} - If the input is wrong or empty, then it returns
   *     false to prevent the terminal from copying
   * the prompt.
   *
   * @see [onKeyDown]{@link module:controllers/recruitment#onKeyDown}
   */
  onEnter: function() {
    const self = this;

    let enteredText = self.console.get_command().trim();
    const fieldName = self.currentQuestion.field_name;
    let result = true;

    if (enteredText || !enteredText && self.currentQuestion.optional) {
      if (self.currentQuestion.type === 'email' &&
          !stringUtils.isValidEmail(enteredText)) {
        self.console.echo(enteredText);
        self.console.echo('Email is not valid.');
        // ask the same question again
        self.console.echo(self.NORMAL_TEMPLATE(self.currentQuestion), {newline: false});
        result = false;
      } else if (self.currentQuestion.type === 'choice') {
        const intValue = parseInt(enteredText, 10);

        if (intValue > self.currentQuestion.choices.length || intValue < 1) {
          self.console.echo(
              'Please enter 1-' + self.currentQuestion.choices.length + '.');
          result = false;
        } else {
          enteredText = self.currentQuestion.choices[intValue - 1].value;
        }

        if (enteredText !== self.currentQuestion.other_value) {
          self.currentQuestionIndex++;
        }

      } else if (self.currentQuestion.type === 'select') {
        switch (enteredText.toLowerCase()) {
          case 'y':
            break;  // Nothing, so it follows the flow and goes to the
                    // next question
          case 'n':
            setTimeout(function() {
              self.console.set_prompt('');
              self.optOut.call(self);
            });

            break;
          case 'a':
            setTimeout(function() {
              self.console.set_prompt('');
              self.askMeLater.call(self);
            });

            break;
          default:
            result = false;
            self.console.echo('Please answer only Y, N or A');
            break;
        }
      } else if (self.currentQuestion.type === 'country') {
        let matchedCountry;

        const len = countries.length;
        for (let i = 0; i < len; i++) {
          const country = countries[i];
          if (country.toLowerCase() == enteredText.toLowerCase()) {
            matchedCountry = country;
          }
        }

        if (matchedCountry) {
          enteredText = matchedCountry;
        } else {
          result = false;
          self.console.echo(enteredText);
          self.console.echo('Invalid country.');
          // ask the same question again
          self.console.echo(self.NORMAL_TEMPLATE(self.currentQuestion), {newline: false});
        }
      }
    } else {
      result = false;
    }

    if (!result) {
      self.console.set_command('');
      return false;
    }

    if (enteredText.toLowerCase() !== 'n' &&
        enteredText.toLowerCase() !== 'a') {
      self.answers.push(enteredText);

      // Add the data to the answers object if a field name exists for it.
      if (fieldName) {
        self.inputtedData[fieldName] = enteredText;
      }

      // This puts the nextQuestion on the bottom of the event loop which
      // allows the plugin to print the prompt before it being updated
      setTimeout(function() {
        self.nextQuestion.call(self);
      }, 0);
    }
  },

  /**
   * It parses the received data by extracting the questions and storing
   * them in the right order. The first question it's created differently
   * since it's special.
   *
   * @param {!Object} data
   */
  parseData: function(data) {
    const self = this;

    if (data.prompt) {
      self.hasPrompt = true;
      self.questions.push({
        type: 'select',
        optional: false,
        index: 0,
        callback: function() {
          self.console.echo(data.confirm_text, {raw: true});
        }
      });
    }

    const len = data.fields.length;
    for (let i = 0; i < len; i++) {
      data.fields[i].index = data.prompt ? i + 1 : i;
      self.questions.push(data.fields[i]);
    }

    self.CANCEL_TEXT = data.cancel_text;
    self.currentQuestion = self.questions[0];
    self.currentQuestionIndex = 0;
  },

  /**
   * Handles printing the question. In the case of a Select question, it
   * first echo it and then grabs the element that holds it so using the
   * arrows reuses the same container. Terminal is paused so the user
   * can't write
   *
   * On typing questions, the prompt is then updated to show the question.
   */
  printQuestion: function() {
    const self = this;
    self.currentQuestion.ending = ': ';

    if (self.currentQuestion.type === 'select') {
      self.console.set_prompt(self.SELECT_TEMPLATE({}));
    } else if (self.currentQuestion.type === 'choice') {
      self.console.echo(self.NORMAL_TEMPLATE(self.currentQuestion));
      self.currentQuestion.choices.forEach(function(choice, index) {
        self.console.echo('[' + (index + 1) + '] ' + choice.name);
      });
      self.console.set_prompt(
          'Enter 1-' + self.currentQuestion.choices.length + ': ');
    } else {
      if (self.currentQuestion.type === 'country') {
        self.console.echo(
            'Use tab key twice to see list of available country/region choices.');
      }

      // a11y: This allows us to print question and user input on the same line,
      // so that screen reader can read it.
      self.console.echo(self.NORMAL_TEMPLATE(self.currentQuestion), {newline: false});
      self.console.set_prompt('');
    }
  },

  /**
   * Reacts when a final endpoint response has been received.
   *
   * @param {!Object} response
   */
  onEndpointResponse: function(response) {
    const self = this;
    let message = response.message;

    if (response && response.responseJSON) {
      message = response.responseJSON.message;
    }

    self.console.echo(message, {raw: true});
    self.remove();

    if (response.triggers && response.triggers.recruit) {
      RecruitmentController.start(self.console, response.triggers.recruit);
    }
  },

  /**
   * This happens when the user selects No on the first question
   */
  optOut: function() {
    const self = this;
    const data = {action: 'n', name: 'recruit'};

    self.console.echo('Confirming your response...');
    self.console.pause();

    $.post(self.ENDPOINT, data).always(_.bind(self.onEndpointResponse, this));

    // log the player as opted out with google analytics
    ga('send', {
      hitType: 'event',
      eventCategory: 'opt-in',
      eventAction: 'n',
    });
  },

  /**
   * This happens whenever the users completes asking the questions
   */
  completed: function() {
    const self = this;
    const data = _.extend(self.inputtedData, {action: 'y', name: 'recruit'});

    self.console.set_prompt('');
    self.console.echo('Submitting your response...');

    $.post(self.ENDPOINT, data).always(_.bind(self.onEndpointResponse, this));

    // log the player as opted in with google analytics
    ga('send', {
      hitType: 'event',
      eventCategory: 'opt-in',
      eventAction: 'y',
    });
  },

  /**
   * This happens whenever the user asks to be asked later or opts out
   * with CTRL + C
   */
  askMeLater: function() {
    const self = this;

    self.console.echo(self.CANCEL_TEXT, {raw: true});
    self.remove();

    // logs that the user has requested to be asked again later with
    // Google analytics
    ga('send', {
      hitType: 'event',
      eventCategory: 'opt-in',
      eventAction: 'a',
    });
  },

  /**
   * Removes the interpreter and resumes the console
   */
  remove: function() {
    const self = this;

    self.console.resume();
    self.console.pop();

    // reset the behaviour of TAB autocomplete
    let settings = self.console.settings();
    settings.completionEscape = true;
    settings.wordAutocomplete = true;
  }
};

exports = {RecruitmentController};

;return exports;});

//corp/hiring/rabbithole/game/static/js/models/Command.js
goog.loadModule(function(exports) {'use strict';goog.module('models.Command');

const {Backbone, _, $} = window;
const googleAnalytics = goog.require('utils.analytics');
const {commands} = goog.require('commands.commands');

const commandModel = Backbone.Model.extend({
  defaults: function() {
    return {command: '', result: '', lastRun: new Date().getTime()};
  },

  /**
   * Attempts to run the associated command's run method and applies
   * any updates to the console along the way. Also catches any errors
   * if they occur and logs an error message in UI console and the
   * browser console.
   *
   * @param {Function} cb - Command callback function to execute.
   * @param {Object} consoleInstance - Console pane instance.
   */
  run: function(cb, consoleInstance) {
    const self = this;
    const args = self.get('command').trim().split(' ');
    const command = args.shift();

    if (typeof commands[command] !== 'undefined') {
      const commandFunc = commands[command];

      try {
        commandFunc(command, args, consoleInstance)
            .progress(function(message) {
              consoleInstance.echo(message);
            })
            .always(function(result) {
              self.commandExecuted.call(self, result, cb);
            });
      } catch (e) {
        console.error(e);

        this.set('result', 'Something went wrong...');

        cb([{content: 'Something went wrong...'}]);
      }
    } else {
      self.commandExecuted(commands.common.defaultError(command), cb);
    }

    googleAnalytics.trackEvent(
        'command', 'executed', self.get('command').split(' ').shift());
  },

  /**
   * Sets the result on the model and executes the callback function.
   *
   * @param {string} result - Output result.
   * @param {Function} callback - Command callback function to
   *     execute.
   */
  commandExecuted: function(result, callback) {
    this.set('result', result);

    callback(result);
  }
});

exports = {commandModel};

;return exports;});

//corp/hiring/rabbithole/game/static/js/views/Console.js
goog.loadModule(function(exports) {'use strict';goog.module('views.consoleView');


const {Backbone, _, $} = window;

const googleAnalytics = goog.require('utils.analytics');
const {FeedbackController} = goog.require('controllers.FeedbackController');
const {NotifyController} = goog.require('controllers.NotifyController');
const {RecruitmentController} = goog.require('controllers.RecruitmentController');
const {commandModel} = goog.require('models.Command');
const {commands} = goog.require('commands.commands');
const {keys} = goog.require('constants.keys');
const {pathUtils} = goog.require('utils.path');
const {stringUtils} = goog.require('utils.string');

const consoleView = Backbone.View.extend({

  el: '.console',

  promptText: 'foobar:- guest$ ',

  /**
   * Handles the initialization of the View and creates the instance of
   * the jQuery.Terminal
   *
   * @param {!Object} config - The config object is only meant to contain
   *     the app property to pass the parent view.
   */
  initialize: function(config) {
    const self = this;

    self.app = config.app;
    self.enabled = false;
    self.$el.terminal(_.bind(self.handleCommand, self), {
      prompt: self.promptText,
      processArguments: false,
      exit: false,
      greetings: '',
      onInit: _.bind(self.onConsoleInit, self),
      onBlur: _.bind(self.onBlur, self),
      keydown: _.bind(self.onKeyDown, self),
      completion: self.tabCompletion,
      onCommandChange: _.bind(self.onCommandChange, self)
    });
  },

  /**
   * Called when the console plugin is initialised
   *
   * @param {!jQueryTerminal} consoleInstance - Instance of the console
   *     being initialised
   */
  onConsoleInit: function(consoleInstance) {
    this.console = consoleInstance;
    this.$prompt = this.$('.prompt');
    this.$output = this.$('.terminal-output');
    this.bindApp();

    consoleInstance.echo(
        'Mounting <span class="term-blue">/home/' + this.app.username +
            '</span>...',
        {raw: true});
    consoleInstance.pause();
  },

  /**
   * Methods that enables the console. It cleans the existing output,
   * updates the prompt and echo the welcome message. Finally it resumes
   * the instance so it can be used by the user.
   *
   * @see [fetchFiles]{@link module:views/App#fetchFiles}
   */
  enable: function() {
    this.updatePrompt();

    if (!this.enabled) {
      this.enabled = true;

      this.console.echo(
          '<p class="term-yellow">Welcome to foobar version ' +
              this.app.os.bootVersion + '-beta (' + this.app.os.bootTime +
              ')</p>',
          {raw: true});

      if (this.app.username === 'guest') {
        this.console.echo(
            'Google has a code challenge ready for you.', {raw: true});

        // warning message for non-desktop devices
        if (!this.app.usingDesktop) {
          this.console.echo(
              '<p class="term-red">Mobile device detected, limited coding functionality.</p>',
              {raw: true});
        }
      }

      if (this.app.initialMessage) {
        this.console.echo(this.app.initialMessage, {raw: true});
      }

      // give the user some more help?
      if (this.app.username === 'guest') {
        this.console.echo(
            '<p class="term-red"> Warning! Your invitation may expire if you leave this page. ' +
            '<a href="#" class="btn login">Click here to sign in</a> or enter the ' +
            '<span class="term-yellow">login</span> command ' +
            'so you can save your progress and resume later.</p>',
            {raw: true});
        this.console.echo(
            '<p>For a list of commands type <span class="term-yellow">help</span>. ' +
            'To get started with your first challenge type ' +
            '<span class="term-yellow">request</span>.</p>',
            {raw: true});
      }

      this.console.resume();
    }
  },

  /**
   * Proxy method to output a message to the console
   *
   * @param {string} message - Message to display.
   * @param {?Object} opts - Additional options.
   */
  echo: function(message, opts) {
    opts = opts || {};

    this.console.echo(message, opts);
  },

  /**
   * Handles the binding of custom events that may be fired on the App
   * object
   */
  bindApp: function() {
    this.app.on('challenge:timeout', this.onTimeout, this);
    this.app.on('path:updated', this.updatePrompt, this);
  },

  /**
   * Prints a new line to the terminal
   *
   * @param {{content: string, css: string}} line
   */
  printLine: function(line) {
    let string = line.content;

    if (line.css) {
      string =
          stringUtils.format('<span class="{0}">{1}</span>', line.css, string);
    }

    if (string) {
      this.console.echo(string, {raw: true});
    }
  },

  /**
   * Handles animation
   */
  handleAnimation: function() {
    const self = this;
    const $animations = $('[data-animation]');

    if ($animations.length) {
      self.setupAnimations($animations);

      // From now on we have to listen to resize
      $(window).on('resize', _.bind(self.onResize, self));
    }
  },

  onResize: function() {
    const self = this;
    self.resizing = true;

    // This is fired 250 ms after the user stops resizing
    if (self.resizeTimeout) {
      clearTimeout(self.resizeTimeout);
    }

    self.resizeTimeout = setTimeout(function() {
      if (self.resizing) {
        self.resizing = false;
        self.setupAnimations.call(self, self.$('.animation'));
      }
    }, 150);
  },

  stopAnimation: function() {
    const self = this;

    if (self.animationTimeout) {
      clearTimeout(self.animationTimeout);
    }
  },

  setupAnimations: function($animations) {
    const self = this;

    $animations = $animations || $('[data-animation]');
    const frameDuration = $animations.data('frame-duration');
    const endPause = $animations.data('end-pause');

    // Set listener to handle stop animated content
    $animations.on('click', _.bind(self.stopAnimation, self));

    let loopFunc = function() {
      self.setupAnimation($animations, frameDuration, endPause);
    };

    $animations.each(loopFunc);
  },

  /**
   * Set ups the animation on a given element.
   */
  setupAnimation: function($animation, frameDuration, endPause) {
    const self = this;
    const showClass = 'animation__frame--visible';

    let advanceFrame = _.bind(function() {
      let thisFrameDuration = frameDuration;
      let $frame = $animation.find('.' + showClass);  // currently visible frame
      let $next = $frame.next();

      if (self.resizing || !$frame.length) {
        return;
      }

      if (!$next.length) {
        // at the end
        thisFrameDuration = endPause;
        $frame.removeClass(showClass);
        $animation.find('.animation__frame').first().addClass(showClass);
      } else {
        // continue
        $frame.removeClass(showClass);
        $next.addClass(showClass);
      }

      // do next frame
      self.animationTimeout = window.setTimeout(advanceFrame, thisFrameDuration);
    }, self);

    // start the first frame
    self.animationTimeout = window.setTimeout(advanceFrame, frameDuration);

    // processed it so remove the attr
    $animation.removeAttr('data-animation');
  },

  /**
   * Handles whenever a user types a command on the console and press
   * enter
   *
   * @param {string} input - Command typed with no parsing
   * @see [initialize]{@link module:views/Console#initialize}
   */
  handleCommand: function(input) {
    if (input.trim()) {
      const command = new commandModel({command: stringUtils.cleanSpaces(input)});
      const self = this;

      self.console.pause();

      command.run(function(result) {
        if (result.length) {
          _.forEach(result, self.printLine, self);
        }

        self.console.resume();
        self.updatePrompt.call(self);

        // see if we need to run any animation
        self.handleAnimation(self);
      }, self.console);
    }
  },

  /**
   * Function called whenever the current command changes (while it's
   * being typed) and handles the case of, after doing auto-completion,
   * removing the added space if the given command is a folder's name.
   *
   * @param {string} command - Command being typed
   * @param {!jQueryTerminal} terminal
   * @see [initialize]{@link module:views/Console#initialize}
   * @see [tabCompletion]{@link module:views/Console#tabCompletion}
   */
  onCommandChange: function(command, terminal) {
    if (this.completion) {
      if (command[command.length - 1] === ' ') {
        const candidateFolder = command.trim().split(' ').pop();
        const folder = pathUtils.getFile(candidateFolder);

        if (folder && folder.get('type') === 'folder') {
          terminal.set_command(command.trim() + '/');
        }
      }
    }

    this.completion = false;
  },

  /**
   * Function called whenever the user is typing and press tab to try to
   * expand a command or a file name. It invokes the callback with
   * an {Array} of possible results.
   *
   * @param {string} string - String that's been tried to be
   *     auto-completed, note that this is not the full command
   * @param {!Function} callback - Callback that needs to be invoked with
   *     the {Array} of results
   * @see [initialize]{@link module:views/Console#initialize}
   * @see [onCommandChange]{@link module:views/Console#onCommandChange}
   */
  tabCompletion: function(string, callback) {
    const command = this.get_command();

    this.completion = true;

    if (command.indexOf(' ') >
        -1) {  // Then we are trying to do something with a file
      if (command.indexOf('/') > -1) {  // Dealing with a folder
        const result = [];
        const folder = command.trim().split(' ').pop().split('/').shift();
        const files = pathUtils.getFilesAt(folder);

        if (files) {
          files.forEach(function(file) {
            result.push(file.get('name'));
          });
        }

        callback(result);
      } else {
        const args = [pathUtils.getPredictivePath(string)];

        if (command.trim().split(' ').shift() === 'cd') {
          args.push({type: 'folder'});
        }

        callback(pathUtils.getFilesNameAt.apply(null, args));
      }
    } else {  // Otherwise is just a command
      callback(commands.available);
    }
  },

  /**
   * Function that doesn't allow the console to loose the focus if the
   * view is still active (ie, we're trying to select some other element
   * inside the view)
   *
   * @return {boolean} - Only returns false if the view is active
   * @see [initialize]{@link module:views/Console#initialize}
   */
  onBlur: function() {
    if (this.$el.hasClass('active')) {
      return false;
    }
  },

  /**
   * Function called as the user types in the console. It handles the case
   * of CTRL + C in which the command should be wiped. Also takes in
   * account the possibility that the user may be trying to use the
   * reverse search functionality triggered by CTRL + R, in which case it
   * will cancel it by firing a CTRL + G event.
   *
   * @param {!jQuery.event} event
   * @param {!jQueryTerminal} consoleInstance
   * @see [initialize]{@link module:views/Console#initialize}
   * @fires window#keydown.cmd
   */
  onKeyDown: function(event, consoleInstance) {
    if (event.which === keys.C && event.ctrlKey) {
      if (this.$prompt.text().indexOf('(reverse-i-search)') > -1) {
        // There is no public method to cancel reverse-search. However
        // CTRL+G does cancel it, let's fake it
        setTimeout(function() {
          const e = $.Event('keydown.cmd');

          e.ctrlKey = true;
          e.which = keys.G;

          /* istanbul ignore next: Is a fallback for old browsers */
          $(document.documentElement || window).trigger(e);
        }, 0);
      } else {
        consoleInstance.set_command('');
      }
    }
  },

  /**
   * Function in charge of updating the prompt if, and only if, the path
   * has been changed
   */
  updatePrompt: function() {
    if (this.currentPath !== this.app.currentPath) {
      this.currentPath = this.app.currentPath;
      this.currentPrompt = this.promptText.replace('-', '~' + this.currentPath)
                               .replace('guest', this.app.username);
      this.console.set_prompt(this.currentPrompt);
    }
  },

  /**
   * Updates the current username in the console prompt text.
   *
   * @param {string} username - New username.
   */
  updatePromptUsername: function(username) {
    const promptText = this.currentPrompt.replace(this.app.username, username);

    this.currentPrompt = promptText;
    this.console.set_prompt(promptText);
  },

  /**
   * Prints a formatted message to be an error on the terminal
   *
   * @param {string} message
   */
  echoError: function(message) {
    this.printLine({content: message, css: 'term-red'});
  },

  /**
   * Method in charge of focusing the view
   */
  focusView: function() {
    this.$el.addClass('active');
    this.console.focus(true);
  },

  /**
   * Method that removes the focus from the view programmatically
   */
  blurView: function() {
    this.$el.removeClass('active');
    this.console.focus(false);
  },

  /**
   * Function that's called whenever the time for a challenge is finished.
   * It will output a message and focus the view back.
   *
   * @param {!Array} params - Array of extra parameter that comes with the
   *     Event. In this case it will be the event name.
   */
  onTimeout: function(params) {
    const challengeName = params[0];

    this.console.echo(
        'Your time has run out for challenge: "' + challengeName + '".',
        {raw: true});
    googleAnalytics.trackEvent('challenge', 'timeout', challengeName);
  },

  /**
   * Starts the RecruitmentController to ask the user questions
   *
   * @param {!Object} data
   *
   * @see [App#onRecruitInfoReceived]{@link module:views/App#onRecruitInfoReceived]
   * @see [RecruitmentController]{@link module:controllers/recruitment]
   */
  askUser: function(data) {
    RecruitmentController.start(this.console, data);
  },

  /**
   * Starts the FeedbackController to ask the user questions
   *
   * @see [App#onRecruitInfoReceived]{@link module:views/App#startFeedback]
   * @see [FeedbackController]{@link module:controllers/feedback]
   */
  gatherFeedback: function() {
    FeedbackController.start(this.console);
  },

  /**
   * Starts the NotifyController to ask the user questions
   *
   * @param {!Object} data
   *
   * @see [App#onRecruitInfoReceived]{@link module:views/App#onRecruitInfoReceived]
   * @see [RecruitmentController]{@link module:controllers/recruitment]
   */
  askToNotifyUser: function(data) {
    NotifyController.start(this.console, data);
  }
});

exports = {consoleView};

;return exports;});

//corp/hiring/rabbithole/game/static/js/views/Countdown.js
goog.loadModule(function(exports) {'use strict';goog.module('views.Countdown');

const {Backbone, _, $} = window;
const {stringUtils} = goog.require('utils.string');

const countdownView = Backbone.View.extend(
    /** @lends module:views/Countdown.prototype **/ {

      tagName: 'div',

      className: 'countdown-timer',

      /**
       * @property {Number} ALERT_TIME_DIFFERENCE - Time difference to
       * check against in order to show when a timer is low.
       */
      ALERT_TIME_DIFFERENCE: 600000,

      /**
       * Handles the initialization of the View. If the model doesn't have
       * an expiry date, it won't be rendered.
       *
       * @see [getExpiry]{@link module:views/Countdown#getExpiry}
       * @see [startTimer]{@link module:views/Countdown#startTimer}
       */
      initialize: function() {
        this.name = this.model.get('name');
        this.getExpiry();

        if (this.expiry) {
          this.render();

          this.$timer = this.$('.countdown-timer__time');
          this.$el.appendTo('.countdown-timer__holder');
          this.startTimer();
        }
      },

      /**
       * Generates the template for the view with the time difference and
       * the name of the challenge.
       *
       * @return {string}
       */
      template: function() {
        return '<time class="countdown-timer__time">' +
            this.getTimeDifference().formatted + '</time>' +
            '<div class="countdown-timer__text">remaining for "<span class="countdown-timer__challenge">' +
            this.name + '</span>"</div>';
      },

      /**
       * Originate the expiry date property based on the expiry date of
       * the View Model or the Duration (in hours) of the View Model. The
       * duration always take precedence over the expiry date.
       *
       * It falls back to null if no value is available
       */
      getExpiry: function() {
        const expiry = this.model.get('expiry');
        const duration = this.model.get('duration');

        if (expiry || duration) {
          if (duration) {
            // This extra time allows the animation to kick in so it
            // doesn't seem like jumping the time two seconds
            this.expiry = new Date(
                (new Date().getTime() + 60 * 60 * duration * 1000) + 499);
          } else {
            this.expiry = new Date(expiry);
          }
        } else {
          this.expiry = null;
        }
      },

      /**
       * Renders the view with the template.
       *
       * @return {!Object} - The own view to allow chaining
       *
       * @see [template]{@link module:views/Countdown#template}
       */
      render: function() {
        this.$el.html(this.template());

        return this;
      },

      /**
       * Starts the countdown timer.
       */
      startTimer: function() {
        this.$el.show().addClass('fadeInUp').delay(1150).queue(function() {
          $(this).removeClass('fadeInUp').dequeue();
        });
        this.timerInterval = setInterval(_.bind(this.updateTimer, this), 1000);
      },

      /**
       * Stops the current timer and clears the current interval.
       */
      stopTimer: function() {
        clearInterval(this.timerInterval);

        this.timerInterval = null;
      },

      /**
       * Hides the timer in an animated way
       */
      hideTimer: function() {
        this.$el.addClass('fadeOutDown').delay(1150).queue(function() {
          $(this).hide().removeClass('fadeOutDown').dequeue();
        });
      },

      /**
       * Calculates the difference between now and the expiry date. If the
       * difference is negative, the formatted value will always be
       * 00:00:00:00
       *
       * @return {{ms: number, formatted: string}}
       */
      getTimeDifference: function() {
        const now = new Date();
        const diff = this.expiry - now;
        let result;
        let ms = diff;
        let dd;
        let hh;
        let mm;
        let ss;

        if (diff <= 0) {
          result = '00:00:00:00';
        } else {
          ms = ms / 1000;
          ss = stringUtils.pad(Math.floor(ms % 60));
          ms /= 60;
          mm = stringUtils.pad(Math.floor(ms % 60));
          ms /= 60;
          hh = stringUtils.pad(Math.floor(ms % 24));
          ms /= 24;
          dd = stringUtils.pad(Math.floor(ms));

          result = (dd + ':' + hh + ':' + mm + ':' + ss);
        }

        return {ms: diff, formatted: result};
      },

      /**
       * Sets the countdown to be on low time which will be highlighted on
       * the page.
       *
       * @fires challenge:low-time
       */
      enableLowTime: function() {
        this.lowTime = true;
        this.$el.addClass('countdown-timer--low');
        window.AppView.instance.trigger('challenge:low-time');
      },

      /**
       * Renders the countdown timer to the view based on the opened
       * file's countdown date after each second interval has passed.
       *
       * It will enable the low time if the difference is below 10 minutes
       * or it will timeout if it's negative.
       *
       * @see [enableLowTime]{@link module:views/App#enableLowTime}
       * @see [timeout]{@link module:views/App#timeout}
       */
      updateTimer: function() {
        const time = this.getTimeDifference();

        this.$timer.text(time.formatted);

        if (time.ms > 0 && !this.lowTime &&
            time.ms < this.ALERT_TIME_DIFFERENCE) {
          this.enableLowTime();
        } else if (time.ms <= 0) {
          this.timeout();
        }
      },

      /**
       * Fires an event to let sub-views know that a timeout did happen
       * and stops the timer
       *
       * @fires challenge:timeout
       */
      timeout: function() {
        this.stopTimer();
        window.AppView.instance.trigger('challenge:timeout', [this.name]);
      },

      /**
       * Stops the timer and remove all the events and data associated to
       * the view.
       */
      remove: function() {
        const self = this;

        self.stopTimer();
        self.hideTimer();

        setTimeout(function() {
          self.undelegateEvents();

          self.$el.removeData().unbind().remove();
          Backbone.View.prototype.remove.call(self);
        }, 1250);
      }
    });

exports = {countdownView};

;return exports;});

//corp/hiring/rabbithole/game/static/js/views/Prompter.js
goog.loadModule(function(exports) {'use strict';goog.module('views.Prompter');

const {Backbone, _, $} = window;
const {keys} = goog.require('constants.keys');

const prompterView = Backbone.View.extend({
  el: '.prompter',

  /**
   * @property {Object} events - Events binding on the View
   */
  events: {'mouseup': 'onMouseUp', 'keydown input': 'onKeyDown'},

  /**
   * Main initialize method
   */
  initialize: function() {
    this.$input = this.$('input');
    this.$pageSections = $('section');
    this.on('prompter:closed', this.onClose, this);
    this.on('prompter:focus', this.onMouseUp, this);
  },

  /**
   * Handles closing the view
   */
  onClose: function() {
    this.defer = null;
    this.$el.addClass('is-hidden');
  },

  /**
   * Handles click on the view, to focus the input wherever you click.
   * It prevents the propagation of the event so it doesn't bubble and
   * reaches [onToggleFocus]{@link module:views/App#onToggleFocus}
   *
   * @param {jQuery.Event} event
   * @return {boolean} - To prevent the whole event
   *
   * @see [events]{@link module:views/Prompter#events}
   */
  onMouseUp: function(event) {
    /* istanbul ignore else */
    if (event) {
      event.stopPropagation();
    }

    this.$pageSections.removeClass('active');
    this.$input.focus();

    return false;
  },

  /**
   * Handles KeyDown on the input. It only accounts for CTRL + C and
   * ENTER
   *
   * @param {jQuery.Event} event
   * @see [events]{@link module:views/Prompter#events}
   * @see [cancelPrompt]{@link module:views/Prompter#cancelPrompt}
   * @see [onEnter]{@link module:views/Prompter#onEnter}
   */
  onKeyDown: function(event) {
    switch (event.which) {
      case keys.C: {
        if (event.ctrlKey) {
          this.cancelPrompt();
        }

        break;
      }
      case keys.ENTER: {
        this.onEnter();

        break;
      }
    }
  },

  /**
   * Handles the pressing of the ENTER Key. It only reacts if the
   * value is Y or N. In any case it will empty the input
   *
   * @see [onKeyDown]{@link module:views/Prompter#onKeyDown}
   * @see [closePrompt]{@link module:views/Prompter#closePrompt}
   * @see [cancelPrompt]{@link module:views/Prompter#cancelPrompt}
   */
  onEnter: function() {
    const value = this.$input.val().trim().toUpperCase();

    if (value === 'Y') {
      this.closePrompt();
    } else if (value === 'N') {
      this.cancelPrompt();
    }

    this.$input.val('');
  },

  /**
   * Closes the prompt by resolving the deferred
   *
   * @fires prompter:closed
   */
  closePrompt: function() {
    this.defer.resolve();
    this.trigger('prompter:closed');
  },

  /**
   * Closes the prompt by rejecting the deferred
   *
   * @fires prompter:closed
   */
  cancelPrompt: function() {
    this.defer.reject();
    this.trigger('prompter:closed');
  },

  /**
   * Main function of the view which creates a new Deferred and shows
   * the prompt. It will auto-focus the input
   *
   * @return {!jQuery.Deferred}
   *
   * @fires prompter:opened
   */
  prompt: function() {
    const self = this;

    self.defer = $.Deferred();

    self.$el.removeClass('is-hidden');
    self.trigger('prompter:opened');

    // This avoids upsetting ACE Editor
    setTimeout(function() {
      self.$input.focus();
    }, 150);

    return self.defer.promise();
  }
});

exports = {prompterView};

;return exports;});

//corp/hiring/rabbithole/game/static/js/views/Editor.js
goog.loadModule(function(exports) {'use strict';goog.module('views.Editor');

const {Backbone, _, $, ace: Ace} = window;
const googleAnalytics = goog.require('utils.analytics');
const {keys} = goog.require('constants.keys');
const {prompterView} = goog.require('views.Prompter');
const {save} = goog.require('commands.save');

const editorView = Backbone.View.extend({
  el: '.editor',

  /**
   * @property {Object} events - Events to be bound to the view.
   */
  events: {
    'keydown': 'catchNativeKeydownEvents',
    'click .editor__close': 'closeEditor',
    'click .editor__save': 'saveFile'
  },

  /**
   * Main initialize method setting up various properties to be handled by
   * the view.
   *
   * @param {Object} config - Config passed in from the parent view.
   */
  initialize: function(config) {
    this.app = config.app;
    this.$editorHolder = this.$('.editor__content');
    this.$editorFileName = this.$('.editor__filename');
    this.$saveButton = this.$('.editor__save');
    this.isDisabled = false;
    this.prompter = new prompterView();

    /* istanbul ignore next: Can't be mocked through JavaScript */
    if (navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i)) {
      this.$('.shortcuts').addClass('shortcuts--mac');
    }

    // Event bindings
    this.app.on('challenge:timeout', this.timeout, this);
    this.prompter.on('prompter:opened', this.prompterEnabled, this);
    this.prompter.on('prompter:closed', this.prompterDisabled, this);
  },

  /**
   * Opens the editor view pane by applying the relevant class, switching
   * the file name and focussing the actual editor area. Also triggers an
   * `editor:opened` event on the App view.
   */
  openEditor: function() {
    const self = this;

    if (!self.opened) {
      self.opened = true;
      self.$el.removeClass('editor--closed');
      self.$el.addClass('editor--opened');

      self.app.trigger('editor:opened');
      googleAnalytics.trackEvent('editor', 'opened');
    }

    self.$editorFileName.text(self.file.get('name'));
    self.editor.focus();
  },

  /**
   * Handles closing down the editor and cleaning everything up. Also
   * triggers a `editor:closed` event on the main App view.
   *
   * @param {jQuery.Event} event - Event object
   * @see [events]{@link module:views/Editor#events}
   */
  closeEditor: function(event) {
    let onClose;
    let persistEditor;

    if (event && event.stopImmediatePropagation) {
      // Avoid the click bubbling up to the App view
      event.stopImmediatePropagation();
    }

    if (this.opened) {
      if (this.file.get('dirty')) {
        onClose = _.bind(this.onClose, this);
        persistEditor = _.bind(this.persistEditor, this);

        this.blurView();
        this.editor.setReadOnly(true);
        this.prompter.prompt().done(onClose).fail(persistEditor);
      } else {
        this.onClose();
      }
    }
  },

  /**
   * Closes down the editor and triggers an editor:closed event on the
   * app.
   *
   * @see [initialize]{@link module:views/App#initialize}
   */
  onClose: function() {
    const self = this;

    self.file = null;
    self.opened = false;
    self.isDisabled = false;
    self.$el.removeClass('editor--opened');
    self.$el.addClass('editor--closed');

    setTimeout(function() {
      self.cleanEditor.call(self);
      self.app.trigger('editor:closed');
    }, 250);
  },

  /**
   * Removes any bound 'change' event listeners from the editor.
   */
  cleanEditor: function() {
    this.editor.getSession().removeAllListeners('change');
    this.editor.setReadOnly(false);
    this.editor.destroy();
    this.$editorHolder.replaceWith('<div class="editor__content"></div>');
    this.editor = null;
    this.$editorHolder = this.$('.editor__content');
  },

  /**
   * Handles getting the new files settings, setting up and a new editor
   * based on those and then showing and focussing the editor once
   * everything is set up.
   */
  openFile: function() {
    const self = this;
    let language;
    let content;

    self.file = self.app.currentFile;
    language = self.file.get('language');
    content = self.file.get('content');

    self.disableDirty();

    if (self.editor) {
      self.cleanEditor();
    }

    self.editor = self.setupEditor(language, content);

    self.bindEditorEvents();
    self.openEditor();

    self.app.focusEditor();
  },

  /**
   * Runs the setDirty method on the currently open file.
   * @see [bindEditorEvents]{@link module:views/Editor#bindEditorEvents}
   */
  onEditorChange: function() {
    if (!this.file.get('dirty')) {
      this.setDirty();
    }
  },

  /**
   * Sets up and returns an Ace editor instance based on the provided
   * language and contents.
   *
   * @param {string} language - Language mode for Ace editor
   * @param {string} content - Initial string of content to apply to the
   *     editor
   * @return {Object} - New Ace editor instance
   */
  setupEditor: function(language, content) {
    const editor = Ace.edit(this.$editorHolder.get(0));

    if (language) {
      editor.getSession().setMode('ace/mode/' + language);
    }

    if (content) {
      editor.setValue(content);
    }

    // Don't bother reapplying these settings if the editor already exists
    if (!this.editor) {
      editor.setTheme('ace/theme/monokai');
      editor.setShowPrintMargin(false);
      editor.setHighlightActiveLine(false);
      editor.setDisplayIndentGuides(false);
      editor.getSession().setUseWorker(false);
      editor.renderer.setScrollMargin(0, 30);

      // Saving with the keyboard
      editor.commands.addCommand({
        name: 'Save',
        bindKey: {win: 'Ctrl-S', mac: 'Command-S'},
        exec: _.bind(this.saveFile, this),
        readOnly: false
      });

      editor.commands.addCommand({
        name: 'Quit',
        bindKey: {win: 'Ctrl-E', mac: 'Command-E'},
        exec: _.bind(this.closeEditor, this),
        readOnly: false
      });
    }

    editor.gotoLine(0);

    return editor;
  },

  /**
   * Sets the 'dirty' property on the view. 'Dirty' indicates that a file
   * has unsaved changes.
   */
  setDirty: function() {
    this.file.set('dirty', true);
    this.$el.addClass('editor--dirty');
    this.$saveButton.prop('disabled', false);
  },

  /**
   * Removes the 'dirty' property from the view.
   */
  disableDirty: function() {
    this.file.set('dirty', false);
    this.$el.removeClass('editor--dirty');
    this.$saveButton.prop('disabled', true);
  },

  /**
   * Sets the editor content on the File model and resets its dirty state.
   *
   * @return {boolean} - Returns false to prevent any default action from
   *     click event.
   * @see [events]{@link module:views/Editor#events}
   */
  saveFile: function(event) {
    const defer = $.Deferred();
    const self = this;

    if (self.file.get('dirty') && !self.saving) {
      if (event && event.preventDefault) {
        googleAnalytics.trackEvent('editor', 'code saving', 'button');
      } else if (event) {
        googleAnalytics.trackEvent('editor', 'code saving', 'shortcut');
      }

      self.saving = true;
      self.$saveButton.text('Saving...');
      self.$saveButton.focus();
      self.$saveButton.addClass('editor__save--disabled');

      self.file.set('content', self.editor.getValue());
      save.sendToServer(self.file, defer);

      defer
          .done(function() {
            self.disableDirty.apply(self);
            self.app.focusEditor();
          })
          .always(function() {
            self.saving = false;
            self.$saveButton.text('Save changes')
                .removeClass('editor__save--disabled');
          });
    }

    return false;
  },

  /**
   * Bind events specific to the Editor plugin.
   */
  bindEditorEvents: function() {
    this.editor.getSession().on('change', _.bind(this.onEditorChange, this));
    this.editor.on('paste', function(e) {
      e.text = e.text.replace(/\u200B/g, '');
    });
  },

  /**
   * Handles focussing the editor pane. First checks is the prompter is
   * active before triggering a focus on that, otherwise focusses the
   * editor by applying the 'active' class and firing the .focus() method
   * on the editor instance.
   */
  focusView: function() {
    const self = this;

    if (this.isPrompterEnabled) {
      // Timeout to avoid issues with Ace editor events.
      setTimeout(function() {
        self.prompter.trigger('prompter:focus');
      }, 100);
    } else {
      // Apply relevant classes to activate CSS styles.
      if (!this.isDisabled) {
        this.$editorHolder.addClass('active');
        this.$el.addClass('active');
      }

      this.editor.focus();
    }
  },

  /**
   * Removes the 'active' class from the editor.
   */
  blurView: function() {
    this.$editorHolder.removeClass('active');
    this.$el.removeClass('active');
  },

  /**
   * Disables the editor when the countdown is complete.
   */
  timeout: function(params) {
    const challengeName = params[0];

    if (this.opened) {
      if (this.file && this.file.get('parent') === '/' + challengeName) {
        this.isDisabled = true;
        this.closeEditor();
      }
    }
  },

  /**
   * Prevents the keydown event in case it's CTRL + S/E or Command + S
   *
   * @param {jQuery.Event} event
   * @return {boolean} - it only returns if the event matches the above
   *     condition
   */
  catchNativeKeydownEvents: function(event) {
    if ((event.metaKey || event.ctrlKey) &&
        (event.which === keys.S || event.which === keys.E)) {
      return false;
    }
  },

  /**
   * Applies the 'editor-prompter--active' class to the view element.
   */
  prompterEnabled: function() {
    this.$el.addClass('editor-prompter--active');
    this.isPrompterEnabled = true;
  },

  /**
   * Removes the 'editor-prompter--active' class from the view element.
   */
  prompterDisabled: function() {
    this.$el.removeClass('editor-prompter--active');
    this.isPrompterEnabled = false;
  },

  /**
   * Persists the editor and re-focuses it after the user selects 'n' in
   * the prompter.
   */
  persistEditor: function() {
    this.isPrompterEnabled = false;
    this.editor.setReadOnly(false);
    this.focusView();
  }
});

exports = {editorView};

;return exports;});

//corp/hiring/rabbithole/game/static/js/views/App.js
goog.loadModule(function(exports) {'use strict';/**
 * Main interface view which handles instantiating both the Console view
 * and the Editor view, common methods between them and also dispatching
 * atomic, application-wide events.
 */
goog.module('views.App');

const {Backbone, _, $} = window;

const googleAnalytics = goog.require('utils.analytics');
const {FileSystem} = goog.require('collections.FileSystem');
const {consoleView} = goog.require('views.consoleView');
const {countdownView} = goog.require('views.Countdown');
const {editorView} = goog.require('views.Editor');
const {fileModel} = goog.require('models.File');
const {keys} = goog.require('constants.keys');
const {safeWindow} = goog.require('safevalues.dom');
const {sanitizeUrl} = goog.require('safevalues');


const AppView = Backbone.View.extend({
  el: 'body',

  /**
   * @property {Object} events - Events binding on the View
   */
  events: {
    'keydown': 'onKeyDown',
    'mouseup .login': 'handleLoginPopup',
    'mousedown .resizer': 'startResize',
    'mouseup .interface': 'onInterfaceMouseUp'
  },

  MIN_RESIZE_SIZE: 20,

  /**
   * Main initialize method setting up the consoleView, editorView and
   * event listeners.
   */
  initialize: function() {
    this.currentPath = '/';
    this.currentFile = '';
    this.loginPopupUrl = '/login/in-game/';

    this.$interface = this.$('.interface');
    this.username = this.$interface.data('username') || 'guest';
    this.os = {
      'bootVersion': this.$interface.data('os-version'),
      'bootTime': this.$interface.data('os-boot')
    };
    this.initialMessage = this.$interface.data('initial-message');
    this.usingDesktop = this.$interface.data('on-desktop');
    this.consoleView = new consoleView({app: this});
    this.editorView = new editorView({app: this});
    this.isEditorInView = false;
    this.firstActivePane = null;
    this.hasRequested = this.$interface.data('requested');
    this.challenges = [];
    this.fetchFiles();

    if (this.username == 'guest') {
      googleAnalytics.trackEvent('app', 'initialised', 'anon');
    } else {
      googleAnalytics.trackEvent('app', 'initialised', 'auth');
    }

    // Set CSRF token for all Ajax requests
    $.ajaxSetup({
      headers: {
        'X-CSRFToken': this.$el.find('input[name="csrfmiddlewaretoken"]').val()
      }
    });
    this.on('editor:opened', this.onEditorOpened, this);
    this.on('editor:closed', this.onEditorClosed, this);
    this.on('challenge:timeout', this.removeChallengeFromFileSystem, this);

    window.onbeforeunload = _.bind(this.onAppClose, this);
  },

  /**
   * Sets up a new FileSystem and fetches the files and directories list
   * from the API for the current user.
   *
   * @return {!Promise<?Response>}
   */
  fetchFiles: function() {
    const self = this;

    self.files = null;
    self.files = new FileSystem();

    return self.files.fetch({
      success: function(collection) {
        collection.add({parent: null, path: '/', type: 'folder'});

        self.consoleView.enable.call(self.consoleView);
        self.extractChallenges.apply(self);
      },
      error: function() {
        self.consoleView.echo('Something went wrong...');
      }
    });
  },

  /**
   * Replaces the current FileSystem with a given array of files and
   * directories.
   *
   * @param {!Array} files - Array of files and directories
   */
  replaceFileSystem: function(files) {
    let isCurrentChallengeAvailable, currentChallengeName;

    // Set up the file system.
    files.push({parent: null, path: '/', type: 'folder'});
    this.files = null;
    this.files = new FileSystem(files);

    // Reset any timers.
    this.extractChallenges();

    // Check if there's a currently active file in the editor.
    if (!this.currentFile) {
      return;
    }

    // Get the challenge name from the current file path.
    // TODO: Handle this better, don't just strip out all slashes to get
    // the challenge name.
    currentChallengeName = this.currentFile.get('parent').replace('/', '');

    // Check if the challenge is currently available in the new files
    // array.
    isCurrentChallengeAvailable = files.some(function(file) {
      return file.name === currentChallengeName;
    });

    // Close the editor and reset the current path if the challenge is no
    // longer available.
    if (!isCurrentChallengeAvailable) {
      this.currentPath = '/';
      this.trigger('path:updated');

      if (this.editorView.opened) {
        this.editorView.onClose();
      }
    }
  },

  /**
   * Removes a challenge from the file system based on its name.
   *
   * @param {!Array} params - Challenge params.
   */
  removeChallengeFromFileSystem: function(params) {
    const challengeName = params[0],
        itemsToRemove = this.files.filter(function(item) {
          return item.get('parent') === '/' + challengeName ||
              item.get('name') === challengeName;
        });

    if (!itemsToRemove.length) {
      return;
    }

    this.files.remove(itemsToRemove);
  },

  /**
   * Updates the app-side username and also sets the prompt username.
   *
   * @param {string} username - New username.
   * @see [setPromptUsername]{@link module:views/Console#setPromptUsername}
   */
  setUsername: function(username) {
    this.consoleView.updatePromptUsername(username);
    this.username = username;
  },

  /**
   * Event callback function called on mouse up of the interface.
   * Determines which area of the interface was interacted with and calls
   * the relevant focus method for that area.
   *
   * @param {!Object} event - Event object
   * @see [events]{@link module:views/App#events}
   */
  onToggleFocus: function(event) {
    const target = $(event.target).closest('.console'),
        isConsole = !!target.length,
        isEditor = !isConsole && this.editorView.opened;

    this.consoleView.$el.removeAttr('tabindex');
    this.editorView.$el.removeAttr('tabindex');
    this.firstActivePane = null;

    if (isConsole && !this.consoleView.$el.hasClass('active')) {
      this.focusConsole();
    } else if (
        isEditor && !this.editorView.$editorHolder.hasClass('active') &&
        !this.editorView.isDisabled) {
      this.focusEditor();
    }
  },

  /**
   * Handles the keyDown event on the App's element. If the editor
   * is opened and not disabled it will listen for certain keys.
   *
   * ESC - On escape will change the elements to accept focus and will
   * remove the is-active classes. It will focus the element which is
   * losing focus. If ESC is pressed again, it will return focus to the
   * view which activated this. TAB - It will switch focus from one view
   * to the other. ENTER - It will select the view that currently has
   * focus.
   *
   * @param {!Event} event
   */
  onKeyDown: function(event) {
    const self = this;

    if (self.editorView.isDisabled || !self.isEditorInView) {
      return;
    }

    let pane = self.getActivePane();
    let inactivePane =
        pane === self.consoleView ? self.editorView : self.consoleView;

    switch (event.which) {
      case keys.ESC:
        if (self.firstActivePane) {
          self.onToggleFocus({target: self.firstActivePane.el});
        } else {
          self.firstActivePane = pane;
          self.$interface.removeClass('console--is-active editor--is-active');
          pane.$el.attr('tabindex', -1);
          inactivePane.$el.attr('tabindex', -1);
          pane.blurView();
          pane.el.focus();
        }
        break;
      case keys.TAB:
        if (self.firstActivePane) {
          if (pane.el === document.activeElement) {
            inactivePane.el.focus();
          }
        }
        break;
      case keys.ENTER:
        if (self.firstActivePane) {
          self.onToggleFocus({target: pane.el});

          event.preventDefault();
        }
        break;
    }
  },

  /**
   * Gets the active pane. It checks which panel is active by either
   * checking the is-active class or if the activeElement on the document
   * is the one matching the view's element.
   * @return {!Backbone.View}
   */
  getActivePane: function() {
    let pane;

    if (this.$interface.hasClass('console--is-active') ||
        document.activeElement === this.consoleView.el) {
      pane = this.consoleView;
    } else {
      pane = this.editorView;
    }

    return pane;
  },

  /**
   * Removes focus from the editor and applies it to the console.
   */
  focusConsole: function() {
    this.consoleView.focusView();
    this.editorView.blurView();
    this.$interface.addClass('console--is-active');
    this.$interface.removeClass('editor--is-active');
  },

  /**
   * Removes focus from the console and applies it to the editor.
   */
  focusEditor: function() {
    this.editorView.focusView();
    this.consoleView.blurView();
    this.$interface.addClass('editor--is-active');
    this.$interface.removeClass('console--is-active');
  },

  /**
   * Applies the `editor--opened` class to the Interface.
   */
  onEditorOpened: function() {
    this.isEditorInView = true;
    this.$interface.addClass('editor--opened');
  },

  /**
   * Removes the `editor--opened` from the Interface.
   */
  onEditorClosed: function() {
    this.isEditorInView = false;
    this.focusConsole();
    this.currentFile = null;
    this.$interface.removeClass('editor--opened');
    // Clean up potential inline styles added by the resizer
    // functionality.
    this.consoleView.$el.removeAttr('style');
    this.editorView.$el.removeAttr('style');
  },

  /**
   * It handles the onbeforeunload event of the window. It only returns if
   * there's a file opened and the file is dirty otherwise it won't
   * intervene so the confirm modal won't appear.
   *
   * @return {string} - The message that's going to be shown to the user
   */
  onAppClose: function() {
    if (this.currentFile && this.currentFile.get('dirty')) {
      return 'You have unsaved changes on the current file!';
    }
  },

  /**
   * Opens a given file in the editor by calling the editor view's
   * openFile method, first checking if the editor is currently open with
   * unsaved changes in order to show the "lost changes" prompt
   * beforehand.
   *
   * @param {!fileModel} file - File model to open
   */
  openFile: function(file) {
    const self = this;

    if (!self.currentFile ||
        (self.currentFile.get('path') !== file.get('path'))) {
      if (self.currentFile && self.currentFile.get('dirty')) {
        self.consoleView.echoError(
            'You have an open file with unsaved changes.');
      } else {
        self.currentFile = file;
        self.editorView.openFile();
      }
    } else {
      self.focusEditor();
    }
  },

  /**
   * Handles all mouseup processes.
   *
   * @param {!Object} event - Event object
   * @see [events]{@link module:views/App#events}
   */
  onInterfaceMouseUp: function(event) {
    this.stopResize(event);
    this.onToggleFocus(event);
  },

  /**
   * Checks whether the page is below or above 1023px wide
   *
   * @return {boolean}
   */
  isSmallScreen: function() {
    return window.matchMedia && window.matchMedia('(max-width:1023px)').matches;
  },

  /**
   * Handles the real resizing event when the user keeps dragging
   *
   * @param {!jQuery.Event} event
   * @param {string} mode - width or height so it can adjust taking the
   *     measurements and setting the css
   */
  onResize: function(event, mode) {
    const self = this;
    const axis = mode === 'width' ? 'pageX' : 'pageY';
    let diff, consoleMeasure, editorMeasure;

    // Prevent the mouse drag from selecting elements on the page
    /* istanbul ignore else */
    if (event.stopPropagation) {
      event.stopPropagation();
    }

    /* istanbul ignore else */
    if (event.preventDefault) {
      event.preventDefault();
      event.cancelBubble = true;
      event.returnValue = false;
    }

    diff = self.mouseStartPos - event[axis];
    consoleMeasure =
        ((self.consoleStartMeasure - diff + 42) / self.interfaceMeasure *
         (100 - self.resizerMeasure));
    editorMeasure = (100 - self.resizerMeasure) - consoleMeasure;

    if (consoleMeasure >= self.MIN_RESIZE_SIZE &&
        editorMeasure >= self.MIN_RESIZE_SIZE) {
      this.consoleView.$el.css(mode, consoleMeasure + '%');
      this.editorView.$el.css(mode, editorMeasure + '%');
    }
  },

  /**
   * Handles binding a mousemove event to the resize grabber element and
   * calculates the correct widths to apply to the various interface
   * elements to adjust their sizes depending on the mousemove direction.
   *
   * @param {!Object} event - Event object
   * @see [events]{@link module:views/App#events}
   */
  startResize: function(event) {
    const self = this;
    const interfaceEl = self.$interface,
          consoleEl = self.consoleView.$el,
          editorEl = self.editorView.$el,
          isSmallScreenMode = self.isSmallScreen();

    interfaceEl.addClass('is-resizing');

    if (isSmallScreenMode) {
      // We're in small screen mode
      self.mouseStartPos = event.pageY;
      self.consoleStartMeasure = consoleEl.height();
      self.interfaceMeasure = consoleEl.outerHeight() + editorEl.outerHeight();
      self.resizerMeasure = 2;  // 2%. Can't get this from outerHeight as
                                // it returns the value in px.

      interfaceEl.on('mousemove.resizeMouseMove', function(e) {
        self.onResize.call(self, e, 'height');
      });
    } else {
      // We're in desktop mode
      self.mouseStartPos = event.pageX;
      self.consoleStartMeasure = consoleEl.width();
      self.interfaceMeasure = consoleEl.outerWidth() + editorEl.outerWidth();
      self.resizerMeasure = 2;  // 2%. Can't get this from outerWidth as
                                // it returns the value in px.

      interfaceEl.on('mousemove.resizeMouseMove', function(e) {
        self.onResize.call(self, e, 'width');
      });
    }
  },

  /**
   * Fired on mouseup and removes the mousemove handler and the 'resizing'
   * class.
   *
   * @see [events]{@link module:views/App#onInterfaceMouseUp}
   */
  stopResize: function() {
    this.$interface.off('.resizeMouseMove').removeClass('is-resizing');
  },

  /**
   * Checks the file system for any top-level challenge folders and
   * creates a countdownView for each.
   */
  extractChallenges: function() {
    const self = this;

    const challenges = self.files.where({parent: '/', type: 'folder'}),
          added = [];
    let challenge, name, currentChallenges;

    for (let i = 0, len = challenges.length; i < len; i++) {
      challenge = challenges[i];
      name = challenge.get('name');
      added.push(name);

      if (!self.challenges[name]) {
        self.challenges[name] = new countdownView({model: challenge});
      }
    }

    currentChallenges = Object.keys(self.challenges);

    for (let j = 0, length = currentChallenges.length; j < length; j++) {
      if (added.indexOf(currentChallenges[j]) === -1) {
        self.challenges[currentChallenges[j]].remove();

        delete self.challenges[currentChallenges[j]];
      }
    }
  },

  /**
   * Handles opening the login popup window.
   *
   * @param {!Object} event - Event object.
   * @see [events]{@link module:views/App#events}
   */
  handleLoginPopup: function(event) {
    const self = this;

    /* istanbul ignore else */
    if (event?.preventDefault) {
      event.preventDefault();
    }

    // lets pop anything that is there already
    while (self.consoleView.console.level() > 1) {
      self.consoleView.console.pop();
    }

    // Expose a global method for the popup
    window.handleAuth = _.bind(self.handleAuth, self);

    if (typeof self.loginPopup === 'undefined' ||
        (_.isObject(self.loginPopup) && self.loginPopup.closed)) {
      self.loginPopup = safeWindow.open(
        window,
        sanitizeUrl(self.loginPopupUrl),
        'AppLogin',
        'resizable,scrollbars,status,width=600,height=450');
    } else {
      // Focus the current popup if one already exists
      self.loginPopup.focus();
    }
  },

  /**
   * Method to be exposed on the window when required. Handles updating
   * the console with messages depending on the outcome of the login
   * requests and also handles logging the user out.
   *
   * @param {!Object} authDetails - Details returned by the /login/in-game
   *     window
   */
  handleAuth: function(authDetails) {
    const self = this;

    if (authDetails.logoutUrl) {
      self.consoleView.echo(authDetails.message, {raw: true});

      return;
    }

    self.consoleView.console.pause();

    if (authDetails.allow) {
      self.$interface.data('player-id', authDetails.playerId);
      googleAnalytics.trackEvent('user', 'log in');

      self.setUsername(authDetails.username);
    }

    // update the has requested status
    self.hasRequested = authDetails.hasRequested;

    self.consoleView.echo(
        'Mounting <span class="term-blue">/home/' + authDetails.username +
            '</span>...',
        {raw: true});

    self.fetchFiles().always(function() {
      self.consoleView.echo(authDetails.message, {raw: true});

      self.consoleView.console.resume();
    });

    // Deletes itself when complete
    delete window.handleAuth;
  },

  /**
   * Handles whenever data to ask the user to be recruited is received
   *
   * @param {!Object} data
   * @see [Console#askUser]{@link module:views/Console#askUser]
   */
  onRecruitInfoReceived: function(data) {
    this.focusConsole();
    this.consoleView.askUser(data);
  },

  /**
   * Handles when the game has ended and we want to gather user's email to
   * notify them of new challenges
   *
   * @param {!Object} data
   * @see [Console#askUser]{@link module:views/Console#askUser]
   */
  onGameEndInfoReceived: function(data) {
    this.focusConsole();
    this.consoleView.askToNotifyUser(data);
  },

  /**
   * Handles the interaction to get user feedback
   *
   * @see [Console#]{@link module:views/Console#gatherFeedback]
   */
  startFeedback: function() {
    this.focusConsole();
    this.consoleView.gatherFeedback();
  }
});

const instance = new AppView();
AppView.instance = instance;
window.AppView = AppView;

exports = {AppView};

;return exports;});

